// created by jay 0.7 (c) 1998 Axel.Schreiner@informatik.uni-osnabrueck.de

#line 2 "cs-parser.jay"
//
// cs-parser.jay: The Parser for the C# compiler
//
// Authors: Miguel de Icaza (miguel@gnu.org)
//          Ravi Pratap     (ravi@ximian.com)
//          Marek Safar		(marek.safar@gmail.com)
//
// Dual Licensed under the terms of the GNU GPL and the MIT X11 license
//
// (C) 2001 Ximian, Inc (http://www.ximian.com)
// (C) 2004 Novell, Inc
//
// TODO:
//   (1) Figure out why error productions dont work.  `type-declaration' is a
//       great spot to put an `error' because you can reproduce it with this input:
//	 "public X { }"
//

using System.Text;
using System.IO;
using System;
using System.Collections.Generic;

namespace Mono.CSharp
{
	/// <summary>
	///    The C# Parser
	/// </summary>
	public class CSharpParser
	{
		[Flags]
		enum ParameterModifierType
		{
			Ref		= 1 << 1,
			Out		= 1 << 2,
			This	= 1 << 3,
			Params	= 1 << 4,
			Arglist	= 1 << 5,
			DefaultValue = 1 << 6,
			
			All = Ref | Out | This | Params | Arglist | DefaultValue
		}
	
		NamespaceEntry  current_namespace;
		TypeContainer   current_container;
		DeclSpace	current_class;
	
		/// <summary>
		///   Current block is used to add statements as we find
		///   them.  
		/// </summary>
		Block      current_block;

		Delegate   current_delegate;
		
		GenericMethod current_generic_method;
		AnonymousMethodExpression current_anonymous_method;

		/// <summary>
		///   This is used by the unary_expression code to resolve
		///   a name against a parameter.  
		/// </summary>
		
		// FIXME: This is very ugly and it's very hard to reset it correctly
		// on all places, especially when some parameters are autogenerated.
		ParametersCompiled current_local_parameters;

		/// <summary>
		///   Using during property parsing to describe the implicit
		///   value parameter that is passed to the "set" and "get"accesor
		///   methods (properties and indexers).
		/// </summary>
		FullNamedExpression implicit_value_parameter_type;
		ParametersCompiled indexer_parameters;

		/// <summary>
		///   Used to determine if we are parsing the get/set pair
		///   of an indexer or a property
		/// </summmary>
		bool parsing_indexer;

		bool parsing_anonymous_method;

		///
		/// An out-of-band stack.
		///
		static Stack<object> oob_stack;

		///
		/// Switch stack.
		///
		Stack<Block> switch_stack;

		///
		/// Controls the verbosity of the errors produced by the parser
		///
		static public int yacc_verbose_flag;

		/// 
		/// Used by the interactive shell, flags whether EOF was reached
		/// and an error was produced
		///
		public bool UnexpectedEOF;

		///
		/// The current file.
		///
		CompilationUnit file;

		///
		/// Temporary Xml documentation cache.
		/// For enum types, we need one more temporary store.
		///
		string tmpComment;
		string enumTypeComment;
	       		
		/// Current attribute target
		string current_attr_target;
		
		/// assembly and module attribute definitions are enabled
		bool global_attrs_enabled = true;
		bool has_get, has_set;
		
		ParameterModifierType valid_param_mod;
		
		bool default_parameter_used;

		/// When using the interactive parser, this holds the
		/// resulting expression
		public object InteractiveResult;

		//
		// Keeps track of global data changes to undo on parser error
		//
		public Undo undo;
		
		Stack<Block> linq_clause_blocks;

		// A counter to create new class names in interactive mode
		static int class_count;
		
		CompilerContext compiler;
		
		//
		// Instead of allocating carrier array everytime we
		// share the bucket for very common constructs which can never
		// be recursive
		//
		static List<Parameter> parameters_bucket = new List<Parameter> (6);
		static List<object> variables_bucket = new List<object> (6);
#line default

  /** error output stream.
      It should be changeable.
    */
  public System.IO.TextWriter ErrorOutput = System.Console.Out;

  /** simplified error message.
      @see <a href="#yyerror(java.lang.String, java.lang.String[])">yyerror</a>
    */
  public void yyerror (string message) {
    yyerror(message, null);
  }

  /* An EOF token */
  public int eof_token;

  /** (syntax) error message.
      Can be overwritten to control message format.
      @param message text to be displayed.
      @param expected vector of acceptable tokens, if available.
    */
  public void yyerror (string message, string[] expected) {
    if ((yacc_verbose_flag > 0) && (expected != null) && (expected.Length  > 0)) {
      ErrorOutput.Write (message+", expecting");
      for (int n = 0; n < expected.Length; ++ n)
        ErrorOutput.Write (" "+expected[n]);
        ErrorOutput.WriteLine ();
    } else
      ErrorOutput.WriteLine (message);
  }

  /** debugging support, requires the package jay.yydebug.
      Set to null to suppress debugging messages.
    */
  internal yydebug.yyDebug debug;

  protected static  int yyFinal = 8;
 // Put this array into a separate class so it is only initialized if debugging is actually used
 // Use MarshalByRefObject to disable inlining
 class YYRules : MarshalByRefObject {
  public static  string [] yyRule = {
    "$accept : compilation_unit",
    "compilation_unit : outer_declarations opt_EOF",
    "compilation_unit : outer_declarations global_attributes opt_EOF",
    "compilation_unit : global_attributes opt_EOF",
    "compilation_unit : opt_EOF",
    "$$1 :",
    "compilation_unit : interactive_parsing $$1 opt_EOF",
    "opt_EOF :",
    "opt_EOF : EOF",
    "outer_declarations : outer_declaration",
    "outer_declarations : outer_declarations outer_declaration",
    "outer_declaration : extern_alias_directive",
    "outer_declaration : using_directive",
    "outer_declaration : namespace_member_declaration",
    "extern_alias_directives : extern_alias_directive",
    "extern_alias_directives : extern_alias_directives extern_alias_directive",
    "extern_alias_directive : EXTERN_ALIAS IDENTIFIER IDENTIFIER SEMICOLON",
    "extern_alias_directive : EXTERN_ALIAS error",
    "using_directives : using_directive",
    "using_directives : using_directives using_directive",
    "using_directive : using_alias_directive",
    "using_directive : using_namespace_directive",
    "using_alias_directive : USING IDENTIFIER ASSIGN namespace_or_type_name SEMICOLON",
    "using_alias_directive : USING error",
    "using_namespace_directive : USING namespace_name SEMICOLON",
    "$$2 :",
    "namespace_declaration : opt_attributes NAMESPACE qualified_identifier $$2 namespace_body opt_semicolon",
    "qualified_identifier : IDENTIFIER",
    "qualified_identifier : qualified_identifier DOT IDENTIFIER",
    "qualified_identifier : error",
    "opt_semicolon :",
    "opt_semicolon : SEMICOLON",
    "opt_comma :",
    "opt_comma : COMMA",
    "namespace_name : namespace_or_type_name",
    "$$3 :",
    "namespace_body : OPEN_BRACE $$3 namespace_body_body",
    "namespace_body_body : opt_extern_alias_directives opt_using_directives opt_namespace_member_declarations CLOSE_BRACE",
    "$$4 :",
    "namespace_body_body : error $$4 CLOSE_BRACE",
    "namespace_body_body : opt_extern_alias_directives opt_using_directives opt_namespace_member_declarations EOF",
    "opt_using_directives :",
    "opt_using_directives : using_directives",
    "opt_extern_alias_directives :",
    "opt_extern_alias_directives : extern_alias_directives",
    "opt_namespace_member_declarations :",
    "opt_namespace_member_declarations : namespace_member_declarations",
    "namespace_member_declarations : namespace_member_declaration",
    "namespace_member_declarations : namespace_member_declarations namespace_member_declaration",
    "namespace_member_declaration : type_declaration",
    "namespace_member_declaration : namespace_declaration",
    "namespace_member_declaration : field_declaration",
    "namespace_member_declaration : method_declaration",
    "type_declaration : class_declaration",
    "type_declaration : struct_declaration",
    "type_declaration : interface_declaration",
    "type_declaration : enum_declaration",
    "type_declaration : delegate_declaration",
    "global_attributes : attribute_sections",
    "opt_attributes :",
    "opt_attributes : attribute_sections",
    "attribute_sections : attribute_section",
    "attribute_sections : attribute_sections attribute_section",
    "attribute_section : OPEN_BRACKET attribute_target_specifier attribute_list opt_comma CLOSE_BRACKET",
    "attribute_section : OPEN_BRACKET attribute_list opt_comma CLOSE_BRACKET",
    "attribute_target_specifier : attribute_target COLON",
    "attribute_target : IDENTIFIER",
    "attribute_target : EVENT",
    "attribute_target : RETURN",
    "attribute_target : error",
    "attribute_list : attribute",
    "attribute_list : attribute_list COMMA attribute",
    "$$5 :",
    "attribute : attribute_name $$5 opt_attribute_arguments",
    "attribute_name : namespace_or_type_name",
    "opt_attribute_arguments :",
    "opt_attribute_arguments : OPEN_PARENS attribute_arguments CLOSE_PARENS",
    "attribute_arguments :",
    "attribute_arguments : positional_or_named_argument",
    "attribute_arguments : named_attribute_argument",
    "attribute_arguments : attribute_arguments COMMA positional_or_named_argument",
    "attribute_arguments : attribute_arguments COMMA named_attribute_argument",
    "positional_or_named_argument : expression",
    "positional_or_named_argument : named_argument",
    "named_attribute_argument : IDENTIFIER ASSIGN expression",
    "named_argument : IDENTIFIER COLON opt_named_modifier expression",
    "opt_named_modifier :",
    "opt_named_modifier : REF",
    "opt_named_modifier : OUT",
    "class_body : OPEN_BRACE opt_class_member_declarations CLOSE_BRACE",
    "opt_class_member_declarations :",
    "opt_class_member_declarations : class_member_declarations",
    "class_member_declarations : class_member_declaration",
    "class_member_declarations : class_member_declarations class_member_declaration",
    "class_member_declaration : constant_declaration",
    "class_member_declaration : field_declaration",
    "class_member_declaration : method_declaration",
    "class_member_declaration : property_declaration",
    "class_member_declaration : event_declaration",
    "class_member_declaration : indexer_declaration",
    "class_member_declaration : operator_declaration",
    "class_member_declaration : constructor_declaration",
    "class_member_declaration : destructor_declaration",
    "class_member_declaration : type_declaration",
    "class_member_declaration : error",
    "$$6 :",
    "$$7 :",
    "$$8 :",
    "$$9 :",
    "struct_declaration : opt_attributes opt_modifiers opt_partial STRUCT $$6 type_declaration_name $$7 opt_class_base opt_type_parameter_constraints_clauses $$8 struct_body $$9 opt_semicolon",
    "struct_declaration : opt_attributes opt_modifiers opt_partial STRUCT error",
    "$$10 :",
    "struct_body : OPEN_BRACE $$10 opt_struct_member_declarations CLOSE_BRACE",
    "opt_struct_member_declarations :",
    "opt_struct_member_declarations : struct_member_declarations",
    "struct_member_declarations : struct_member_declaration",
    "struct_member_declarations : struct_member_declarations struct_member_declaration",
    "struct_member_declaration : constant_declaration",
    "struct_member_declaration : field_declaration",
    "struct_member_declaration : method_declaration",
    "struct_member_declaration : property_declaration",
    "struct_member_declaration : event_declaration",
    "struct_member_declaration : indexer_declaration",
    "struct_member_declaration : operator_declaration",
    "struct_member_declaration : constructor_declaration",
    "struct_member_declaration : type_declaration",
    "struct_member_declaration : destructor_declaration",
    "constant_declaration : opt_attributes opt_modifiers CONST type constant_declarators SEMICOLON",
    "constant_declarators : constant_declarator",
    "constant_declarators : constant_declarators COMMA constant_declarator",
    "$$11 :",
    "constant_declarator : IDENTIFIER ASSIGN $$11 constant_initializer",
    "constant_declarator : IDENTIFIER",
    "constant_initializer : constant_expression",
    "constant_initializer : array_initializer",
    "field_declaration : opt_attributes opt_modifiers member_type variable_declarators SEMICOLON",
    "field_declaration : opt_attributes opt_modifiers FIXED member_type fixed_variable_declarators SEMICOLON",
    "field_declaration : opt_attributes opt_modifiers FIXED member_type error",
    "fixed_variable_declarators : fixed_variable_declarator",
    "fixed_variable_declarators : fixed_variable_declarators COMMA fixed_variable_declarator",
    "fixed_variable_declarator : IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET",
    "fixed_variable_declarator : IDENTIFIER OPEN_BRACKET CLOSE_BRACKET",
    "local_variable_declarators : local_variable_declarator",
    "local_variable_declarators : local_variable_declarators COMMA local_variable_declarator",
    "local_variable_declarator : IDENTIFIER ASSIGN local_variable_initializer",
    "local_variable_declarator : IDENTIFIER",
    "local_variable_declarator : IDENTIFIER variable_bad_array",
    "local_variable_initializer : expression",
    "local_variable_initializer : array_initializer",
    "local_variable_initializer : STACKALLOC simple_type OPEN_BRACKET expression CLOSE_BRACKET",
    "local_variable_initializer : ARGLIST",
    "local_variable_initializer : STACKALLOC simple_type",
    "variable_declarators : variable_declarator",
    "variable_declarators : variable_declarators COMMA variable_declarator",
    "$$12 :",
    "variable_declarator : member_declaration_name ASSIGN $$12 variable_initializer",
    "variable_declarator : member_declaration_name",
    "variable_declarator : member_declaration_name variable_bad_array",
    "variable_bad_array : OPEN_BRACKET opt_expression CLOSE_BRACKET",
    "variable_initializer : expression",
    "variable_initializer : array_initializer",
    "$$13 :",
    "method_declaration : method_header $$13 method_body",
    "$$14 :",
    "$$15 :",
    "method_header : opt_attributes opt_modifiers member_type method_declaration_name OPEN_PARENS $$14 opt_formal_parameter_list CLOSE_PARENS $$15 opt_type_parameter_constraints_clauses",
    "$$16 :",
    "$$17 :",
    "method_header : opt_attributes opt_modifiers PARTIAL VOID method_declaration_name OPEN_PARENS $$16 opt_formal_parameter_list CLOSE_PARENS $$17 opt_type_parameter_constraints_clauses",
    "method_header : opt_attributes opt_modifiers member_type modifiers method_declaration_name OPEN_PARENS opt_formal_parameter_list CLOSE_PARENS",
    "method_body : block",
    "method_body : SEMICOLON",
    "opt_formal_parameter_list :",
    "opt_formal_parameter_list : formal_parameter_list",
    "formal_parameter_list : fixed_parameters",
    "formal_parameter_list : fixed_parameters COMMA parameter_array",
    "formal_parameter_list : fixed_parameters COMMA arglist_modifier",
    "formal_parameter_list : parameter_array COMMA error",
    "formal_parameter_list : fixed_parameters COMMA parameter_array COMMA error",
    "formal_parameter_list : arglist_modifier COMMA error",
    "formal_parameter_list : fixed_parameters COMMA ARGLIST COMMA error",
    "formal_parameter_list : parameter_array",
    "formal_parameter_list : arglist_modifier",
    "fixed_parameters : fixed_parameter",
    "fixed_parameters : fixed_parameters COMMA fixed_parameter",
    "fixed_parameter : opt_attributes opt_parameter_modifier parameter_type IDENTIFIER",
    "fixed_parameter : opt_attributes opt_parameter_modifier parameter_type IDENTIFIER OPEN_BRACKET CLOSE_BRACKET",
    "fixed_parameter : opt_attributes opt_parameter_modifier parameter_type error",
    "fixed_parameter : opt_attributes opt_parameter_modifier parameter_type IDENTIFIER ASSIGN constant_expression",
    "opt_parameter_modifier :",
    "opt_parameter_modifier : parameter_modifiers",
    "parameter_modifiers : parameter_modifier",
    "parameter_modifiers : parameter_modifiers parameter_modifier",
    "parameter_modifier : REF",
    "parameter_modifier : OUT",
    "parameter_modifier : THIS",
    "parameter_array : opt_attributes params_modifier type IDENTIFIER",
    "parameter_array : opt_attributes params_modifier type IDENTIFIER ASSIGN constant_expression",
    "parameter_array : opt_attributes params_modifier type error",
    "params_modifier : PARAMS",
    "params_modifier : PARAMS parameter_modifier",
    "params_modifier : PARAMS params_modifier",
    "arglist_modifier : ARGLIST",
    "$$18 :",
    "$$19 :",
    "$$20 :",
    "property_declaration : opt_attributes opt_modifiers member_type member_declaration_name $$18 OPEN_BRACE $$19 accessor_declarations $$20 CLOSE_BRACE",
    "accessor_declarations : get_accessor_declaration",
    "accessor_declarations : get_accessor_declaration accessor_declarations",
    "accessor_declarations : set_accessor_declaration",
    "accessor_declarations : set_accessor_declaration accessor_declarations",
    "accessor_declarations : error",
    "$$21 :",
    "get_accessor_declaration : opt_attributes opt_modifiers GET $$21 accessor_body",
    "$$22 :",
    "set_accessor_declaration : opt_attributes opt_modifiers SET $$22 accessor_body",
    "accessor_body : block",
    "accessor_body : SEMICOLON",
    "accessor_body : error",
    "$$23 :",
    "$$24 :",
    "$$25 :",
    "$$26 :",
    "interface_declaration : opt_attributes opt_modifiers opt_partial INTERFACE $$23 type_declaration_name $$24 opt_class_base opt_type_parameter_constraints_clauses $$25 interface_body $$26 opt_semicolon",
    "interface_declaration : opt_attributes opt_modifiers opt_partial INTERFACE error",
    "interface_body : OPEN_BRACE opt_interface_member_declarations CLOSE_BRACE",
    "opt_interface_member_declarations :",
    "opt_interface_member_declarations : interface_member_declarations",
    "interface_member_declarations : interface_member_declaration",
    "interface_member_declarations : interface_member_declarations interface_member_declaration",
    "interface_member_declaration : constant_declaration",
    "interface_member_declaration : field_declaration",
    "interface_member_declaration : method_declaration",
    "interface_member_declaration : property_declaration",
    "interface_member_declaration : event_declaration",
    "interface_member_declaration : indexer_declaration",
    "interface_member_declaration : operator_declaration",
    "interface_member_declaration : constructor_declaration",
    "interface_member_declaration : type_declaration",
    "$$27 :",
    "operator_declaration : opt_attributes opt_modifiers operator_declarator $$27 operator_body",
    "operator_body : block",
    "operator_body : SEMICOLON",
    "operator_type : type_expression_or_array",
    "operator_type : VOID",
    "$$28 :",
    "operator_declarator : operator_type OPERATOR overloadable_operator OPEN_PARENS $$28 opt_formal_parameter_list CLOSE_PARENS",
    "operator_declarator : conversion_operator_declarator",
    "overloadable_operator : BANG",
    "overloadable_operator : TILDE",
    "overloadable_operator : OP_INC",
    "overloadable_operator : OP_DEC",
    "overloadable_operator : TRUE",
    "overloadable_operator : FALSE",
    "overloadable_operator : PLUS",
    "overloadable_operator : MINUS",
    "overloadable_operator : STAR",
    "overloadable_operator : DIV",
    "overloadable_operator : PERCENT",
    "overloadable_operator : BITWISE_AND",
    "overloadable_operator : BITWISE_OR",
    "overloadable_operator : CARRET",
    "overloadable_operator : OP_SHIFT_LEFT",
    "overloadable_operator : OP_SHIFT_RIGHT",
    "overloadable_operator : OP_EQ",
    "overloadable_operator : OP_NE",
    "overloadable_operator : OP_GT",
    "overloadable_operator : OP_LT",
    "overloadable_operator : OP_GE",
    "overloadable_operator : OP_LE",
    "$$29 :",
    "conversion_operator_declarator : IMPLICIT OPERATOR type OPEN_PARENS $$29 opt_formal_parameter_list CLOSE_PARENS",
    "$$30 :",
    "conversion_operator_declarator : EXPLICIT OPERATOR type OPEN_PARENS $$30 opt_formal_parameter_list CLOSE_PARENS",
    "conversion_operator_declarator : IMPLICIT error",
    "conversion_operator_declarator : EXPLICIT error",
    "constructor_declaration : constructor_declarator constructor_body",
    "$$31 :",
    "$$32 :",
    "constructor_declarator : opt_attributes opt_modifiers IDENTIFIER $$31 OPEN_PARENS opt_formal_parameter_list CLOSE_PARENS $$32 opt_constructor_initializer",
    "constructor_body : block_prepared",
    "constructor_body : SEMICOLON",
    "opt_constructor_initializer :",
    "opt_constructor_initializer : constructor_initializer",
    "$$33 :",
    "constructor_initializer : COLON BASE OPEN_PARENS $$33 opt_argument_list CLOSE_PARENS",
    "$$34 :",
    "constructor_initializer : COLON THIS OPEN_PARENS $$34 opt_argument_list CLOSE_PARENS",
    "constructor_initializer : COLON error",
    "$$35 :",
    "destructor_declaration : opt_attributes opt_modifiers TILDE $$35 IDENTIFIER OPEN_PARENS CLOSE_PARENS method_body",
    "event_declaration : opt_attributes opt_modifiers EVENT type variable_declarators SEMICOLON",
    "$$36 :",
    "$$37 :",
    "event_declaration : opt_attributes opt_modifiers EVENT type member_declaration_name OPEN_BRACE $$36 event_accessor_declarations $$37 CLOSE_BRACE",
    "event_declaration : opt_attributes opt_modifiers EVENT type member_declaration_name error",
    "event_accessor_declarations : add_accessor_declaration remove_accessor_declaration",
    "event_accessor_declarations : remove_accessor_declaration add_accessor_declaration",
    "event_accessor_declarations : add_accessor_declaration",
    "event_accessor_declarations : remove_accessor_declaration",
    "event_accessor_declarations : error",
    "event_accessor_declarations :",
    "$$38 :",
    "add_accessor_declaration : opt_attributes ADD $$38 block",
    "add_accessor_declaration : opt_attributes ADD error",
    "add_accessor_declaration : opt_attributes modifiers ADD",
    "$$39 :",
    "remove_accessor_declaration : opt_attributes REMOVE $$39 block",
    "remove_accessor_declaration : opt_attributes REMOVE error",
    "remove_accessor_declaration : opt_attributes modifiers REMOVE",
    "$$40 :",
    "$$41 :",
    "$$42 :",
    "indexer_declaration : opt_attributes opt_modifiers member_type indexer_declaration_name OPEN_BRACKET $$40 opt_formal_parameter_list CLOSE_BRACKET OPEN_BRACE $$41 accessor_declarations $$42 CLOSE_BRACE",
    "$$43 :",
    "enum_declaration : opt_attributes opt_modifiers ENUM type_declaration_name opt_enum_base $$43 enum_body opt_semicolon",
    "opt_enum_base :",
    "opt_enum_base : COLON type",
    "opt_enum_base : COLON error",
    "$$44 :",
    "$$45 :",
    "enum_body : OPEN_BRACE $$44 opt_enum_member_declarations $$45 CLOSE_BRACE",
    "opt_enum_member_declarations :",
    "opt_enum_member_declarations : enum_member_declarations opt_comma",
    "enum_member_declarations : enum_member_declaration",
    "enum_member_declarations : enum_member_declarations COMMA enum_member_declaration",
    "enum_member_declaration : opt_attributes IDENTIFIER",
    "$$46 :",
    "enum_member_declaration : opt_attributes IDENTIFIER $$46 ASSIGN constant_expression",
    "$$47 :",
    "$$48 :",
    "$$49 :",
    "delegate_declaration : opt_attributes opt_modifiers DELEGATE member_type type_declaration_name OPEN_PARENS $$47 opt_formal_parameter_list CLOSE_PARENS $$48 opt_type_parameter_constraints_clauses $$49 SEMICOLON",
    "opt_nullable :",
    "opt_nullable : INTERR_NULLABLE",
    "namespace_or_type_name : member_name",
    "namespace_or_type_name : qualified_alias_member IDENTIFIER opt_type_argument_list",
    "member_name : type_name",
    "member_name : namespace_or_type_name DOT IDENTIFIER opt_type_argument_list",
    "type_name : IDENTIFIER opt_type_argument_list",
    "opt_type_argument_list :",
    "opt_type_argument_list : OP_GENERICS_LT type_arguments OP_GENERICS_GT",
    "opt_type_argument_list : OP_GENERICS_LT error",
    "type_arguments : type",
    "type_arguments : type_arguments COMMA type",
    "$$50 :",
    "type_declaration_name : IDENTIFIER $$50 opt_type_parameter_list",
    "member_declaration_name : method_declaration_name",
    "method_declaration_name : type_declaration_name",
    "method_declaration_name : explicit_interface IDENTIFIER opt_type_parameter_list",
    "indexer_declaration_name : THIS",
    "indexer_declaration_name : explicit_interface THIS",
    "explicit_interface : IDENTIFIER opt_type_argument_list DOT",
    "explicit_interface : qualified_alias_member IDENTIFIER opt_type_argument_list DOT",
    "explicit_interface : explicit_interface IDENTIFIER opt_type_argument_list DOT",
    "opt_type_parameter_list :",
    "opt_type_parameter_list : OP_GENERICS_LT_DECL type_parameters OP_GENERICS_GT",
    "type_parameters : type_parameter",
    "type_parameters : type_parameters COMMA type_parameter",
    "type_parameter : opt_attributes opt_type_parameter_variance IDENTIFIER",
    "type_parameter : error",
    "type_and_void : type_expression_or_array",
    "type_and_void : VOID",
    "member_type : type_and_void",
    "type : type_expression_or_array",
    "type : VOID",
    "simple_type : type_expression",
    "simple_type : VOID",
    "parameter_type : type_expression_or_array",
    "parameter_type : VOID",
    "type_expression_or_array : type_expression",
    "type_expression_or_array : type_expression rank_specifiers",
    "type_expression : namespace_or_type_name opt_nullable",
    "type_expression : builtin_types opt_nullable",
    "type_expression : type_expression STAR",
    "type_expression : VOID STAR",
    "type_list : base_type_name",
    "type_list : type_list COMMA base_type_name",
    "base_type_name : type",
    "base_type_name : error",
    "builtin_types : OBJECT",
    "builtin_types : STRING",
    "builtin_types : BOOL",
    "builtin_types : DECIMAL",
    "builtin_types : FLOAT",
    "builtin_types : DOUBLE",
    "builtin_types : integral_type",
    "integral_type : SBYTE",
    "integral_type : BYTE",
    "integral_type : SHORT",
    "integral_type : USHORT",
    "integral_type : INT",
    "integral_type : UINT",
    "integral_type : LONG",
    "integral_type : ULONG",
    "integral_type : CHAR",
    "predefined_type : builtin_types",
    "predefined_type : VOID",
    "primary_expression : primary_expression_no_array_creation",
    "primary_expression : array_creation_expression",
    "primary_expression_no_array_creation : literal",
    "primary_expression_no_array_creation : IDENTIFIER opt_type_argument_list",
    "primary_expression_no_array_creation : IDENTIFIER GENERATE_COMPLETION",
    "primary_expression_no_array_creation : parenthesized_expression",
    "primary_expression_no_array_creation : default_value_expression",
    "primary_expression_no_array_creation : member_access",
    "primary_expression_no_array_creation : invocation_expression",
    "primary_expression_no_array_creation : element_access",
    "primary_expression_no_array_creation : this_access",
    "primary_expression_no_array_creation : base_access",
    "primary_expression_no_array_creation : post_increment_expression",
    "primary_expression_no_array_creation : post_decrement_expression",
    "primary_expression_no_array_creation : object_or_delegate_creation_expression",
    "primary_expression_no_array_creation : anonymous_type_expression",
    "primary_expression_no_array_creation : typeof_expression",
    "primary_expression_no_array_creation : sizeof_expression",
    "primary_expression_no_array_creation : checked_expression",
    "primary_expression_no_array_creation : unchecked_expression",
    "primary_expression_no_array_creation : pointer_member_access",
    "primary_expression_no_array_creation : anonymous_method_expression",
    "literal : boolean_literal",
    "literal : LITERAL",
    "literal : NULL",
    "boolean_literal : TRUE",
    "boolean_literal : FALSE",
    "open_parens_any : OPEN_PARENS",
    "open_parens_any : OPEN_PARENS_CAST",
    "close_parens : CLOSE_PARENS",
    "close_parens : COMPLETE_COMPLETION",
    "parenthesized_expression : OPEN_PARENS expression CLOSE_PARENS",
    "parenthesized_expression : OPEN_PARENS expression COMPLETE_COMPLETION",
    "member_access : primary_expression DOT IDENTIFIER opt_type_argument_list",
    "member_access : predefined_type DOT IDENTIFIER opt_type_argument_list",
    "member_access : qualified_alias_member IDENTIFIER opt_type_argument_list",
    "member_access : primary_expression DOT GENERATE_COMPLETION",
    "member_access : primary_expression DOT IDENTIFIER GENERATE_COMPLETION",
    "member_access : predefined_type DOT GENERATE_COMPLETION",
    "member_access : predefined_type DOT IDENTIFIER GENERATE_COMPLETION",
    "invocation_expression : primary_expression open_parens_any opt_argument_list close_parens",
    "opt_object_or_collection_initializer :",
    "opt_object_or_collection_initializer : object_or_collection_initializer",
    "object_or_collection_initializer : OPEN_BRACE opt_member_initializer_list close_brace_or_complete_completion",
    "object_or_collection_initializer : OPEN_BRACE member_initializer_list COMMA CLOSE_BRACE",
    "opt_member_initializer_list :",
    "opt_member_initializer_list : member_initializer_list",
    "member_initializer_list : member_initializer",
    "member_initializer_list : member_initializer_list COMMA member_initializer",
    "member_initializer_list : member_initializer_list error",
    "member_initializer : IDENTIFIER ASSIGN initializer_value",
    "member_initializer : GENERATE_COMPLETION",
    "member_initializer : non_assignment_expression opt_COMPLETE_COMPLETION",
    "member_initializer : OPEN_BRACE expression_list CLOSE_BRACE",
    "member_initializer : OPEN_BRACE CLOSE_BRACE",
    "initializer_value : expression",
    "initializer_value : object_or_collection_initializer",
    "opt_argument_list :",
    "opt_argument_list : argument_list",
    "argument_list : argument_or_named_argument",
    "argument_list : argument_list COMMA argument",
    "argument_list : argument_list COMMA named_argument",
    "argument_list : argument_list COMMA",
    "argument_list : COMMA argument_or_named_argument",
    "argument : expression",
    "argument : non_simple_argument",
    "argument_or_named_argument : argument",
    "argument_or_named_argument : named_argument",
    "non_simple_argument : REF variable_reference",
    "non_simple_argument : OUT variable_reference",
    "non_simple_argument : ARGLIST OPEN_PARENS argument_list CLOSE_PARENS",
    "non_simple_argument : ARGLIST OPEN_PARENS CLOSE_PARENS",
    "non_simple_argument : ARGLIST",
    "variable_reference : expression",
    "element_access : primary_expression_no_array_creation OPEN_BRACKET expression_list_arguments CLOSE_BRACKET",
    "element_access : array_creation_expression OPEN_BRACKET expression_list_arguments CLOSE_BRACKET",
    "element_access : primary_expression_no_array_creation rank_specifiers",
    "expression_list : expression",
    "expression_list : expression_list COMMA expression",
    "expression_list : expression_list error",
    "expression_list_arguments : expression_list_argument",
    "expression_list_arguments : expression_list_arguments COMMA expression_list_argument",
    "expression_list_argument : expression",
    "expression_list_argument : named_argument",
    "this_access : THIS",
    "base_access : BASE DOT IDENTIFIER opt_type_argument_list",
    "base_access : BASE OPEN_BRACKET expression_list_arguments CLOSE_BRACKET",
    "base_access : BASE error",
    "post_increment_expression : primary_expression OP_INC",
    "post_decrement_expression : primary_expression OP_DEC",
    "object_or_delegate_creation_expression : new_expr_start open_parens_any opt_argument_list CLOSE_PARENS opt_object_or_collection_initializer",
    "object_or_delegate_creation_expression : new_expr_start object_or_collection_initializer",
    "array_creation_expression : new_expr_start OPEN_BRACKET expression_list CLOSE_BRACKET opt_rank_specifier opt_array_initializer",
    "array_creation_expression : new_expr_start rank_specifiers opt_array_initializer",
    "array_creation_expression : NEW rank_specifiers array_initializer",
    "array_creation_expression : new_expr_start error",
    "$$51 :",
    "new_expr_start : NEW $$51 simple_type",
    "anonymous_type_expression : NEW OPEN_BRACE anonymous_type_parameters_opt_comma CLOSE_BRACE",
    "anonymous_type_parameters_opt_comma : anonymous_type_parameters_opt",
    "anonymous_type_parameters_opt_comma : anonymous_type_parameters COMMA",
    "anonymous_type_parameters_opt :",
    "anonymous_type_parameters_opt : anonymous_type_parameters",
    "anonymous_type_parameters : anonymous_type_parameter",
    "anonymous_type_parameters : anonymous_type_parameters COMMA anonymous_type_parameter",
    "anonymous_type_parameter : IDENTIFIER ASSIGN variable_initializer",
    "anonymous_type_parameter : IDENTIFIER",
    "anonymous_type_parameter : BASE DOT IDENTIFIER opt_type_argument_list",
    "anonymous_type_parameter : member_access",
    "anonymous_type_parameter : error",
    "opt_rank_specifier :",
    "opt_rank_specifier : rank_specifiers",
    "opt_rank_specifier_or_nullable : opt_nullable",
    "opt_rank_specifier_or_nullable : opt_nullable rank_specifiers",
    "rank_specifiers : rank_specifier",
    "rank_specifiers : rank_specifier rank_specifiers",
    "rank_specifier : OPEN_BRACKET CLOSE_BRACKET",
    "rank_specifier : OPEN_BRACKET dim_separators CLOSE_BRACKET",
    "rank_specifier : OPEN_BRACKET error",
    "dim_separators : COMMA",
    "dim_separators : dim_separators COMMA",
    "opt_array_initializer :",
    "opt_array_initializer : array_initializer",
    "array_initializer : OPEN_BRACE CLOSE_BRACE",
    "array_initializer : OPEN_BRACE variable_initializer_list opt_comma CLOSE_BRACE",
    "variable_initializer_list : variable_initializer",
    "variable_initializer_list : variable_initializer_list COMMA variable_initializer",
    "variable_initializer_list : error",
    "$$52 :",
    "typeof_expression : TYPEOF $$52 open_parens_any typeof_type_expression CLOSE_PARENS",
    "typeof_type_expression : type_and_void",
    "typeof_type_expression : unbound_type_name",
    "typeof_type_expression : error",
    "unbound_type_name : IDENTIFIER generic_dimension",
    "unbound_type_name : qualified_alias_member IDENTIFIER generic_dimension",
    "unbound_type_name : unbound_type_name DOT IDENTIFIER",
    "unbound_type_name : unbound_type_name DOT IDENTIFIER generic_dimension",
    "unbound_type_name : namespace_or_type_name DOT IDENTIFIER generic_dimension",
    "generic_dimension : GENERIC_DIMENSION",
    "qualified_alias_member : IDENTIFIER DOUBLE_COLON",
    "sizeof_expression : SIZEOF open_parens_any type CLOSE_PARENS",
    "checked_expression : CHECKED open_parens_any expression CLOSE_PARENS",
    "unchecked_expression : UNCHECKED open_parens_any expression CLOSE_PARENS",
    "pointer_member_access : primary_expression OP_PTR IDENTIFIER",
    "$$53 :",
    "anonymous_method_expression : DELEGATE opt_anonymous_method_signature $$53 block",
    "opt_anonymous_method_signature :",
    "opt_anonymous_method_signature : anonymous_method_signature",
    "$$54 :",
    "anonymous_method_signature : OPEN_PARENS $$54 opt_formal_parameter_list CLOSE_PARENS",
    "default_value_expression : DEFAULT open_parens_any type CLOSE_PARENS",
    "unary_expression : primary_expression",
    "unary_expression : BANG prefixed_unary_expression",
    "unary_expression : TILDE prefixed_unary_expression",
    "unary_expression : cast_expression",
    "cast_expression : OPEN_PARENS_CAST type CLOSE_PARENS prefixed_unary_expression",
    "cast_expression : OPEN_PARENS predefined_type CLOSE_PARENS prefixed_unary_expression",
    "prefixed_unary_expression : unary_expression",
    "prefixed_unary_expression : PLUS prefixed_unary_expression",
    "prefixed_unary_expression : MINUS prefixed_unary_expression",
    "prefixed_unary_expression : OP_INC prefixed_unary_expression",
    "prefixed_unary_expression : OP_DEC prefixed_unary_expression",
    "prefixed_unary_expression : STAR prefixed_unary_expression",
    "prefixed_unary_expression : BITWISE_AND prefixed_unary_expression",
    "multiplicative_expression : prefixed_unary_expression",
    "multiplicative_expression : multiplicative_expression STAR prefixed_unary_expression",
    "multiplicative_expression : multiplicative_expression DIV prefixed_unary_expression",
    "multiplicative_expression : multiplicative_expression PERCENT prefixed_unary_expression",
    "additive_expression : multiplicative_expression",
    "additive_expression : additive_expression PLUS multiplicative_expression",
    "additive_expression : additive_expression MINUS multiplicative_expression",
    "additive_expression : parenthesized_expression MINUS multiplicative_expression",
    "additive_expression : additive_expression AS type",
    "additive_expression : additive_expression IS type",
    "shift_expression : additive_expression",
    "shift_expression : shift_expression OP_SHIFT_LEFT additive_expression",
    "shift_expression : shift_expression OP_SHIFT_RIGHT additive_expression",
    "relational_expression : shift_expression",
    "relational_expression : relational_expression OP_LT shift_expression",
    "relational_expression : relational_expression OP_GT shift_expression",
    "relational_expression : relational_expression OP_LE shift_expression",
    "relational_expression : relational_expression OP_GE shift_expression",
    "equality_expression : relational_expression",
    "equality_expression : equality_expression OP_EQ relational_expression",
    "equality_expression : equality_expression OP_NE relational_expression",
    "and_expression : equality_expression",
    "and_expression : and_expression BITWISE_AND equality_expression",
    "exclusive_or_expression : and_expression",
    "exclusive_or_expression : exclusive_or_expression CARRET and_expression",
    "inclusive_or_expression : exclusive_or_expression",
    "inclusive_or_expression : inclusive_or_expression BITWISE_OR exclusive_or_expression",
    "conditional_and_expression : inclusive_or_expression",
    "conditional_and_expression : conditional_and_expression OP_AND inclusive_or_expression",
    "conditional_or_expression : conditional_and_expression",
    "conditional_or_expression : conditional_or_expression OP_OR conditional_and_expression",
    "null_coalescing_expression : conditional_or_expression",
    "null_coalescing_expression : conditional_or_expression OP_COALESCING null_coalescing_expression",
    "conditional_expression : null_coalescing_expression",
    "conditional_expression : null_coalescing_expression INTERR expression COLON expression",
    "assignment_expression : prefixed_unary_expression ASSIGN expression",
    "assignment_expression : prefixed_unary_expression OP_MULT_ASSIGN expression",
    "assignment_expression : prefixed_unary_expression OP_DIV_ASSIGN expression",
    "assignment_expression : prefixed_unary_expression OP_MOD_ASSIGN expression",
    "assignment_expression : prefixed_unary_expression OP_ADD_ASSIGN expression",
    "assignment_expression : prefixed_unary_expression OP_SUB_ASSIGN expression",
    "assignment_expression : prefixed_unary_expression OP_SHIFT_LEFT_ASSIGN expression",
    "assignment_expression : prefixed_unary_expression OP_SHIFT_RIGHT_ASSIGN expression",
    "assignment_expression : prefixed_unary_expression OP_AND_ASSIGN expression",
    "assignment_expression : prefixed_unary_expression OP_OR_ASSIGN expression",
    "assignment_expression : prefixed_unary_expression OP_XOR_ASSIGN expression",
    "lambda_parameter_list : lambda_parameter",
    "lambda_parameter_list : lambda_parameter_list COMMA lambda_parameter",
    "lambda_parameter : parameter_modifier parameter_type IDENTIFIER",
    "lambda_parameter : parameter_type IDENTIFIER",
    "lambda_parameter : IDENTIFIER",
    "opt_lambda_parameter_list :",
    "opt_lambda_parameter_list : lambda_parameter_list",
    "$$55 :",
    "lambda_expression_body : $$55 expression",
    "lambda_expression_body : block",
    "$$56 :",
    "lambda_expression : IDENTIFIER ARROW $$56 lambda_expression_body",
    "$$57 :",
    "$$58 :",
    "lambda_expression : OPEN_PARENS_LAMBDA $$57 opt_lambda_parameter_list CLOSE_PARENS ARROW $$58 lambda_expression_body",
    "expression : assignment_expression",
    "expression : non_assignment_expression",
    "non_assignment_expression : conditional_expression",
    "non_assignment_expression : lambda_expression",
    "non_assignment_expression : query_expression",
    "constant_expression : expression",
    "boolean_expression : expression",
    "$$59 :",
    "$$60 :",
    "$$61 :",
    "$$62 :",
    "class_declaration : opt_attributes opt_modifiers opt_partial CLASS $$59 type_declaration_name $$60 opt_class_base opt_type_parameter_constraints_clauses $$61 class_body $$62 opt_semicolon",
    "opt_partial :",
    "opt_partial : PARTIAL",
    "opt_modifiers :",
    "opt_modifiers : modifiers",
    "modifiers : modifier",
    "modifiers : modifiers modifier",
    "modifier : NEW",
    "modifier : PUBLIC",
    "modifier : PROTECTED",
    "modifier : INTERNAL",
    "modifier : PRIVATE",
    "modifier : ABSTRACT",
    "modifier : SEALED",
    "modifier : STATIC",
    "modifier : READONLY",
    "modifier : VIRTUAL",
    "modifier : OVERRIDE",
    "modifier : EXTERN",
    "modifier : VOLATILE",
    "modifier : UNSAFE",
    "opt_class_base :",
    "opt_class_base : class_base",
    "class_base : COLON type_list",
    "opt_type_parameter_constraints_clauses :",
    "opt_type_parameter_constraints_clauses : type_parameter_constraints_clauses",
    "type_parameter_constraints_clauses : type_parameter_constraints_clause",
    "type_parameter_constraints_clauses : type_parameter_constraints_clauses type_parameter_constraints_clause",
    "type_parameter_constraints_clause : WHERE IDENTIFIER COLON type_parameter_constraints",
    "type_parameter_constraints : type_parameter_constraint",
    "type_parameter_constraints : type_parameter_constraints COMMA type_parameter_constraint",
    "type_parameter_constraint : type",
    "type_parameter_constraint : NEW OPEN_PARENS CLOSE_PARENS",
    "type_parameter_constraint : CLASS",
    "type_parameter_constraint : STRUCT",
    "opt_type_parameter_variance :",
    "opt_type_parameter_variance : type_parameter_variance",
    "type_parameter_variance : OUT",
    "type_parameter_variance : IN",
    "$$63 :",
    "block : OPEN_BRACE $$63 opt_statement_list block_end",
    "block_end : CLOSE_BRACE",
    "block_end : COMPLETE_COMPLETION",
    "$$64 :",
    "block_prepared : OPEN_BRACE $$64 opt_statement_list CLOSE_BRACE",
    "opt_statement_list :",
    "opt_statement_list : statement_list",
    "statement_list : statement",
    "statement_list : statement_list statement",
    "statement : declaration_statement",
    "statement : valid_declaration_statement",
    "statement : labeled_statement",
    "interactive_statement_list : interactive_statement",
    "interactive_statement_list : interactive_statement_list interactive_statement",
    "interactive_statement : declaration_statement",
    "interactive_statement : interactive_valid_declaration_statement",
    "interactive_statement : labeled_statement",
    "valid_declaration_statement : block",
    "valid_declaration_statement : empty_statement",
    "valid_declaration_statement : expression_statement",
    "valid_declaration_statement : selection_statement",
    "valid_declaration_statement : iteration_statement",
    "valid_declaration_statement : jump_statement",
    "valid_declaration_statement : try_statement",
    "valid_declaration_statement : checked_statement",
    "valid_declaration_statement : unchecked_statement",
    "valid_declaration_statement : lock_statement",
    "valid_declaration_statement : using_statement",
    "valid_declaration_statement : unsafe_statement",
    "valid_declaration_statement : fixed_statement",
    "interactive_valid_declaration_statement : block",
    "interactive_valid_declaration_statement : empty_statement",
    "interactive_valid_declaration_statement : interactive_expression_statement",
    "interactive_valid_declaration_statement : selection_statement",
    "interactive_valid_declaration_statement : iteration_statement",
    "interactive_valid_declaration_statement : jump_statement",
    "interactive_valid_declaration_statement : try_statement",
    "interactive_valid_declaration_statement : checked_statement",
    "interactive_valid_declaration_statement : unchecked_statement",
    "interactive_valid_declaration_statement : lock_statement",
    "interactive_valid_declaration_statement : using_statement",
    "interactive_valid_declaration_statement : unsafe_statement",
    "interactive_valid_declaration_statement : fixed_statement",
    "embedded_statement : valid_declaration_statement",
    "embedded_statement : declaration_statement",
    "embedded_statement : labeled_statement",
    "empty_statement : SEMICOLON",
    "$$65 :",
    "labeled_statement : IDENTIFIER COLON $$65 statement",
    "declaration_statement : local_variable_declaration SEMICOLON",
    "declaration_statement : local_constant_declaration SEMICOLON",
    "variable_type : primary_expression_no_array_creation opt_rank_specifier_or_nullable",
    "variable_type : builtin_types opt_rank_specifier_or_nullable",
    "variable_type : VOID opt_rank_specifier",
    "local_variable_pointer_type : primary_expression_no_array_creation STAR",
    "local_variable_pointer_type : builtin_types STAR",
    "local_variable_pointer_type : VOID STAR",
    "local_variable_pointer_type : local_variable_pointer_type STAR",
    "local_variable_type : variable_type",
    "local_variable_type : local_variable_pointer_type opt_rank_specifier",
    "local_variable_declaration : local_variable_type local_variable_declarators",
    "local_constant_declaration : CONST variable_type constant_declarators",
    "expression_statement : statement_expression SEMICOLON",
    "expression_statement : statement_expression COMPLETE_COMPLETION",
    "interactive_expression_statement : interactive_statement_expression SEMICOLON",
    "interactive_expression_statement : interactive_statement_expression COMPLETE_COMPLETION",
    "statement_expression : expression",
    "statement_expression : error",
    "interactive_statement_expression : expression",
    "interactive_statement_expression : error",
    "selection_statement : if_statement",
    "selection_statement : switch_statement",
    "if_statement : IF open_parens_any boolean_expression CLOSE_PARENS embedded_statement",
    "if_statement : IF open_parens_any boolean_expression CLOSE_PARENS embedded_statement ELSE embedded_statement",
    "$$66 :",
    "switch_statement : SWITCH open_parens_any $$66 expression CLOSE_PARENS switch_block",
    "switch_block : OPEN_BRACE opt_switch_sections CLOSE_BRACE",
    "opt_switch_sections :",
    "opt_switch_sections : switch_sections",
    "switch_sections : switch_section",
    "switch_sections : switch_sections switch_section",
    "$$67 :",
    "switch_section : switch_labels $$67 statement_list",
    "switch_labels : switch_label",
    "switch_labels : switch_labels switch_label",
    "switch_label : CASE constant_expression COLON",
    "switch_label : DEFAULT_COLON",
    "iteration_statement : while_statement",
    "iteration_statement : do_statement",
    "iteration_statement : for_statement",
    "iteration_statement : foreach_statement",
    "while_statement : WHILE open_parens_any boolean_expression CLOSE_PARENS embedded_statement",
    "do_statement : DO embedded_statement WHILE open_parens_any boolean_expression CLOSE_PARENS SEMICOLON",
    "$$68 :",
    "for_statement : FOR open_parens_any opt_for_initializer SEMICOLON $$68 opt_for_condition SEMICOLON opt_for_iterator CLOSE_PARENS embedded_statement",
    "opt_for_initializer :",
    "opt_for_initializer : for_initializer",
    "for_initializer : local_variable_declaration",
    "for_initializer : statement_expression_list",
    "opt_for_condition :",
    "opt_for_condition : boolean_expression",
    "opt_for_iterator :",
    "opt_for_iterator : for_iterator",
    "for_iterator : statement_expression_list",
    "statement_expression_list : statement_expression",
    "statement_expression_list : statement_expression_list COMMA statement_expression",
    "foreach_statement : FOREACH open_parens_any type IN expression CLOSE_PARENS",
    "$$69 :",
    "foreach_statement : FOREACH open_parens_any type IDENTIFIER IN expression CLOSE_PARENS $$69 embedded_statement",
    "jump_statement : break_statement",
    "jump_statement : continue_statement",
    "jump_statement : goto_statement",
    "jump_statement : return_statement",
    "jump_statement : throw_statement",
    "jump_statement : yield_statement",
    "break_statement : BREAK SEMICOLON",
    "continue_statement : CONTINUE SEMICOLON",
    "goto_statement : GOTO IDENTIFIER SEMICOLON",
    "goto_statement : GOTO CASE constant_expression SEMICOLON",
    "goto_statement : GOTO DEFAULT SEMICOLON",
    "return_statement : RETURN opt_expression SEMICOLON",
    "throw_statement : THROW opt_expression SEMICOLON",
    "yield_statement : IDENTIFIER RETURN expression SEMICOLON",
    "yield_statement : IDENTIFIER RETURN SEMICOLON",
    "yield_statement : IDENTIFIER BREAK SEMICOLON",
    "opt_expression :",
    "opt_expression : expression",
    "try_statement : TRY block catch_clauses",
    "try_statement : TRY block FINALLY block",
    "try_statement : TRY block catch_clauses FINALLY block",
    "try_statement : TRY block error",
    "catch_clauses : catch_clause",
    "catch_clauses : catch_clauses catch_clause",
    "opt_identifier :",
    "opt_identifier : IDENTIFIER",
    "$$70 :",
    "catch_clause : CATCH opt_catch_args $$70 block",
    "opt_catch_args :",
    "opt_catch_args : catch_args",
    "catch_args : open_parens_any type opt_identifier CLOSE_PARENS",
    "catch_args : open_parens_any CLOSE_PARENS",
    "checked_statement : CHECKED block",
    "unchecked_statement : UNCHECKED block",
    "$$71 :",
    "unsafe_statement : UNSAFE $$71 block",
    "$$72 :",
    "fixed_statement : FIXED open_parens_any type_and_void fixed_pointer_declarators CLOSE_PARENS $$72 embedded_statement",
    "fixed_pointer_declarators : fixed_pointer_declarator",
    "fixed_pointer_declarators : fixed_pointer_declarators COMMA fixed_pointer_declarator",
    "fixed_pointer_declarator : IDENTIFIER ASSIGN expression",
    "fixed_pointer_declarator : IDENTIFIER",
    "$$73 :",
    "lock_statement : LOCK open_parens_any expression CLOSE_PARENS $$73 embedded_statement",
    "$$74 :",
    "using_statement : USING open_parens_any local_variable_declaration CLOSE_PARENS $$74 embedded_statement",
    "$$75 :",
    "using_statement : USING open_parens_any expression CLOSE_PARENS $$75 embedded_statement",
    "query_expression : first_from_clause query_body",
    "query_expression : nested_from_clause query_body",
    "query_expression : first_from_clause COMPLETE_COMPLETION",
    "query_expression : nested_from_clause COMPLETE_COMPLETION",
    "first_from_clause : FROM_FIRST IDENTIFIER IN expression",
    "first_from_clause : FROM_FIRST type IDENTIFIER IN expression",
    "nested_from_clause : FROM IDENTIFIER IN expression",
    "nested_from_clause : FROM type IDENTIFIER IN expression",
    "$$76 :",
    "from_clause : FROM IDENTIFIER IN $$76 expression",
    "$$77 :",
    "from_clause : FROM type IDENTIFIER IN $$77 expression",
    "query_body : opt_query_body_clauses select_or_group_clause opt_query_continuation",
    "query_body : opt_query_body_clauses COMPLETE_COMPLETION",
    "$$78 :",
    "select_or_group_clause : SELECT $$78 expression",
    "$$79 :",
    "$$80 :",
    "select_or_group_clause : GROUP $$79 expression $$80 BY expression",
    "opt_query_body_clauses :",
    "opt_query_body_clauses : query_body_clauses",
    "query_body_clauses : query_body_clause",
    "query_body_clauses : query_body_clauses query_body_clause",
    "query_body_clause : from_clause",
    "query_body_clause : let_clause",
    "query_body_clause : where_clause",
    "query_body_clause : join_clause",
    "query_body_clause : orderby_clause",
    "$$81 :",
    "let_clause : LET IDENTIFIER ASSIGN $$81 expression",
    "$$82 :",
    "where_clause : WHERE $$82 boolean_expression",
    "$$83 :",
    "$$84 :",
    "$$85 :",
    "join_clause : JOIN IDENTIFIER IN $$83 expression ON $$84 expression EQUALS $$85 expression opt_join_into",
    "$$86 :",
    "$$87 :",
    "$$88 :",
    "join_clause : JOIN type IDENTIFIER IN $$86 expression ON $$87 expression EQUALS $$88 expression opt_join_into",
    "opt_join_into :",
    "opt_join_into : INTO IDENTIFIER",
    "$$89 :",
    "orderby_clause : ORDERBY $$89 orderings",
    "orderings : order_by",
    "$$90 :",
    "orderings : order_by COMMA $$90 orderings_then_by",
    "orderings_then_by : then_by",
    "$$91 :",
    "orderings_then_by : orderings_then_by COMMA $$91 then_by",
    "order_by : expression",
    "order_by : expression ASCENDING",
    "order_by : expression DESCENDING",
    "then_by : expression",
    "then_by : expression ASCENDING",
    "then_by : expression DESCENDING",
    "opt_query_continuation :",
    "$$92 :",
    "opt_query_continuation : INTO IDENTIFIER $$92 query_body",
    "interactive_parsing : EVAL_STATEMENT_PARSER EOF",
    "interactive_parsing : EVAL_USING_DECLARATIONS_UNIT_PARSER using_directives",
    "$$93 :",
    "interactive_parsing : EVAL_STATEMENT_PARSER $$93 interactive_statement_list opt_COMPLETE_COMPLETION",
    "$$94 :",
    "interactive_parsing : EVAL_COMPILATION_UNIT_PARSER $$94 interactive_compilation_unit",
    "interactive_compilation_unit : outer_declarations",
    "interactive_compilation_unit : outer_declarations global_attributes",
    "interactive_compilation_unit : global_attributes",
    "interactive_compilation_unit :",
    "opt_COMPLETE_COMPLETION :",
    "opt_COMPLETE_COMPLETION : COMPLETE_COMPLETION",
    "close_brace_or_complete_completion : CLOSE_BRACE",
    "close_brace_or_complete_completion : COMPLETE_COMPLETION",
  };
 public static string getRule (int index) {
    return yyRule [index];
 }
}
  protected static  string [] yyNames = {    
    "end-of-file",null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,"EOF","NONE","ERROR",
    "FIRST_KEYWORD","ABSTRACT","AS","ADD","BASE","BOOL","BREAK","BYTE",
    "CASE","CATCH","CHAR","CHECKED","CLASS","CONST","CONTINUE","DECIMAL",
    "DEFAULT","DELEGATE","DO","DOUBLE","ELSE","ENUM","EVENT","EXPLICIT",
    "EXTERN","FALSE","FINALLY","FIXED","FLOAT","FOR","FOREACH","GOTO",
    "IF","IMPLICIT","IN","INT","INTERFACE","INTERNAL","IS","LOCK","LONG",
    "NAMESPACE","NEW","NULL","OBJECT","OPERATOR","OUT","OVERRIDE",
    "PARAMS","PRIVATE","PROTECTED","PUBLIC","READONLY","REF","RETURN",
    "REMOVE","SBYTE","SEALED","SHORT","SIZEOF","STACKALLOC","STATIC",
    "STRING","STRUCT","SWITCH","THIS","THROW","TRUE","TRY","TYPEOF",
    "UINT","ULONG","UNCHECKED","UNSAFE","USHORT","USING","VIRTUAL","VOID",
    "VOLATILE","WHERE","WHILE","ARGLIST","PARTIAL","ARROW","FROM",
    "FROM_FIRST","JOIN","ON","EQUALS","SELECT","GROUP","BY","LET",
    "ORDERBY","ASCENDING","DESCENDING","INTO","INTERR_NULLABLE",
    "EXTERN_ALIAS","OP_GENERICS_LT","OP_GENERICS_LT_DECL",
    "OP_GENERICS_GT","GET","SET","LAST_KEYWORD","OPEN_BRACE",
    "CLOSE_BRACE","OPEN_BRACKET","CLOSE_BRACKET","OPEN_PARENS",
    "CLOSE_PARENS","DOT","COMMA","COLON","SEMICOLON","TILDE","PLUS",
    "MINUS","BANG","ASSIGN","OP_LT","OP_GT","BITWISE_AND","BITWISE_OR",
    "STAR","PERCENT","DIV","CARRET","INTERR","DOUBLE_COLON","OP_INC",
    "OP_DEC","OP_SHIFT_LEFT","OP_SHIFT_RIGHT","OP_LE","OP_GE","OP_EQ",
    "OP_NE","OP_AND","OP_OR","OP_MULT_ASSIGN","OP_DIV_ASSIGN",
    "OP_MOD_ASSIGN","OP_ADD_ASSIGN","OP_SUB_ASSIGN",
    "OP_SHIFT_LEFT_ASSIGN","OP_SHIFT_RIGHT_ASSIGN","OP_AND_ASSIGN",
    "OP_XOR_ASSIGN","OP_OR_ASSIGN","OP_PTR","OP_COALESCING","LITERAL",
    "IDENTIFIER","OPEN_PARENS_LAMBDA","OPEN_PARENS_CAST",
    "GENERIC_DIMENSION","DEFAULT_COLON","EVAL_STATEMENT_PARSER",
    "EVAL_COMPILATION_UNIT_PARSER","EVAL_USING_DECLARATIONS_UNIT_PARSER",
    "GENERATE_COMPLETION","COMPLETE_COMPLETION","UMINUS",
  };

  /** index-checked interface to yyNames[].
      @param token single character or %token value.
      @return token name or [illegal] or [unknown].
    */
  public static string yyname (int token) {
    if ((token < 0) || (token > yyNames.Length)) return "[illegal]";
    string name;
    if ((name = yyNames[token]) != null) return name;
    return "[unknown]";
  }

  int yyExpectingState;
  /** computes list of expected tokens on error by tracing the tables.
      @param state for which to compute the list.
      @return list of token names.
    */
  protected int [] yyExpectingTokens (int state){
    int token, n, len = 0;
    bool[] ok = new bool[yyNames.Length];
    if ((n = yySindex[state]) != 0)
      for (token = n < 0 ? -n : 0;
           (token < yyNames.Length) && (n+token < yyTable.Length); ++ token)
        if (yyCheck[n+token] == token && !ok[token] && yyNames[token] != null) {
          ++ len;
          ok[token] = true;
        }
    if ((n = yyRindex[state]) != 0)
      for (token = n < 0 ? -n : 0;
           (token < yyNames.Length) && (n+token < yyTable.Length); ++ token)
        if (yyCheck[n+token] == token && !ok[token] && yyNames[token] != null) {
          ++ len;
          ok[token] = true;
        }
    int [] result = new int [len];
    for (n = token = 0; n < len;  ++ token)
      if (ok[token]) result[n++] = token;
    return result;
  }
  protected string[] yyExpecting (int state) {
    int [] tokens = yyExpectingTokens (state);
    string [] result = new string[tokens.Length];
    for (int n = 0; n < tokens.Length;  n++)
      result[n++] = yyNames[tokens [n]];
    return result;
  }

  /** the generated parser, with debugging messages.
      Maintains a state and a value stack, currently with fixed maximum size.
      @param yyLex scanner.
      @param yydebug debug message writer implementing yyDebug, or null.
      @return result of the last reduction, if any.
      @throws yyException on irrecoverable parse error.
    */
  internal Object yyparse (yyParser.yyInput yyLex, Object yyd)
				 {
    this.debug = (yydebug.yyDebug)yyd;
    return yyparse(yyLex);
  }

  /** initial size and increment of the state/value stack [default 256].
      This is not final so that it can be overwritten outside of invocations
      of yyparse().
    */
  protected int yyMax;

  /** executed at the beginning of a reduce action.
      Used as $$ = yyDefault($1), prior to the user-specified action, if any.
      Can be overwritten to provide deep copy, etc.
      @param first value for $1, or null.
      @return first.
    */
  protected Object yyDefault (Object first) {
    return first;
  }

	static int[] global_yyStates;
	static object[] global_yyVals;
	protected bool use_global_stacks;

  /** the generated parser.
      Maintains a state and a value stack, currently with fixed maximum size.
      @param yyLex scanner.
      @return result of the last reduction, if any.
      @throws yyException on irrecoverable parse error.
    */
  internal Object yyparse (yyParser.yyInput yyLex)
  {
    if (yyMax <= 0) yyMax = 256;		// initial size
    int yyState = 0;                   // state stack ptr
    int [] yyStates;               	// state stack 
    Object yyVal = null;                // value stack ptr
    Object [] yyVals;					// value stack
    int yyToken = -1;					// current input
    int yyErrorFlag = 0;				// #tks to shift
	if (use_global_stacks && global_yyStates != null) {
		yyVals = global_yyVals;
		yyStates = global_yyStates;
   } else {
		yyVals = new object [yyMax];
		yyStates = new int [yyMax];
		if (use_global_stacks) {
			global_yyVals = yyVals;
			global_yyStates = yyStates;
		}
	}

    /*yyLoop:*/ for (int yyTop = 0;; ++ yyTop) {
      if (yyTop >= yyStates.Length) {			// dynamically increase
        global::System.Array.Resize (ref yyStates, yyStates.Length+yyMax);
        global::System.Array.Resize (ref yyVals, yyVals.Length+yyMax);
      }
      yyStates[yyTop] = yyState;
      yyVals[yyTop] = yyVal;
      if (debug != null) debug.push(yyState, yyVal);

      /*yyDiscarded:*/ for (;;) {	// discarding a token does not change stack
        int yyN;
        if ((yyN = yyDefRed[yyState]) == 0) {	// else [default] reduce (yyN)
          if (yyToken < 0) {
            yyToken = yyLex.advance() ? yyLex.token() : 0;
            if (debug != null)
              debug.lex(yyState, yyToken, yyname(yyToken), yyLex.value());
          }
          if ((yyN = yySindex[yyState]) != 0 && ((yyN += yyToken) >= 0)
              && (yyN < yyTable.Length) && (yyCheck[yyN] == yyToken)) {
            if (debug != null)
              debug.shift(yyState, yyTable[yyN], yyErrorFlag-1);
            yyState = yyTable[yyN];		// shift to yyN
            yyVal = yyLex.value();
            yyToken = -1;
            if (yyErrorFlag > 0) -- yyErrorFlag;
            goto continue_yyLoop;
          }
          if ((yyN = yyRindex[yyState]) != 0 && (yyN += yyToken) >= 0
              && yyN < yyTable.Length && yyCheck[yyN] == yyToken)
            yyN = yyTable[yyN];			// reduce (yyN)
          else
            switch (yyErrorFlag) {
  
            case 0:
              yyExpectingState = yyState;
              // yyerror(String.Format ("syntax error, got token `{0}'", yyname (yyToken)), yyExpecting(yyState));
              if (debug != null) debug.error("syntax error");
              if (yyToken == 0 /*eof*/ || yyToken == eof_token) throw new yyParser.yyUnexpectedEof ();
              goto case 1;
            case 1: case 2:
              yyErrorFlag = 3;
              do {
                if ((yyN = yySindex[yyStates[yyTop]]) != 0
                    && (yyN += Token.yyErrorCode) >= 0 && yyN < yyTable.Length
                    && yyCheck[yyN] == Token.yyErrorCode) {
                  if (debug != null)
                    debug.shift(yyStates[yyTop], yyTable[yyN], 3);
                  yyState = yyTable[yyN];
                  yyVal = yyLex.value();
                  goto continue_yyLoop;
                }
                if (debug != null) debug.pop(yyStates[yyTop]);
              } while (-- yyTop >= 0);
              if (debug != null) debug.reject();
              throw new yyParser.yyException("irrecoverable syntax error");
  
            case 3:
              if (yyToken == 0) {
                if (debug != null) debug.reject();
                throw new yyParser.yyException("irrecoverable syntax error at end-of-file");
              }
              if (debug != null)
                debug.discard(yyState, yyToken, yyname(yyToken),
  							yyLex.value());
              yyToken = -1;
              goto continue_yyDiscarded;		// leave stack alone
            }
        }
        int yyV = yyTop + 1-yyLen[yyN];
        if (debug != null)
          debug.reduce(yyState, yyStates[yyV-1], yyN, YYRules.getRule (yyN), yyLen[yyN]);
        yyVal = yyDefault(yyV > yyTop ? null : yyVals[yyV]);
        switch (yyN) {
case 5:
#line 379 "cs-parser.jay"
  { Lexer.CompleteOnEOF = false; }
  break;
case 7:
#line 384 "cs-parser.jay"
  {
		Lexer.check_incorrect_doc_comment ();
	  }
  break;
case 8:
#line 388 "cs-parser.jay"
  {
		Lexer.check_incorrect_doc_comment ();
	  }
  break;
case 16:
#line 411 "cs-parser.jay"
  {
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		string s = lt.Value;
		if (s != "alias"){
			syntax_error (lt.Location, "`alias' expected");
		} else if (RootContext.Version == LanguageVersion.ISO_1) {
			Report.FeatureIsNotAvailable (lt.Location, "external alias");
		} else {
			lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop]; 
			current_namespace.AddUsingExternalAlias (lt.Value, lt.Location, Report);
		}
	  }
  break;
case 17:
#line 424 "cs-parser.jay"
  {
	  	syntax_error (GetLocation (yyVals[-1+yyTop]), "`alias' expected");   /* TODO: better*/
	  }
  break;
case 20:
#line 436 "cs-parser.jay"
  {
		if (RootContext.Documentation != null)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }
  break;
case 21:
#line 441 "cs-parser.jay"
  {
		if (RootContext.Documentation != null)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }
  break;
case 22:
#line 449 "cs-parser.jay"
  {
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		current_namespace.AddUsingAlias (lt.Value, (MemberName) yyVals[-1+yyTop], GetLocation (yyVals[-4+yyTop]));
	  }
  break;
case 23:
#line 453 "cs-parser.jay"
  {
		CheckIdentifierToken (yyToken, GetLocation (yyVals[0+yyTop]));
		yyVal = null;
	  }
  break;
case 24:
#line 461 "cs-parser.jay"
  {
		current_namespace.AddUsing ((MemberName) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 25:
#line 473 "cs-parser.jay"
  {
		MemberName name = (MemberName) yyVals[0+yyTop];

		if (yyVals[-2+yyTop] != null) {
			Report.Error(1671, name.Location, "A namespace declaration cannot have modifiers or attributes");
		}

		current_namespace = new NamespaceEntry (
			current_namespace, file, name.GetName ());
		current_class = current_namespace.SlaveDeclSpace;
		current_container = current_class.PartialContainer;
	  }
  break;
case 26:
#line 486 "cs-parser.jay"
  { 
		current_namespace = current_namespace.Parent;
		current_class = current_namespace.SlaveDeclSpace;
		current_container = current_class.PartialContainer;
	  }
  break;
case 27:
#line 495 "cs-parser.jay"
  {
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		yyVal = new MemberName (lt.Value, lt.Location);
	  }
  break;
case 28:
#line 500 "cs-parser.jay"
  {
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		yyVal = new MemberName ((MemberName) yyVals[-2+yyTop], lt.Value, lt.Location);		
	  }
  break;
case 29:
#line 505 "cs-parser.jay"
  {
		syntax_error (lexer.Location, "`.' expected");
		yyVal = new MemberName ("<invalid>", lexer.Location);
	  }
  break;
case 34:
#line 523 "cs-parser.jay"
  {
		MemberName name = (MemberName) yyVals[0+yyTop];

		if (name.TypeArguments != null)
			syntax_error (lexer.Location, "namespace name expected");

		yyVal = name;
	  }
  break;
case 35:
#line 535 "cs-parser.jay"
  {
		if (RootContext.Documentation != null)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }
  break;
case 38:
#line 548 "cs-parser.jay"
  {
		Report.Error (1518, lexer.Location, "Expected `class', `delegate', `enum', `interface', or `struct'");
	  }
  break;
case 40:
#line 556 "cs-parser.jay"
  {
		Report.Error (1513, lexer.Location, "Expected `}'");
	  }
  break;
case 49:
#line 583 "cs-parser.jay"
  {
		if (yyVals[0+yyTop] != null) {
			DeclSpace ds = (DeclSpace)yyVals[0+yyTop];

			if ((ds.ModFlags & (Modifiers.PRIVATE|Modifiers.PROTECTED)) != 0){
				Report.Error (1527, ds.Location, 
				"Namespace elements cannot be explicitly declared as private, protected or protected internal");
			}
		}
		current_namespace.DeclarationFound = true;
	  }
  break;
case 50:
#line 594 "cs-parser.jay"
  {
		current_namespace.DeclarationFound = true;
	  }
  break;
case 51:
#line 598 "cs-parser.jay"
  {
		Report.Error (116, ((MemberCore) yyVals[0+yyTop]).Location, "A namespace can only contain types and namespace declarations");
	  }
  break;
case 52:
#line 601 "cs-parser.jay"
  {
		Report.Error (116, ((MemberCore) yyVals[0+yyTop]).Location, "A namespace can only contain types and namespace declarations");
	  }
  break;
case 58:
#line 627 "cs-parser.jay"
  {
		if (yyVals[0+yyTop] != null) {
			Attributes attrs = (Attributes)yyVals[0+yyTop];
			if (global_attrs_enabled) {
				CodeGen.Assembly.AddAttributes (attrs.Attrs, current_namespace);
			} else {
				foreach (Attribute a in attrs.Attrs) {
					Report.Error (1730, a.Location, "Assembly and module attributes must precede all other elements except using clauses and extern alias declarations");
				}
			}
		}
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 59:
#line 644 "cs-parser.jay"
  {
		global_attrs_enabled = false;
		yyVal = null;
      }
  break;
case 60:
#line 649 "cs-parser.jay"
  { 
		global_attrs_enabled = false;
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 61:
#line 658 "cs-parser.jay"
  {
		if (current_attr_target != String.Empty) {
			var sect = (List<Attribute>) yyVals[0+yyTop];

			if (global_attrs_enabled) {
				if (current_attr_target == "module") {
					current_container.Module.Compiled.AddAttributes (sect);
					yyVal = null;
				} else if (current_attr_target != null && current_attr_target.Length > 0) {
					CodeGen.Assembly.AddAttributes (sect, current_namespace);
					yyVal = null;
				} else {
					yyVal = new Attributes (sect);
				}
				if (yyVal == null) {
					if (RootContext.Documentation != null) {
						Lexer.check_incorrect_doc_comment ();
						Lexer.doc_state =
							XmlCommentState.Allowed;
					}
				}
			} else {
				yyVal = new Attributes (sect);
			}		
		}
		else
			yyVal = null;
		current_attr_target = null;
	  }
  break;
case 62:
#line 688 "cs-parser.jay"
  {
		if (current_attr_target != String.Empty) {
			Attributes attrs = yyVals[-1+yyTop] as Attributes;
			var sect = (List<Attribute>) yyVals[0+yyTop];

			if (global_attrs_enabled) {
				if (current_attr_target == "module") {
					current_container.Module.Compiled.AddAttributes (sect);
					yyVal = null;
				} else if (current_attr_target == "assembly") {
					CodeGen.Assembly.AddAttributes (sect, current_namespace);
					yyVal = null;
				} else {
					if (attrs == null)
						attrs = new Attributes (sect);
					else
						attrs.AddAttributes (sect);			
				}
			} else {
				if (attrs == null)
					attrs = new Attributes (sect);
				else
					attrs.AddAttributes (sect);
			}		
			yyVal = attrs;
		}
		else
			yyVal = null;
		current_attr_target = null;
	  }
  break;
case 63:
#line 722 "cs-parser.jay"
  {
		yyVal = yyVals[-2+yyTop];
 	  }
  break;
case 64:
#line 726 "cs-parser.jay"
  {
		yyVal = yyVals[-2+yyTop];
	  }
  break;
case 65:
#line 733 "cs-parser.jay"
  {
		current_attr_target = (string)yyVals[-1+yyTop];
		yyVal = yyVals[-1+yyTop];
	  }
  break;
case 66:
#line 741 "cs-parser.jay"
  {
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		yyVal = CheckAttributeTarget (lt.Value, lt.Location);
	  }
  break;
case 67:
#line 745 "cs-parser.jay"
  { yyVal = "event"; }
  break;
case 68:
#line 746 "cs-parser.jay"
  { yyVal = "return"; }
  break;
case 69:
#line 748 "cs-parser.jay"
  {
		string name = GetTokenName (yyToken);
		yyVal = CheckAttributeTarget (name, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 70:
#line 756 "cs-parser.jay"
  {
		yyVal = new List<Attribute> (4) { (Attribute) yyVals[0+yyTop] };
	  }
  break;
case 71:
#line 760 "cs-parser.jay"
  {
		var attrs = (List<Attribute>) yyVals[-2+yyTop];
		attrs.Add ((Attribute) yyVals[0+yyTop]);

		yyVal = attrs;
	  }
  break;
case 72:
#line 770 "cs-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 73:
#line 774 "cs-parser.jay"
  {
		--lexer.parsing_block;
		MemberName mname = (MemberName) yyVals[-2+yyTop];
		if (mname.IsGeneric) {
			Report.Error (404, lexer.Location,
				      "'<' unexpected: attributes cannot be generic");
		}

		Arguments [] arguments = (Arguments []) yyVals[0+yyTop];
		ATypeNameExpression expr = mname.GetTypeExpression ();

		if (current_attr_target == String.Empty)
			yyVal = null;
		else if (global_attrs_enabled && (current_attr_target == "assembly" || current_attr_target == "module"))
			/* FIXME: supply "nameEscaped" parameter here.*/
			yyVal = new GlobalAttribute (current_namespace, current_attr_target,
						  expr, arguments, mname.Location, lexer.IsEscapedIdentifier (mname.Location));
		else
			yyVal = new Attribute (current_attr_target, expr, arguments, mname.Location, lexer.IsEscapedIdentifier (mname.Location));
	  }
  break;
case 74:
#line 797 "cs-parser.jay"
  { /* reserved attribute name or identifier: 17.4 */ }
  break;
case 75:
#line 801 "cs-parser.jay"
  { yyVal = null; }
  break;
case 76:
#line 803 "cs-parser.jay"
  {
		yyVal = yyVals[-1+yyTop];
	  }
  break;
case 77:
#line 810 "cs-parser.jay"
  { yyVal = null; }
  break;
case 78:
#line 812 "cs-parser.jay"
  {
	  	Arguments a = new Arguments (4);
		a.Add ((Argument) yyVals[0+yyTop]);
		yyVal = new Arguments [] { a, null };
	  }
  break;
case 79:
#line 818 "cs-parser.jay"
  {
	  	Arguments a = new Arguments (4);
		a.Add ((Argument) yyVals[0+yyTop]);  
		yyVal = new Arguments [] { null, a };
	  }
  break;
case 80:
#line 824 "cs-parser.jay"
  {
		Arguments[] o = (Arguments[]) yyVals[-2+yyTop];
		if (o [1] != null) {
			Report.Error (1016, ((Argument) yyVals[0+yyTop]).Expr.Location, "Named attribute arguments must appear after the positional arguments");
			o [0] = new Arguments (4);
		}
		
		Arguments args = ((Arguments) o [0]);
		if (args.Count > 0 && !(yyVals[0+yyTop] is NamedArgument) && args [args.Count - 1] is NamedArgument)
			Error_NamedArgumentExpected ((NamedArgument) args [args.Count - 1]);
		
		args.Add ((Argument) yyVals[0+yyTop]);
	  }
  break;
case 81:
#line 838 "cs-parser.jay"
  {
		Arguments[] o = (Arguments[]) yyVals[-2+yyTop];
		if (o [1] == null) {
			o [1] = new Arguments (4);
		}

		((Arguments) o [1]).Add ((Argument) yyVals[0+yyTop]);
	  }
  break;
case 82:
#line 850 "cs-parser.jay"
  {
	  	yyVal = new Argument ((Expression) yyVals[0+yyTop]);
	  }
  break;
case 84:
#line 858 "cs-parser.jay"
  {
	  	var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		yyVal = new NamedArgument (lt.Value, lt.Location, (Expression) yyVals[0+yyTop]);	  
	  }
  break;
case 85:
#line 866 "cs-parser.jay"
  {
		if (RootContext.Version <= LanguageVersion.V_3)
			Report.FeatureIsNotAvailable (GetLocation (yyVals[-3+yyTop]), "named argument");
			
		/* Avoid boxing in common case (no modifier)*/
		var arg_mod = yyVals[-1+yyTop] == null ? Argument.AType.None : (Argument.AType) yyVals[-1+yyTop];
			
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		yyVal = new NamedArgument (lt.Value, lt.Location, (Expression) yyVals[0+yyTop], arg_mod);
	  }
  break;
case 86:
#line 879 "cs-parser.jay"
  { yyVal = null; }
  break;
case 87:
#line 881 "cs-parser.jay"
  { 
		yyVal = Argument.AType.Ref;
	  }
  break;
case 88:
#line 885 "cs-parser.jay"
  { 
		yyVal = Argument.AType.Out;
	  }
  break;
case 104:
#line 917 "cs-parser.jay"
  {
		Report.Error (1519, lexer.Location, "Unexpected symbol `{0}' in class, struct, or interface member declaration",
			GetSymbolName (yyToken));
		yyVal = null;
		lexer.parsing_generic_declaration = false;
	  }
  break;
case 105:
#line 930 "cs-parser.jay"
  {
		lexer.ConstraintsParsing = true;
	  }
  break;
case 106:
#line 934 "cs-parser.jay"
  { 
		MemberName name = MakeName ((MemberName) yyVals[0+yyTop]);
		push_current_class (new Struct (current_namespace, current_class, name, (Modifiers) yyVals[-4+yyTop], (Attributes) yyVals[-5+yyTop]), yyVals[-3+yyTop]);
	  }
  break;
case 107:
#line 940 "cs-parser.jay"
  {
		lexer.ConstraintsParsing = false;

		current_class.SetParameterInfo ((List<Constraints>) yyVals[0+yyTop]);

		if (RootContext.Documentation != null)
			current_container.DocComment = Lexer.consume_doc_comment ();
	  }
  break;
case 108:
#line 949 "cs-parser.jay"
  {
		--lexer.parsing_declaration;	  
		if (RootContext.Documentation != null)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }
  break;
case 109:
#line 955 "cs-parser.jay"
  {
		yyVal = pop_current_class ();
	  }
  break;
case 110:
#line 958 "cs-parser.jay"
  {
		CheckIdentifierToken (yyToken, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 111:
#line 965 "cs-parser.jay"
  {
		if (RootContext.Documentation != null)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }
  break;
case 127:
#line 1007 "cs-parser.jay"
  {
		var modflags = (Modifiers) yyVals[-4+yyTop];
		foreach (VariableDeclaration constant in (List<object>) yyVals[-1+yyTop]){
			Location l = constant.Location;
			if ((modflags & Modifiers.STATIC) != 0) {
				Report.Error (504, l, "The constant `{0}' cannot be marked static", current_container.GetSignatureForError () + "." + (string) constant.identifier);
				continue;
			}

			Const c = new Const (
				current_class, (FullNamedExpression) yyVals[-2+yyTop], (string) constant.identifier, 
				constant.GetInitializer ((FullNamedExpression) yyVals[-2+yyTop]), modflags, 
				(Attributes) yyVals[-5+yyTop], l);

			if (RootContext.Documentation != null) {
				c.DocComment = Lexer.consume_doc_comment ();
				Lexer.doc_state = XmlCommentState.Allowed;
			}
			current_container.AddConstant (c);
		}
	  }
  break;
case 128:
#line 1032 "cs-parser.jay"
  {
  	  	variables_bucket.Clear ();
		if (yyVals[0+yyTop] != null)
			variables_bucket.Add (yyVals[0+yyTop]);
		yyVal = variables_bucket;
	  }
  break;
case 129:
#line 1039 "cs-parser.jay"
  {
		if (yyVals[0+yyTop] != null) {
			var constants = (List<object>) yyVals[-2+yyTop];
			constants.Add (yyVals[0+yyTop]);
		}
	  }
  break;
case 130:
#line 1049 "cs-parser.jay"
  {
	  	++lexer.parsing_block;
	  }
  break;
case 131:
#line 1053 "cs-parser.jay"
  {
	  	--lexer.parsing_block;
		yyVal = new VariableDeclaration ((Tokenizer.LocatedToken) yyVals[-3+yyTop], (Expression) yyVals[0+yyTop]);
	  }
  break;
case 132:
#line 1058 "cs-parser.jay"
  {
		/* A const field requires a value to be provided*/
		Report.Error (145, GetLocation (yyVals[0+yyTop]), "A const field requires a value to be provided");
		yyVal = null;
	  }
  break;
case 135:
#line 1076 "cs-parser.jay"
  { 
		FullNamedExpression type = (FullNamedExpression) yyVals[-2+yyTop];
		if (type == TypeManager.system_void_expr)
			Report.Error (670, GetLocation (yyVals[-2+yyTop]), "Fields cannot have void type");
		
		var mod = (Modifiers) yyVals[-3+yyTop];

		foreach (VariableMemberDeclaration var in (List<object>) yyVals[-1+yyTop]){
			Field field = new Field (current_class, type, mod, var.MemberName, (Attributes) yyVals[-4+yyTop]);

			field.Initializer = var.GetInitializer (type);

			if (RootContext.Documentation != null) {
				field.DocComment = Lexer.consume_doc_comment ();
				Lexer.doc_state = XmlCommentState.Allowed;
			}
			current_container.AddField (field);
			yyVal = field; /* FIXME: might be better if it points to the top item*/
		}
	  }
  break;
case 136:
#line 1102 "cs-parser.jay"
  { 
			FullNamedExpression type = (FullNamedExpression) yyVals[-2+yyTop];
			
			var mod = (Modifiers) yyVals[-4+yyTop];

			foreach (VariableDeclaration var in (List<VariableDeclaration>) yyVals[-1+yyTop]) {
				FixedField field = new FixedField (current_class, type, mod, var.identifier,
					var.GetInitializer (type), (Attributes) yyVals[-5+yyTop], var.Location);
					
				if (RootContext.Version < LanguageVersion.ISO_2)
					Report.FeatureIsNotAvailable (GetLocation (yyVals[-3+yyTop]), "fixed size buffers");

				if (RootContext.Documentation != null) {
					field.DocComment = Lexer.consume_doc_comment ();
					Lexer.doc_state = XmlCommentState.Allowed;
				}
				current_container.AddField (field);
				yyVal = field; /* FIXME: might be better if it points to the top item*/
			}
	  }
  break;
case 137:
#line 1127 "cs-parser.jay"
  {
		Report.Error (1641, GetLocation (yyVals[-1+yyTop]), "A fixed size buffer field must have the array size specifier after the field name");
	  }
  break;
case 138:
#line 1134 "cs-parser.jay"
  {
		var decl = new List<VariableDeclaration> (2);
		decl.Add ((VariableDeclaration)yyVals[0+yyTop]);
		yyVal = decl;
  	  }
  break;
case 139:
#line 1140 "cs-parser.jay"
  {
		var decls = (List<VariableDeclaration>) yyVals[-2+yyTop];
		decls.Add ((VariableDeclaration)yyVals[0+yyTop]);
		yyVal = yyVals[-2+yyTop];
	  }
  break;
case 140:
#line 1149 "cs-parser.jay"
  {
		yyVal = new VariableDeclaration ((Tokenizer.LocatedToken) yyVals[-3+yyTop], (Expression) yyVals[-1+yyTop]);
	  }
  break;
case 141:
#line 1153 "cs-parser.jay"
  {
		Report.Error (443, lexer.Location, "Value or constant expected");
		yyVal = new VariableDeclaration ((Tokenizer.LocatedToken) yyVals[-2+yyTop], null);
	  }
  break;
case 142:
#line 1162 "cs-parser.jay"
  {
		variables_bucket.Clear ();
		if (yyVals[0+yyTop] != null)
			variables_bucket.Add (yyVals[0+yyTop]);
		yyVal = variables_bucket;
	  }
  break;
case 143:
#line 1169 "cs-parser.jay"
  {
		var decls = (List<object>) yyVals[-2+yyTop];
		decls.Add (yyVals[0+yyTop]);
		yyVal = yyVals[-2+yyTop];
	  }
  break;
case 144:
#line 1178 "cs-parser.jay"
  {
		yyVal = new VariableDeclaration ((Tokenizer.LocatedToken) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
	  }
  break;
case 145:
#line 1182 "cs-parser.jay"
  {
		yyVal = new VariableDeclaration ((Tokenizer.LocatedToken) yyVals[0+yyTop], null);
	  }
  break;
case 146:
#line 1186 "cs-parser.jay"
  {
		yyVal = null;
	  }
  break;
case 149:
#line 1195 "cs-parser.jay"
  {
		yyVal = new StackAlloc ((Expression) yyVals[-3+yyTop], (Expression) yyVals[-1+yyTop], GetLocation (yyVals[-4+yyTop]));
	  }
  break;
case 150:
#line 1199 "cs-parser.jay"
  {
		yyVal = new ArglistAccess (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 151:
#line 1203 "cs-parser.jay"
  {
		Report.Error (1575, GetLocation (yyVals[-1+yyTop]), "A stackalloc expression requires [] after type");
		yyVal = new StackAlloc ((Expression) yyVals[0+yyTop], null, GetLocation (yyVals[-1+yyTop]));		
	  }
  break;
case 152:
#line 1211 "cs-parser.jay"
  {
		variables_bucket.Clear ();
		if (yyVals[0+yyTop] != null)
			variables_bucket.Add (yyVals[0+yyTop]);
		yyVal = variables_bucket;
	  }
  break;
case 153:
#line 1218 "cs-parser.jay"
  {
		var decls = (List<object>) yyVals[-2+yyTop];
		decls.Add (yyVals[0+yyTop]);
		yyVal = yyVals[-2+yyTop];
	  }
  break;
case 154:
#line 1227 "cs-parser.jay"
  {
	  	++lexer.parsing_block;
	  	lexer.parsing_generic_declaration = false;
	  }
  break;
case 155:
#line 1232 "cs-parser.jay"
  {
	  	--lexer.parsing_block;
		yyVal = new VariableMemberDeclaration ((MemberName) yyVals[-3+yyTop], (Expression) yyVals[0+yyTop]);
	  }
  break;
case 156:
#line 1237 "cs-parser.jay"
  {
	  	lexer.parsing_generic_declaration = false;
		yyVal = new VariableMemberDeclaration ((MemberName) yyVals[0+yyTop], null);
	  }
  break;
case 157:
#line 1242 "cs-parser.jay"
  {
		lexer.parsing_generic_declaration = false;	  
		yyVal = null;
	  }
  break;
case 158:
#line 1250 "cs-parser.jay"
  {
		Report.Error (650, GetLocation (yyVals[-2+yyTop]), "Syntax error, bad array declarator. To declare a managed array the rank specifier precedes the variable's identifier. " +
			"To declare a fixed size buffer field, use the fixed keyword before the field type");
	  }
  break;
case 161:
#line 1262 "cs-parser.jay"
  {
		if (RootContext.Documentation != null)
			Lexer.doc_state = XmlCommentState.NotAllowed;
	  }
  break;
case 162:
#line 1267 "cs-parser.jay"
  {
		Method method = (Method) yyVals[-2+yyTop];
		method.Block = (ToplevelBlock) yyVals[0+yyTop];
		current_container.AddMethod (method);
		
		if (current_container.Kind == MemberKind.Interface && method.Block != null) {
			Report.Error (531, method.Location, "`{0}': interface members cannot have a definition", method.GetSignatureForError ());
		}

		current_generic_method = null;
		current_local_parameters = null;

		if (RootContext.Documentation != null)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }
  break;
case 163:
#line 1289 "cs-parser.jay"
  {
		valid_param_mod = ParameterModifierType.All;
	  }
  break;
case 164:
#line 1293 "cs-parser.jay"
  {
		lexer.ConstraintsParsing = true;
	  }
  break;
case 165:
#line 1297 "cs-parser.jay"
  {
		lexer.ConstraintsParsing = false;
		valid_param_mod = 0;
		MemberName name = (MemberName) yyVals[-6+yyTop];
		current_local_parameters = (ParametersCompiled) yyVals[-3+yyTop];

		GenericMethod generic = null;
		if (name.TypeArguments != null) {
			generic = new GenericMethod (current_namespace, current_class, name,
						     (FullNamedExpression) yyVals[-7+yyTop], current_local_parameters);

			generic.SetParameterInfo ((List<Constraints>) yyVals[0+yyTop]);
		} else if (yyVals[0+yyTop] != null) {
			Report.Error (80, GetLocation (yyVals[0+yyTop]),
				"Constraints are not allowed on non-generic declarations");
		}

		Method method = new Method (current_class, generic, (FullNamedExpression) yyVals[-7+yyTop], (Modifiers) yyVals[-8+yyTop],
				     name, current_local_parameters, (Attributes) yyVals[-9+yyTop]);
				     
		if (yyVals[0+yyTop] != null && ((method.ModFlags & Modifiers.OVERRIDE) != 0 || method.IsExplicitImpl)) {
			Report.Error (460, method.Location,
				"`{0}': Cannot specify constraints for overrides and explicit interface implementation methods",
				method.GetSignatureForError ());
		}

		current_generic_method = generic;

		if (RootContext.Documentation != null)
			method.DocComment = Lexer.consume_doc_comment ();

		yyVal = method;
	  }
  break;
case 166:
#line 1335 "cs-parser.jay"
  {
	  	valid_param_mod = ParameterModifierType.All;
	  }
  break;
case 167:
#line 1339 "cs-parser.jay"
  {
		lexer.ConstraintsParsing = true;
	  }
  break;
case 168:
#line 1343 "cs-parser.jay"
  {
		lexer.ConstraintsParsing = false;
		valid_param_mod = 0;

		MemberName name = (MemberName) yyVals[-6+yyTop];
		current_local_parameters = (ParametersCompiled) yyVals[-3+yyTop];

		if (yyVals[-1+yyTop] != null && name.TypeArguments == null)
			Report.Error (80, lexer.Location,
				      "Constraints are not allowed on non-generic declarations");

		Method method;
		GenericMethod generic = null;
		if (name.TypeArguments != null) {
			generic = new GenericMethod (current_namespace, current_class, name,
						     TypeManager.system_void_expr, current_local_parameters);

			generic.SetParameterInfo ((List<Constraints>) yyVals[0+yyTop]);
		}

		var modifiers = (Modifiers) yyVals[-9+yyTop];


		const Modifiers invalid_partial_mod = Modifiers.AccessibilityMask | Modifiers.ABSTRACT | Modifiers.EXTERN |
			Modifiers.NEW | Modifiers.OVERRIDE | Modifiers.SEALED | Modifiers.VIRTUAL;

		if ((modifiers & invalid_partial_mod) != 0) {
			Report.Error (750, name.Location, "A partial method cannot define access modifier or " +
       			"any of abstract, extern, new, override, sealed, or virtual modifiers");
			modifiers &= ~invalid_partial_mod;
		}

		if ((current_class.ModFlags & Modifiers.PARTIAL) == 0) {
			Report.Error (751, name.Location, "A partial method must be declared within a " +
       			"partial class or partial struct");
		}
		
		modifiers |= Modifiers.PARTIAL | Modifiers.PRIVATE;
		
		method = new Method (current_class, generic, TypeManager.system_void_expr,
				     modifiers, name, current_local_parameters, (Attributes) yyVals[-10+yyTop]);

		current_generic_method = generic;

		if (RootContext.Documentation != null)
			method.DocComment = Lexer.consume_doc_comment ();

		yyVal = method;
	  }
  break;
case 169:
#line 1396 "cs-parser.jay"
  {
		MemberName name = (MemberName) yyVals[-3+yyTop];
		Report.Error (1585, name.Location, 
			"Member modifier `{0}' must precede the member type and name", ModifiersExtensions.Name ((Modifiers) yyVals[-4+yyTop]));

		Method method = new Method (current_class, null, TypeManager.system_void_expr,
					    0, name, (ParametersCompiled) yyVals[-1+yyTop], (Attributes) yyVals[-7+yyTop]);

		current_local_parameters = (ParametersCompiled) yyVals[-1+yyTop];

		if (RootContext.Documentation != null)
			method.DocComment = Lexer.consume_doc_comment ();

		yyVal = method;
	  }
  break;
case 171:
#line 1415 "cs-parser.jay"
  { yyVal = null; }
  break;
case 172:
#line 1419 "cs-parser.jay"
  { yyVal = ParametersCompiled.EmptyReadOnlyParameters; }
  break;
case 174:
#line 1425 "cs-parser.jay"
  { 
		var pars_list = (List<Parameter>) yyVals[0+yyTop];
	  	yyVal = new ParametersCompiled (compiler, pars_list.ToArray ());
	  }
  break;
case 175:
#line 1430 "cs-parser.jay"
  {
		var pars_list = (List<Parameter>) yyVals[-2+yyTop];
		pars_list.Add ((Parameter) yyVals[0+yyTop]);

		yyVal = new ParametersCompiled (compiler, pars_list.ToArray ()); 
	  }
  break;
case 176:
#line 1437 "cs-parser.jay"
  {
		var pars_list = (List<Parameter>) yyVals[-2+yyTop];
		pars_list.Add (new ArglistParameter (GetLocation (yyVals[0+yyTop])));
		yyVal = new ParametersCompiled (compiler, pars_list.ToArray (), true);
	  }
  break;
case 177:
#line 1443 "cs-parser.jay"
  {
		if (yyVals[-2+yyTop] != null)
			Report.Error (231, ((Parameter) yyVals[-2+yyTop]).Location, "A params parameter must be the last parameter in a formal parameter list");

		yyVal = new ParametersCompiled (compiler, new Parameter[] { (Parameter) yyVals[-2+yyTop] } );			
	  }
  break;
case 178:
#line 1450 "cs-parser.jay"
  {
		if (yyVals[-2+yyTop] != null)
			Report.Error (231, ((Parameter) yyVals[-2+yyTop]).Location, "A params parameter must be the last parameter in a formal parameter list");

		var pars_list = (List<Parameter>) yyVals[-4+yyTop];
		pars_list.Add (new ArglistParameter (GetLocation (yyVals[-2+yyTop])));

		yyVal = new ParametersCompiled (compiler, pars_list.ToArray (), true);
	  }
  break;
case 179:
#line 1460 "cs-parser.jay"
  {
		Report.Error (257, GetLocation (yyVals[-2+yyTop]), "An __arglist parameter must be the last parameter in a formal parameter list");

		yyVal = new ParametersCompiled (compiler, new Parameter [] { new ArglistParameter (GetLocation (yyVals[-2+yyTop])) }, true);
	  }
  break;
case 180:
#line 1466 "cs-parser.jay"
  {
		Report.Error (257, GetLocation (yyVals[-2+yyTop]), "An __arglist parameter must be the last parameter in a formal parameter list");

		var pars_list = (List<Parameter>) yyVals[-4+yyTop];
		pars_list.Add (new ArglistParameter (GetLocation (yyVals[-2+yyTop])));

		yyVal = new ParametersCompiled (compiler, pars_list.ToArray (), true);
	  }
  break;
case 181:
#line 1475 "cs-parser.jay"
  {
		yyVal = new ParametersCompiled (compiler, new Parameter[] { (Parameter) yyVals[0+yyTop] } );
	  }
  break;
case 182:
#line 1479 "cs-parser.jay"
  {
		yyVal = new ParametersCompiled (compiler, new Parameter [] { new ArglistParameter (GetLocation (yyVals[0+yyTop])) }, true);
	  }
  break;
case 183:
#line 1486 "cs-parser.jay"
  {
		parameters_bucket.Clear ();
		Parameter p = (Parameter) yyVals[0+yyTop];
		parameters_bucket.Add (p);
		
		default_parameter_used = p.HasDefaultValue;
		yyVal = parameters_bucket;
	  }
  break;
case 184:
#line 1495 "cs-parser.jay"
  {
		var pars = (List<Parameter>) yyVals[-2+yyTop];
		Parameter p = (Parameter) yyVals[0+yyTop];
		if (p != null) {
			if (p.HasExtensionMethodModifier)
				Report.Error (1100, p.Location, "The parameter modifier `this' can only be used on the first parameter");
			else if (!p.HasDefaultValue && default_parameter_used)
				Report.Error (1737, p.Location, "Optional parameter cannot precede required parameters");

			default_parameter_used |= p.HasDefaultValue;
			pars.Add (p);
		}
		yyVal = yyVals[-2+yyTop];
	  }
  break;
case 185:
#line 1516 "cs-parser.jay"
  {
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		yyVal = new Parameter ((FullNamedExpression) yyVals[-1+yyTop], lt.Value, (Parameter.Modifier) yyVals[-2+yyTop], (Attributes) yyVals[-3+yyTop], lt.Location);
	  }
  break;
case 186:
#line 1524 "cs-parser.jay"
  {
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		Report.Error (1552, lt.Location, "Array type specifier, [], must appear before parameter name");
		yyVal = new Parameter ((FullNamedExpression) yyVals[-3+yyTop], lt.Value, (Parameter.Modifier) yyVals[-4+yyTop], (Attributes) yyVals[-5+yyTop], lt.Location);
	  }
  break;
case 187:
#line 1533 "cs-parser.jay"
  {
	  	Location l = GetLocation (yyVals[0+yyTop]);
		CheckIdentifierToken (yyToken, l);
		yyVal = new Parameter ((FullNamedExpression) yyVals[-1+yyTop], "NeedSomeGeneratorHere", (Parameter.Modifier) yyVals[-2+yyTop], (Attributes) yyVals[-3+yyTop], l);
	  }
  break;
case 188:
#line 1544 "cs-parser.jay"
  {
		if (RootContext.Version <= LanguageVersion.V_3) {
			Report.FeatureIsNotAvailable (GetLocation (yyVals[-1+yyTop]), "optional parameter");
		}
		
		Parameter.Modifier mod = (Parameter.Modifier) yyVals[-4+yyTop];
		if (mod != Parameter.Modifier.NONE) {
			switch (mod) {
			case Parameter.Modifier.REF:
			case Parameter.Modifier.OUT:
				Report.Error (1741, GetLocation (yyVals[-4+yyTop]), "Cannot specify a default value for the `{0}' parameter",
					Parameter.GetModifierSignature (mod));
				break;
				
			case Parameter.Modifier.This:
				Report.Error (1743, GetLocation (yyVals[-4+yyTop]), "Cannot specify a default value for the `{0}' parameter",
					Parameter.GetModifierSignature (mod));
				break;
			default:
				throw new NotImplementedException (mod.ToString ());
			}
				
			mod = Parameter.Modifier.NONE;
		}
		
		if ((valid_param_mod & ParameterModifierType.DefaultValue) == 0)
			Report.Error (1065, GetLocation (yyVals[0+yyTop]), "Optional parameter is not valid in this context");
		
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		yyVal = new Parameter ((FullNamedExpression) yyVals[-3+yyTop], lt.Value, mod, (Attributes) yyVals[-5+yyTop], lt.Location);
		if (yyVals[0+yyTop] != null)
			((Parameter) yyVal).DefaultValue = (Expression) yyVals[0+yyTop];
	  }
  break;
case 189:
#line 1580 "cs-parser.jay"
  { yyVal = Parameter.Modifier.NONE; }
  break;
case 191:
#line 1586 "cs-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 192:
#line 1590 "cs-parser.jay"
  {
		Parameter.Modifier p2 = (Parameter.Modifier)yyVals[0+yyTop];
  		Parameter.Modifier mod = (Parameter.Modifier)yyVals[-1+yyTop] | p2;
  		if (((Parameter.Modifier)yyVals[-1+yyTop] & p2) == p2) {
  			Error_DuplicateParameterModifier (lexer.Location, p2);
  		} else {
	  		switch (mod & ~Parameter.Modifier.This) {
  				case Parameter.Modifier.REF:
					Report.Error (1101, lexer.Location, "The parameter modifiers `this' and `ref' cannot be used altogether");
  					break;
   				case Parameter.Modifier.OUT:
					Report.Error (1102, lexer.Location, "The parameter modifiers `this' and `out' cannot be used altogether");
  					break;
  				default:
 					Report.Error (1108, lexer.Location, "A parameter cannot have specified more than one modifier");
 					break;
 			}
  		}
  		yyVal = mod;
	  }
  break;
case 193:
#line 1614 "cs-parser.jay"
  {
	  	if ((valid_param_mod & ParameterModifierType.Ref) == 0)
	  		Error_ParameterModifierNotValid ("ref", GetLocation (yyVals[0+yyTop]));
	  		
	  	yyVal = Parameter.Modifier.REF;
	  }
  break;
case 194:
#line 1621 "cs-parser.jay"
  {
	  	if ((valid_param_mod & ParameterModifierType.Out) == 0)
	  		Error_ParameterModifierNotValid ("out", GetLocation (yyVals[0+yyTop]));
	  
	  	yyVal = Parameter.Modifier.OUT;
	  }
  break;
case 195:
#line 1628 "cs-parser.jay"
  {
		if ((valid_param_mod & ParameterModifierType.This) == 0)
	  		Error_ParameterModifierNotValid ("this", GetLocation (yyVals[0+yyTop]));

	  	if (RootContext.Version <= LanguageVersion.ISO_2)
	  		Report.FeatureIsNotAvailable (GetLocation (yyVals[0+yyTop]), "extension methods");
	  			
		yyVal = Parameter.Modifier.This;
	  }
  break;
case 196:
#line 1641 "cs-parser.jay"
  {
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		yyVal = new ParamsParameter ((FullNamedExpression) yyVals[-1+yyTop], lt.Value, (Attributes) yyVals[-3+yyTop], lt.Location);
	  }
  break;
case 197:
#line 1646 "cs-parser.jay"
  {
		Report.Error (1751, GetLocation (yyVals[-4+yyTop]), "Cannot specify a default value for a parameter array");
		
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		yyVal = new ParamsParameter ((FullNamedExpression) yyVals[-3+yyTop], lt.Value, (Attributes) yyVals[-5+yyTop], lt.Location);		
	  }
  break;
case 198:
#line 1652 "cs-parser.jay"
  {
		CheckIdentifierToken (yyToken, GetLocation (yyVals[0+yyTop]));
		yyVal = null;
	  }
  break;
case 199:
#line 1660 "cs-parser.jay"
  {
		if ((valid_param_mod & ParameterModifierType.Params) == 0)
			Report.Error (1670, (GetLocation (yyVals[0+yyTop])), "The `params' modifier is not allowed in current context");
	  }
  break;
case 200:
#line 1665 "cs-parser.jay"
  {
		Parameter.Modifier mod = (Parameter.Modifier)yyVals[0+yyTop];
		if ((mod & Parameter.Modifier.This) != 0) {
			Report.Error (1104, GetLocation (yyVals[-1+yyTop]), "The parameter modifiers `this' and `params' cannot be used altogether");
		} else {
			Report.Error (1611, GetLocation (yyVals[-1+yyTop]), "The params parameter cannot be declared as ref or out");
		}	  
	  }
  break;
case 201:
#line 1674 "cs-parser.jay"
  {
		Error_DuplicateParameterModifier (GetLocation (yyVals[-1+yyTop]), Parameter.Modifier.PARAMS);
	  }
  break;
case 202:
#line 1681 "cs-parser.jay"
  {
	  	if ((valid_param_mod & ParameterModifierType.Arglist) == 0)
	  		Report.Error (1669, GetLocation (yyVals[0+yyTop]), "__arglist is not valid in this context");
	  }
  break;
case 203:
#line 1692 "cs-parser.jay"
  {
		if (RootContext.Documentation != null)
			tmpComment = Lexer.consume_doc_comment ();
	  }
  break;
case 204:
#line 1697 "cs-parser.jay"
  {
		implicit_value_parameter_type = (FullNamedExpression) yyVals[-3+yyTop];
		lexer.PropertyParsing = true;
	  }
  break;
case 205:
#line 1702 "cs-parser.jay"
  {
		lexer.PropertyParsing = false;
		has_get = has_set = false;
	  }
  break;
case 206:
#line 1707 "cs-parser.jay"
  { 
		Property prop;
		Accessors accessors = (Accessors) yyVals[-2+yyTop];
		Accessor get_block = accessors != null ? accessors.get_or_add : null;
		Accessor set_block = accessors != null ? accessors.set_or_remove : null;
		bool order = accessors != null ? accessors.declared_in_reverse : false;

		MemberName name = (MemberName) yyVals[-6+yyTop];
		FullNamedExpression ptype = (FullNamedExpression) yyVals[-7+yyTop];

		prop = new Property (current_class, ptype, (Modifiers) yyVals[-8+yyTop],
				     name, (Attributes) yyVals[-9+yyTop], get_block, set_block, order, current_block);

		if (ptype == TypeManager.system_void_expr)
			Report.Error (547, name.Location, "`{0}': property or indexer cannot have void type", prop.GetSignatureForError ());
			
		if (accessors == null)
			Report.Error (548, prop.Location, "`{0}': property or indexer must have at least one accessor", prop.GetSignatureForError ());

		if (current_container.Kind == MemberKind.Interface) {
			if (prop.Get.Block != null)
				Report.Error (531, prop.Location, "`{0}.get': interface members cannot have a definition", prop.GetSignatureForError ());

			if (prop.Set.Block != null)
				Report.Error (531, prop.Location, "`{0}.set': interface members cannot have a definition", prop.GetSignatureForError ());
		}

		current_container.AddProperty (prop);
		implicit_value_parameter_type = null;

		if (RootContext.Documentation != null)
			prop.DocComment = ConsumeStoredComment ();

	  }
  break;
case 207:
#line 1745 "cs-parser.jay"
  {
		yyVal = new Accessors ((Accessor) yyVals[0+yyTop], null);
	 }
  break;
case 208:
#line 1749 "cs-parser.jay"
  { 
		Accessors accessors = (Accessors) yyVals[0+yyTop];
		accessors.get_or_add = (Accessor) yyVals[-1+yyTop];
		yyVal = accessors;
	 }
  break;
case 209:
#line 1755 "cs-parser.jay"
  {
		yyVal = new Accessors (null, (Accessor) yyVals[0+yyTop]);
	 }
  break;
case 210:
#line 1759 "cs-parser.jay"
  { 
		Accessors accessors = (Accessors) yyVals[0+yyTop];
		accessors.set_or_remove = (Accessor) yyVals[-1+yyTop];
		accessors.declared_in_reverse = true;
		yyVal = accessors;
	 }
  break;
case 211:
#line 1766 "cs-parser.jay"
  {
	  	if (yyToken == Token.CLOSE_BRACE) {
	  		yyVal = null;
		} else {
			if (yyToken == Token.SEMICOLON)
				Report.Error (1597, lexer.Location, "Semicolon after method or accessor block is not valid");
			else
				Report.Error (1014, GetLocation (yyVals[0+yyTop]), "A get or set accessor expected");

			yyVal = new Accessors (null, null);
		}
	  }
  break;
case 212:
#line 1782 "cs-parser.jay"
  {
		/* If this is not the case, then current_local_parameters has already*/
		/* been set in indexer_declaration*/
		if (parsing_indexer == false)
			current_local_parameters = ParametersCompiled.EmptyReadOnlyParameters;
		else 
			current_local_parameters = indexer_parameters;
		lexer.PropertyParsing = false;
	  }
  break;
case 213:
#line 1792 "cs-parser.jay"
  {
		if (has_get) {
			Report.Error (1007, GetLocation (yyVals[-2+yyTop]), "Property accessor already defined");
			break;
		}
		Accessor accessor = new Accessor ((ToplevelBlock) yyVals[0+yyTop], (Modifiers) yyVals[-3+yyTop], (Attributes) yyVals[-4+yyTop], current_local_parameters, GetLocation (yyVals[-2+yyTop]));
		has_get = true;
		current_local_parameters = null;
		lexer.PropertyParsing = true;

		if (RootContext.Documentation != null)
			if (Lexer.doc_state == XmlCommentState.Error)
				Lexer.doc_state = XmlCommentState.NotAllowed;

		yyVal = accessor;
	  }
  break;
case 214:
#line 1812 "cs-parser.jay"
  {
		Parameter implicit_value_parameter = new Parameter (
			implicit_value_parameter_type, "value", 
			Parameter.Modifier.NONE, null, GetLocation (yyVals[0+yyTop]));

		if (!parsing_indexer) {
			current_local_parameters = new ParametersCompiled (compiler, new Parameter [] { implicit_value_parameter });
		} else {
			current_local_parameters = ParametersCompiled.MergeGenerated (compiler,
				indexer_parameters, true, implicit_value_parameter, null);
		}
		
		lexer.PropertyParsing = false;
	  }
  break;
case 215:
#line 1827 "cs-parser.jay"
  {
		if (has_set) {
			Report.Error (1007, GetLocation (yyVals[-2+yyTop]), "Property accessor already defined");
			break;
		}
		Accessor accessor = new Accessor ((ToplevelBlock) yyVals[0+yyTop], (Modifiers) yyVals[-3+yyTop], (Attributes) yyVals[-4+yyTop], current_local_parameters, GetLocation (yyVals[-2+yyTop]));
		has_set = true;
		current_local_parameters = null;
		lexer.PropertyParsing = true;

		if (RootContext.Documentation != null
			&& Lexer.doc_state == XmlCommentState.Error)
			Lexer.doc_state = XmlCommentState.NotAllowed;

		yyVal = accessor;
	  }
  break;
case 217:
#line 1848 "cs-parser.jay"
  {
	  	yyVal = null;
	  }
  break;
case 218:
#line 1852 "cs-parser.jay"
  {
	  	Error_SyntaxError (1043, yyToken, "Invalid accessor body");
	  	yyVal = null;
	  }
  break;
case 219:
#line 1863 "cs-parser.jay"
  {
		lexer.ConstraintsParsing = true;
	  }
  break;
case 220:
#line 1867 "cs-parser.jay"
  {
		MemberName name = MakeName ((MemberName) yyVals[0+yyTop]);
		push_current_class (new Interface (current_namespace, current_class, name, (Modifiers) yyVals[-4+yyTop], (Attributes) yyVals[-5+yyTop]), yyVals[-3+yyTop]);
	  }
  break;
case 221:
#line 1873 "cs-parser.jay"
  {
		lexer.ConstraintsParsing = false;

		current_class.SetParameterInfo ((List<Constraints>) yyVals[0+yyTop]);

		if (RootContext.Documentation != null) {
			current_container.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
	  }
  break;
case 222:
#line 1884 "cs-parser.jay"
  {
		--lexer.parsing_declaration;	  
		if (RootContext.Documentation != null)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }
  break;
case 223:
#line 1890 "cs-parser.jay"
  {
		yyVal = pop_current_class ();
	  }
  break;
case 224:
#line 1893 "cs-parser.jay"
  {
		CheckIdentifierToken (yyToken, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 230:
#line 1916 "cs-parser.jay"
  {
		Report.Error (525, GetLocation (yyVals[0+yyTop]), "Interfaces cannot contain fields or constants");
	  }
  break;
case 231:
#line 1920 "cs-parser.jay"
  {
		Report.Error (525, GetLocation (yyVals[0+yyTop]), "Interfaces cannot contain fields or constants");
	  }
  break;
case 236:
#line 1928 "cs-parser.jay"
  {
	  	Report.Error (567, GetLocation (yyVals[0+yyTop]), "Interfaces cannot contain operators");
	  }
  break;
case 237:
#line 1932 "cs-parser.jay"
  {
	  	Report.Error (526, GetLocation (yyVals[0+yyTop]), "Interfaces cannot contain contructors");
	  }
  break;
case 238:
#line 1936 "cs-parser.jay"
  {
	  	Report.Error (524, GetLocation (yyVals[0+yyTop]), "Interfaces cannot declare classes, structs, interfaces, delegates, or enumerations");
	  }
  break;
case 239:
#line 1943 "cs-parser.jay"
  {
	  }
  break;
case 240:
#line 1946 "cs-parser.jay"
  {
		if (yyVals[-2+yyTop] == null)
			break;

		OperatorDeclaration decl = (OperatorDeclaration) yyVals[-2+yyTop];
		Operator op = new Operator (
			current_class, decl.optype, decl.ret_type, (Modifiers) yyVals[-3+yyTop], 
			current_local_parameters,
			(ToplevelBlock) yyVals[0+yyTop], (Attributes) yyVals[-4+yyTop], decl.location);

		if (RootContext.Documentation != null) {
			op.DocComment = tmpComment;
			Lexer.doc_state = XmlCommentState.Allowed;
		}

		/* Note again, checking is done in semantic analysis*/
		current_container.AddOperator (op);

		current_local_parameters = null;
	  }
  break;
case 242:
#line 1970 "cs-parser.jay"
  { yyVal = null; }
  break;
case 244:
#line 1976 "cs-parser.jay"
  {
		Report.Error (590, GetLocation (yyVals[0+yyTop]), "User-defined operators cannot return void");
		yyVal = TypeManager.system_void_expr;		
	  }
  break;
case 245:
#line 1984 "cs-parser.jay"
  {
		valid_param_mod = ParameterModifierType.DefaultValue;
	  }
  break;
case 246:
#line 1988 "cs-parser.jay"
  {
		valid_param_mod = 0;

		Location loc = GetLocation (yyVals[-5+yyTop]);
		Operator.OpType op = (Operator.OpType) yyVals[-4+yyTop];
		current_local_parameters = (ParametersCompiled)yyVals[-1+yyTop];
		
		int p_count = current_local_parameters.Count;
		if (p_count == 1) {
			if (op == Operator.OpType.Addition)
				op = Operator.OpType.UnaryPlus;
			else if (op == Operator.OpType.Subtraction)
				op = Operator.OpType.UnaryNegation;
		}
		
		if (IsUnaryOperator (op)) {
			if (p_count == 2) {
				Report.Error (1020, loc, "Overloadable binary operator expected");
			} else if (p_count != 1) {
				Report.Error (1535, loc, "Overloaded unary operator `{0}' takes one parameter",
					Operator.GetName (op));
			}
		} else {
			if (p_count > 2) {
				Report.Error (1534, loc, "Overloaded binary operator `{0}' takes two parameters",
					Operator.GetName (op));
			} else if (p_count != 2) {
				Report.Error (1019, loc, "Overloadable unary operator expected");
			}
		}
		
		if (RootContext.Documentation != null) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.NotAllowed;
		}

		yyVal = new OperatorDeclaration (op, (FullNamedExpression) yyVals[-6+yyTop], loc);
	  }
  break;
case 248:
#line 2031 "cs-parser.jay"
  { yyVal = Operator.OpType.LogicalNot; }
  break;
case 249:
#line 2032 "cs-parser.jay"
  { yyVal = Operator.OpType.OnesComplement; }
  break;
case 250:
#line 2033 "cs-parser.jay"
  { yyVal = Operator.OpType.Increment; }
  break;
case 251:
#line 2034 "cs-parser.jay"
  { yyVal = Operator.OpType.Decrement; }
  break;
case 252:
#line 2035 "cs-parser.jay"
  { yyVal = Operator.OpType.True; }
  break;
case 253:
#line 2036 "cs-parser.jay"
  { yyVal = Operator.OpType.False; }
  break;
case 254:
#line 2038 "cs-parser.jay"
  { yyVal = Operator.OpType.Addition; }
  break;
case 255:
#line 2039 "cs-parser.jay"
  { yyVal = Operator.OpType.Subtraction; }
  break;
case 256:
#line 2041 "cs-parser.jay"
  { yyVal = Operator.OpType.Multiply; }
  break;
case 257:
#line 2042 "cs-parser.jay"
  {  yyVal = Operator.OpType.Division; }
  break;
case 258:
#line 2043 "cs-parser.jay"
  { yyVal = Operator.OpType.Modulus; }
  break;
case 259:
#line 2044 "cs-parser.jay"
  { yyVal = Operator.OpType.BitwiseAnd; }
  break;
case 260:
#line 2045 "cs-parser.jay"
  { yyVal = Operator.OpType.BitwiseOr; }
  break;
case 261:
#line 2046 "cs-parser.jay"
  { yyVal = Operator.OpType.ExclusiveOr; }
  break;
case 262:
#line 2047 "cs-parser.jay"
  { yyVal = Operator.OpType.LeftShift; }
  break;
case 263:
#line 2048 "cs-parser.jay"
  { yyVal = Operator.OpType.RightShift; }
  break;
case 264:
#line 2049 "cs-parser.jay"
  { yyVal = Operator.OpType.Equality; }
  break;
case 265:
#line 2050 "cs-parser.jay"
  { yyVal = Operator.OpType.Inequality; }
  break;
case 266:
#line 2051 "cs-parser.jay"
  { yyVal = Operator.OpType.GreaterThan; }
  break;
case 267:
#line 2052 "cs-parser.jay"
  { yyVal = Operator.OpType.LessThan; }
  break;
case 268:
#line 2053 "cs-parser.jay"
  { yyVal = Operator.OpType.GreaterThanOrEqual; }
  break;
case 269:
#line 2054 "cs-parser.jay"
  { yyVal = Operator.OpType.LessThanOrEqual; }
  break;
case 270:
#line 2059 "cs-parser.jay"
  {
		valid_param_mod = ParameterModifierType.DefaultValue;
	  }
  break;
case 271:
#line 2063 "cs-parser.jay"
  {
		valid_param_mod = 0;

		Location loc = GetLocation (yyVals[-5+yyTop]);
		current_local_parameters = (ParametersCompiled)yyVals[-1+yyTop];  
		  
		if (RootContext.Documentation != null) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.NotAllowed;
		}

		yyVal = new OperatorDeclaration (Operator.OpType.Implicit, (FullNamedExpression) yyVals[-4+yyTop], loc);
	  }
  break;
case 272:
#line 2077 "cs-parser.jay"
  {
		valid_param_mod = ParameterModifierType.DefaultValue;
	  }
  break;
case 273:
#line 2081 "cs-parser.jay"
  {
		valid_param_mod = 0;
		
		Location loc = GetLocation (yyVals[-5+yyTop]);
		current_local_parameters = (ParametersCompiled)yyVals[-1+yyTop];  
		  
		if (RootContext.Documentation != null) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.NotAllowed;
		}

		yyVal = new OperatorDeclaration (Operator.OpType.Explicit, (FullNamedExpression) yyVals[-4+yyTop], loc);
	  }
  break;
case 274:
#line 2095 "cs-parser.jay"
  {
	  	Error_SyntaxError (yyToken);
		current_local_parameters = ParametersCompiled.EmptyReadOnlyParameters;
		yyVal = new OperatorDeclaration (Operator.OpType.Implicit, null, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 275:
#line 2101 "cs-parser.jay"
  {
	  	Error_SyntaxError (yyToken);
		current_local_parameters = ParametersCompiled.EmptyReadOnlyParameters;
	  	yyVal = new OperatorDeclaration (Operator.OpType.Explicit, null, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 276:
#line 2111 "cs-parser.jay"
  { 
		Constructor c = (Constructor) yyVals[-1+yyTop];
		c.Block = (ToplevelBlock) yyVals[0+yyTop];
		
		if (RootContext.Documentation != null)
			c.DocComment = ConsumeStoredComment ();

		current_container.AddConstructor (c);

		current_local_parameters = null;
		if (RootContext.Documentation != null)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }
  break;
case 277:
#line 2130 "cs-parser.jay"
  {
		if (RootContext.Documentation != null) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
		
		valid_param_mod = ParameterModifierType.All;
	  }
  break;
case 278:
#line 2139 "cs-parser.jay"
  {
		valid_param_mod = 0;
		current_local_parameters = (ParametersCompiled) yyVals[-1+yyTop];  
		
		/**/
		/* start block here, so possible anonymous methods inside*/
		/* constructor initializer can get correct parent block*/
		/**/
	  	start_block (lexer.Location);
	  }
  break;
case 279:
#line 2150 "cs-parser.jay"
  {
		var lt = (Tokenizer.LocatedToken) yyVals[-6+yyTop];
		var mods = (Modifiers) yyVals[-7+yyTop];
		ConstructorInitializer ci = (ConstructorInitializer) yyVals[0+yyTop];

		Constructor c = new Constructor (current_class, lt.Value, mods,
			(Attributes) yyVals[-8+yyTop], current_local_parameters, ci, lt.Location);
		
		if (lt.Value != current_container.MemberName.Name) {
			Report.Error (1520, c.Location, "Class, struct, or interface method must have a return type");
		} else if ((mods & Modifiers.STATIC) != 0) {
			if ((mods & Modifiers.AccessibilityMask) != 0){
				Report.Error (515, c.Location,
					"`{0}': static constructor cannot have an access modifier",
					c.GetSignatureForError ());
			}
			if (ci != null) {
				Report.Error (514, c.Location,
					"`{0}': static constructor cannot have an explicit `this' or `base' constructor call",
					c.GetSignatureForError ());
			
			}
		}
		
		yyVal = c;
	  }
  break;
case 281:
#line 2180 "cs-parser.jay"
  { current_block = null; yyVal = null; }
  break;
case 284:
#line 2190 "cs-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 285:
#line 2194 "cs-parser.jay"
  {
	  	--lexer.parsing_block;
		yyVal = new ConstructorBaseInitializer ((Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-4+yyTop]));
	  }
  break;
case 286:
#line 2199 "cs-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 287:
#line 2203 "cs-parser.jay"
  {
	  	--lexer.parsing_block;
		yyVal = new ConstructorThisInitializer ((Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-4+yyTop]));
	  }
  break;
case 288:
#line 2207 "cs-parser.jay"
  {
		Report.Error (1018, GetLocation (yyVals[-1+yyTop]), "Keyword `this' or `base' expected");
		yyVal = null;
	  }
  break;
case 289:
#line 2215 "cs-parser.jay"
  {
		if (RootContext.Documentation != null) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.NotAllowed;
		}
		
		current_local_parameters = ParametersCompiled.EmptyReadOnlyParameters;
	  }
  break;
case 290:
#line 2224 "cs-parser.jay"
  {
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		if (lt.Value != current_container.MemberName.Name){
			Report.Error (574, lt.Location, "Name of destructor must match name of class");
		} else if (current_container.Kind != MemberKind.Class){
			Report.Error (575, lt.Location, "Only class types can contain destructor");
		} else {
			Destructor d = new Destructor (current_class, (Modifiers) yyVals[-6+yyTop],
				ParametersCompiled.EmptyReadOnlyParameters, (Attributes) yyVals[-7+yyTop], lt.Location);
			if (RootContext.Documentation != null)
				d.DocComment = ConsumeStoredComment ();
		  
			d.Block = (ToplevelBlock) yyVals[0+yyTop];
			current_container.AddMethod (d);
		}

		current_local_parameters = null;
	  }
  break;
case 291:
#line 2248 "cs-parser.jay"
  {
		foreach (VariableMemberDeclaration var in (List<object>) yyVals[-1+yyTop]) {

			EventField e = new EventField (
				current_class, (FullNamedExpression) yyVals[-2+yyTop], (Modifiers) yyVals[-4+yyTop], var.MemberName, (Attributes) yyVals[-5+yyTop]);
				
			e.Initializer = var.GetInitializer ((FullNamedExpression) yyVals[-2+yyTop]);
			if (current_container.Kind == MemberKind.Interface && e.Initializer != null) {
				Report.Error (68, e.Location, "`{0}': event in interface cannot have initializer", e.GetSignatureForError ());
			}
			
			if (var.MemberName.Left != null) {
				Report.Error (71, e.Location,
					"`{0}': An explicit interface implementation of an event must use property syntax",
					e.GetSignatureForError ());
			}

			current_container.AddEvent (e);

			if (RootContext.Documentation != null) {
				e.DocComment = Lexer.consume_doc_comment ();
				Lexer.doc_state = XmlCommentState.Allowed;
			}
		}
	  }
  break;
case 292:
#line 2277 "cs-parser.jay"
  {
		implicit_value_parameter_type = (FullNamedExpression) yyVals[-2+yyTop];  
		current_local_parameters = new ParametersCompiled (compiler,
			new Parameter (implicit_value_parameter_type, "value", 
			Parameter.Modifier.NONE, null, GetLocation (yyVals[-3+yyTop])));

		lexer.EventParsing = true;
	  }
  break;
case 293:
#line 2286 "cs-parser.jay"
  {
		lexer.EventParsing = false;  
	  }
  break;
case 294:
#line 2290 "cs-parser.jay"
  {
		MemberName name = (MemberName) yyVals[-5+yyTop];
		
		if (current_container.Kind == MemberKind.Interface) {
			Report.Error (69, GetLocation (yyVals[-7+yyTop]), "Event in interface cannot have add or remove accessors");
			yyVals[-2+yyTop] = new Accessors (null, null);
		} else if (yyVals[-2+yyTop] == null) {
			Report.Error (65, GetLocation (yyVals[-7+yyTop]), "`{0}.{1}': event property must have both add and remove accessors",
				current_container.GetSignatureForError (), name.GetSignatureForError ());
			yyVals[-2+yyTop] = new Accessors (null, null);
		}
		
		Accessors accessors = (Accessors) yyVals[-2+yyTop];

		if (accessors.get_or_add == null || accessors.set_or_remove == null)
			/* CS0073 is already reported, so no CS0065 here.*/
			yyVal = null;
		else {
			Event e = new EventProperty (
				current_class, (FullNamedExpression) yyVals[-6+yyTop], (Modifiers) yyVals[-8+yyTop], name,
				(Attributes) yyVals[-9+yyTop], accessors.get_or_add, accessors.set_or_remove);
			if (RootContext.Documentation != null) {
				e.DocComment = Lexer.consume_doc_comment ();
				Lexer.doc_state = XmlCommentState.Allowed;
			}

			current_container.AddEvent (e);
			implicit_value_parameter_type = null;
		}
		current_local_parameters = null;
	  }
  break;
case 295:
#line 2322 "cs-parser.jay"
  {
		MemberName mn = (MemberName) yyVals[-1+yyTop];
		if (mn.Left != null)
			Report.Error (71, mn.Location, "An explicit interface implementation of an event must use property syntax");

		if (RootContext.Documentation != null)
			Lexer.doc_state = XmlCommentState.Allowed;

		Error_SyntaxError (yyToken);
		yyVal = null;
	  }
  break;
case 296:
#line 2337 "cs-parser.jay"
  {
		yyVal = new Accessors ((Accessor) yyVals[-1+yyTop], (Accessor) yyVals[0+yyTop]);
	  }
  break;
case 297:
#line 2341 "cs-parser.jay"
  {
		Accessors accessors = new Accessors ((Accessor) yyVals[0+yyTop], (Accessor) yyVals[-1+yyTop]);
		accessors.declared_in_reverse = true;
		yyVal = accessors;
	  }
  break;
case 298:
#line 2346 "cs-parser.jay"
  { yyVal = null; }
  break;
case 299:
#line 2347 "cs-parser.jay"
  { yyVal = null; }
  break;
case 300:
#line 2349 "cs-parser.jay"
  { 
		Report.Error (1055, GetLocation (yyVals[0+yyTop]), "An add or remove accessor expected");
		yyVal = null;
	  }
  break;
case 301:
#line 2353 "cs-parser.jay"
  { yyVal = null; }
  break;
case 302:
#line 2358 "cs-parser.jay"
  {
		lexer.EventParsing = false;
	  }
  break;
case 303:
#line 2362 "cs-parser.jay"
  {
		Accessor accessor = new Accessor ((ToplevelBlock) yyVals[0+yyTop], 0, (Attributes) yyVals[-3+yyTop], null, GetLocation (yyVals[-2+yyTop]));
		lexer.EventParsing = true;
		yyVal = accessor;
	  }
  break;
case 304:
#line 2367 "cs-parser.jay"
  {
		Report.Error (73, GetLocation (yyVals[-1+yyTop]), "An add or remove accessor must have a body");
		yyVal = null;
	  }
  break;
case 305:
#line 2371 "cs-parser.jay"
  {
		Report.Error (1609, GetLocation (yyVals[0+yyTop]), "Modifiers cannot be placed on event accessor declarations");
		yyVal = null;
	  }
  break;
case 306:
#line 2379 "cs-parser.jay"
  {
		lexer.EventParsing = false;
	  }
  break;
case 307:
#line 2383 "cs-parser.jay"
  {
		yyVal = new Accessor ((ToplevelBlock) yyVals[0+yyTop], 0, (Attributes) yyVals[-3+yyTop], null, GetLocation (yyVals[-2+yyTop]));
		lexer.EventParsing = true;
	  }
  break;
case 308:
#line 2387 "cs-parser.jay"
  {
		Report.Error (73, GetLocation (yyVals[-1+yyTop]), "An add or remove accessor must have a body");
		yyVal = null;
	  }
  break;
case 309:
#line 2391 "cs-parser.jay"
  {
		Report.Error (1609, GetLocation (yyVals[0+yyTop]), "Modifiers cannot be placed on event accessor declarations");
		yyVal = null;
	  }
  break;
case 310:
#line 2400 "cs-parser.jay"
  {
	  	valid_param_mod = ParameterModifierType.Params | ParameterModifierType.DefaultValue;
	  }
  break;
case 311:
#line 2405 "cs-parser.jay"
  {
		valid_param_mod = 0;
		implicit_value_parameter_type = (FullNamedExpression) yyVals[-6+yyTop];
		indexer_parameters = (ParametersCompiled) yyVals[-2+yyTop];
		
		if (indexer_parameters.IsEmpty) {
			Report.Error (1551, GetLocation (yyVals[-4+yyTop]), "Indexers must have at least one parameter");
		}

		if (RootContext.Documentation != null) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}

		lexer.PropertyParsing = true;
		parsing_indexer  = true;
		
	  }
  break;
case 312:
#line 2424 "cs-parser.jay"
  {
		  lexer.PropertyParsing = false;
		  has_get = has_set = false;
		  parsing_indexer  = false;
	  }
  break;
case 313:
#line 2430 "cs-parser.jay"
  { 
		Accessors accessors = (Accessors) yyVals[-2+yyTop];
		Accessor get_block = accessors != null ? accessors.get_or_add : null;
		Accessor set_block = accessors != null ? accessors.set_or_remove : null;
		bool order = accessors != null ? accessors.declared_in_reverse : false;

		Indexer indexer = new Indexer (current_class, (FullNamedExpression) yyVals[-10+yyTop],
			(MemberName)yyVals[-9+yyTop], (Modifiers) yyVals[-11+yyTop], (ParametersCompiled) yyVals[-6+yyTop], (Attributes) yyVals[-12+yyTop],
			get_block, set_block, order);
				       
		if (yyVals[-10+yyTop] == TypeManager.system_void_expr)
			Report.Error (620, GetLocation (yyVals[-10+yyTop]), "`{0}': indexer return type cannot be `void'", indexer.GetSignatureForError ());
			
		if (accessors == null)
			Report.Error (548, indexer.Location, "`{0}': property or indexer must have at least one accessor", indexer.GetSignatureForError ());

		if (current_container.Kind == MemberKind.Interface) {
			if (indexer.Get.Block != null)
				Report.Error (531, indexer.Location, "`{0}.get': interface members cannot have a definition", indexer.GetSignatureForError ());

			if (indexer.Set.Block != null)
				Report.Error (531, indexer.Location, "`{0}.set': interface members cannot have a definition", indexer.GetSignatureForError ());
		}

		if (RootContext.Documentation != null)
			indexer.DocComment = ConsumeStoredComment ();

		current_container.AddIndexer (indexer);
		
		current_local_parameters = null;
		implicit_value_parameter_type = null;
		indexer_parameters = null;
	  }
  break;
case 314:
#line 2469 "cs-parser.jay"
  {
		if (RootContext.Documentation != null)
			enumTypeComment = Lexer.consume_doc_comment ();
	  }
  break;
case 315:
#line 2475 "cs-parser.jay"
  {
		MemberName name = (MemberName) yyVals[-4+yyTop];
		if (name.IsGeneric) {
			Report.Error (1675, name.Location, "Enums cannot have type parameters");
		}

		name = MakeName (name);
		Enum e = new Enum (current_namespace, current_class, (TypeExpr) yyVals[-3+yyTop], (Modifiers) yyVals[-6+yyTop],
				   name, (Attributes) yyVals[-7+yyTop]);
		
		if (RootContext.Documentation != null)
			e.DocComment = enumTypeComment;


		EnumMember em = null;
		foreach (VariableDeclaration ev in (IList<VariableDeclaration>) yyVals[-1+yyTop]) {
			em = new EnumMember (
				e, em, ev.identifier, ev.GetInitializer ((FullNamedExpression) yyVals[-3+yyTop]),
				ev.OptAttributes, ev.Location);

/*			if (RootContext.Documentation != null)*/
				em.DocComment = ev.DocComment;

			e.AddEnumMember (em);
		}
		if (RootContext.EvalMode)
			undo.AddTypeContainer (current_container, e);

		current_container.AddTypeContainer (e);

		yyVal = e;

	  }
  break;
case 316:
#line 2512 "cs-parser.jay"
  {
		yyVal = TypeManager.system_int32_expr;
	  }
  break;
case 317:
#line 2516 "cs-parser.jay"
  {
		if (yyVals[0+yyTop] != TypeManager.system_int32_expr && yyVals[0+yyTop] != TypeManager.system_uint32_expr &&
			yyVals[0+yyTop] != TypeManager.system_int64_expr && yyVals[0+yyTop] != TypeManager.system_uint64_expr &&
			yyVals[0+yyTop] != TypeManager.system_int16_expr && yyVals[0+yyTop] != TypeManager.system_uint16_expr &&
			yyVals[0+yyTop] != TypeManager.system_byte_expr && yyVals[0+yyTop] != TypeManager.system_sbyte_expr) {
			Enum.Error_1008 (GetLocation (yyVals[0+yyTop]), Report);
			yyVals[0+yyTop] = TypeManager.system_int32_expr;
		}
	 
		yyVal = yyVals[0+yyTop];
	 }
  break;
case 318:
#line 2528 "cs-parser.jay"
  {
	 	Error_TypeExpected (GetLocation (yyVals[-1+yyTop]));
		yyVal = TypeManager.system_int32_expr;
	 }
  break;
case 319:
#line 2536 "cs-parser.jay"
  {
		if (RootContext.Documentation != null)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }
  break;
case 320:
#line 2541 "cs-parser.jay"
  {
	  	/* here will be evaluated after CLOSE_BLACE is consumed.*/
		if (RootContext.Documentation != null)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }
  break;
case 321:
#line 2547 "cs-parser.jay"
  {
		yyVal = yyVals[-2+yyTop];
	  }
  break;
case 322:
#line 2553 "cs-parser.jay"
  { yyVal = new VariableDeclaration [0]; }
  break;
case 323:
#line 2554 "cs-parser.jay"
  { yyVal = yyVals[-1+yyTop]; }
  break;
case 324:
#line 2559 "cs-parser.jay"
  {
		var l = new List<VariableDeclaration> (4);
		l.Add ((VariableDeclaration) yyVals[0+yyTop]);
		yyVal = l;
	  }
  break;
case 325:
#line 2565 "cs-parser.jay"
  {
		var l = (List<VariableDeclaration>) yyVals[-2+yyTop];
		l.Add ((VariableDeclaration) yyVals[0+yyTop]);
		yyVal = l;
	  }
  break;
case 326:
#line 2574 "cs-parser.jay"
  {
		VariableDeclaration vd = new VariableDeclaration (
			(Tokenizer.LocatedToken) yyVals[0+yyTop], null, (Attributes) yyVals[-1+yyTop]);

		if (RootContext.Documentation != null) {
			vd.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}

		yyVal = vd;
	  }
  break;
case 327:
#line 2586 "cs-parser.jay"
  {
	  	++lexer.parsing_block;
		if (RootContext.Documentation != null) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.NotAllowed;
		}
	  }
  break;
case 328:
#line 2594 "cs-parser.jay"
  { 
		--lexer.parsing_block;	  
		VariableDeclaration vd = new VariableDeclaration (
			(Tokenizer.LocatedToken) yyVals[-3+yyTop], (Expression) yyVals[0+yyTop], (Attributes) yyVals[-4+yyTop]);

		if (RootContext.Documentation != null)
			vd.DocComment = ConsumeStoredComment ();

		yyVal = vd;
	  }
  break;
case 329:
#line 2612 "cs-parser.jay"
  {
		valid_param_mod = ParameterModifierType.Ref | ParameterModifierType.Out | ParameterModifierType.Params | ParameterModifierType.DefaultValue;
	  }
  break;
case 330:
#line 2616 "cs-parser.jay"
  {
		valid_param_mod = 0;

		MemberName name = MakeName ((MemberName) yyVals[-4+yyTop]);
		ParametersCompiled p = (ParametersCompiled) yyVals[-1+yyTop];

		Delegate del = new Delegate (current_namespace, current_class, (FullNamedExpression) yyVals[-5+yyTop],
					     (Modifiers) yyVals[-7+yyTop], name, p, (Attributes) yyVals[-8+yyTop]);

		if (RootContext.Documentation != null) {
			del.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}

		current_container.AddDelegate (del);
		current_delegate = del;
		lexer.ConstraintsParsing = true;
	  }
  break;
case 331:
#line 2635 "cs-parser.jay"
  {
		lexer.ConstraintsParsing = false;
	  }
  break;
case 332:
#line 2639 "cs-parser.jay"
  {
		current_delegate.SetParameterInfo ((List<Constraints>) yyVals[-2+yyTop]);
		yyVal = current_delegate;

		current_delegate = null;
	  }
  break;
case 333:
#line 2649 "cs-parser.jay"
  {
		yyVal = null;
	  }
  break;
case 334:
#line 2653 "cs-parser.jay"
  {
		if (RootContext.MetadataCompatibilityVersion < MetadataVersion.v2)	  
	  		Report.FeatureIsNotSupported (GetLocation (yyVals[0+yyTop]), "nullable types");
		else if (RootContext.Version < LanguageVersion.ISO_2)
			Report.FeatureIsNotAvailable (GetLocation (yyVals[0+yyTop]), "nullable types");
	  
	  	yyVal = this;
	  }
  break;
case 336:
#line 2666 "cs-parser.jay"
  {
		var lt1 = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		var lt2 = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		
		yyVal = new MemberName (lt1.Value, lt2.Value, (TypeArguments) yyVals[0+yyTop], lt1.Location);
	  }
  break;
case 338:
#line 2677 "cs-parser.jay"
  {
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberName ((MemberName) yyVals[-3+yyTop], lt.Value, (TypeArguments) yyVals[0+yyTop], lt.Location);
	  }
  break;
case 339:
#line 2685 "cs-parser.jay"
  {
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberName (lt.Value, (TypeArguments)yyVals[0+yyTop], lt.Location);	  
	  }
  break;
case 340:
#line 2695 "cs-parser.jay"
  { yyVal = null; }
  break;
case 341:
#line 2697 "cs-parser.jay"
  {
		if (RootContext.MetadataCompatibilityVersion < MetadataVersion.v2)	  
	  		Report.FeatureIsNotSupported (GetLocation (yyVals[-2+yyTop]), "generics");
		else if (RootContext.Version < LanguageVersion.ISO_2)
			Report.FeatureIsNotAvailable (GetLocation (yyVals[-2+yyTop]), "generics");	  
	  
		yyVal = yyVals[-1+yyTop];
	  }
  break;
case 342:
#line 2706 "cs-parser.jay"
  {
		Error_TypeExpected (lexer.Location);
		yyVal = new TypeArguments ();
	  }
  break;
case 343:
#line 2714 "cs-parser.jay"
  {
		TypeArguments type_args = new TypeArguments ();
		type_args.Add ((FullNamedExpression) yyVals[0+yyTop]);
		yyVal = type_args;
	  }
  break;
case 344:
#line 2720 "cs-parser.jay"
  {
		TypeArguments type_args = (TypeArguments) yyVals[-2+yyTop];
		type_args.Add ((FullNamedExpression) yyVals[0+yyTop]);
		yyVal = type_args;
	  }
  break;
case 345:
#line 2732 "cs-parser.jay"
  {
		lexer.parsing_generic_declaration = true;
	  }
  break;
case 346:
#line 2736 "cs-parser.jay"
  {
		lexer.parsing_generic_declaration = false;
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		yyVal = new MemberName (lt.Value, (TypeArguments)yyVals[0+yyTop], lt.Location);	  
	  }
  break;
case 347:
#line 2745 "cs-parser.jay"
  {
	  	MemberName mn = (MemberName)yyVals[0+yyTop];
	  	if (mn.TypeArguments != null)
	  		syntax_error (mn.Location, string.Format ("Member `{0}' cannot declare type arguments",
	  			mn.GetSignatureForError ()));
	  }
  break;
case 349:
#line 2756 "cs-parser.jay"
  {
		lexer.parsing_generic_declaration = false;	  
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberName ((MemberName) yyVals[-2+yyTop], lt.Value, (TypeArguments) yyVals[0+yyTop], lt.Location);
	  }
  break;
case 350:
#line 2765 "cs-parser.jay"
  {
		lexer.parsing_generic_declaration = false;	  
		yyVal = new MemberName (TypeContainer.DefaultIndexerName, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 351:
#line 2770 "cs-parser.jay"
  {
		lexer.parsing_generic_declaration = false;
		yyVal = new MemberName ((MemberName) yyVals[-1+yyTop], TypeContainer.DefaultIndexerName, null, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 352:
#line 2778 "cs-parser.jay"
  {
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		yyVal = new MemberName (lt.Value, (TypeArguments) yyVals[-1+yyTop], lt.Location);
	  }
  break;
case 353:
#line 2783 "cs-parser.jay"
  {
		var lt1 = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		var lt2 = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		
		yyVal = new MemberName (lt1.Value, lt2.Value, (TypeArguments) yyVals[-1+yyTop], lt1.Location);
	  }
  break;
case 354:
#line 2790 "cs-parser.jay"
  {
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		yyVal = new MemberName ((MemberName) yyVals[-3+yyTop], lt.Value, (TypeArguments) yyVals[-1+yyTop], lt.Location);
	  }
  break;
case 355:
#line 2797 "cs-parser.jay"
  { yyVal = null; }
  break;
case 356:
#line 2799 "cs-parser.jay"
  {
		if (RootContext.MetadataCompatibilityVersion < MetadataVersion.v2)	  
	  		Report.FeatureIsNotSupported (GetLocation (yyVals[-2+yyTop]), "generics");
		else if (RootContext.Version < LanguageVersion.ISO_2)
			Report.FeatureIsNotAvailable (GetLocation (yyVals[-2+yyTop]), "generics");
	  
		yyVal = yyVals[-1+yyTop];
	  }
  break;
case 357:
#line 2811 "cs-parser.jay"
  {
		TypeArguments type_args = new TypeArguments ();
		type_args.Add ((FullNamedExpression)yyVals[0+yyTop]);
		yyVal = type_args;
	  }
  break;
case 358:
#line 2817 "cs-parser.jay"
  {
		TypeArguments type_args = (TypeArguments) yyVals[-2+yyTop];
		type_args.Add ((FullNamedExpression)yyVals[0+yyTop]);
		yyVal = type_args;
	  }
  break;
case 359:
#line 2826 "cs-parser.jay"
  {
		var lt = (Tokenizer.LocatedToken)yyVals[0+yyTop];
		yyVal = new TypeParameterName (lt.Value, (Attributes)yyVals[-2+yyTop], (Variance) yyVals[-1+yyTop], lt.Location);
  	  }
  break;
case 360:
#line 2831 "cs-parser.jay"
  {
  	  	if (GetTokenName (yyToken) == "type")
			Report.Error (81, GetLocation (yyVals[0+yyTop]), "Type parameter declaration must be an identifier not a type");
		else
			Error_SyntaxError (yyToken);
			
  	  	yyVal = new TypeParameterName ("", null, lexer.Location);
  	  }
  break;
case 362:
#line 2847 "cs-parser.jay"
  {
		yyVal = TypeManager.system_void_expr;
	  }
  break;
case 363:
#line 2854 "cs-parser.jay"
  {
		lexer.parsing_generic_declaration = true;
	  }
  break;
case 365:
#line 2865 "cs-parser.jay"
  {
	  	Expression.Error_VoidInvalidInTheContext (GetLocation (yyVals[0+yyTop]), Report);
		yyVal = TypeManager.system_void_expr;
	  }
  break;
case 367:
#line 2874 "cs-parser.jay"
  {
	  	Expression.Error_VoidInvalidInTheContext (GetLocation (yyVals[0+yyTop]), Report);
		yyVal = TypeManager.system_void_expr;
	  }
  break;
case 369:
#line 2883 "cs-parser.jay"
  {
	  	Report.Error (1536, GetLocation (yyVals[0+yyTop]), "Invalid parameter type `void'");
		yyVal = TypeManager.system_void_expr;
	  }
  break;
case 371:
#line 2892 "cs-parser.jay"
  {
		string rank_specifiers = (string) yyVals[0+yyTop];
		yyVal = new ComposedCast ((FullNamedExpression) yyVals[-1+yyTop], rank_specifiers);
	  }
  break;
case 372:
#line 2900 "cs-parser.jay"
  {
		MemberName name = (MemberName) yyVals[-1+yyTop];

		if (yyVals[0+yyTop] != null) {
			yyVal = new ComposedCast (name.GetTypeExpression (), "?", lexer.Location);
		} else {
			if (name.Left == null && name.Name == "var")
				yyVal = new VarExpr (name.Location);
			else
				yyVal = name.GetTypeExpression ();
		}
	  }
  break;
case 373:
#line 2913 "cs-parser.jay"
  {
		if (yyVals[0+yyTop] != null)
			yyVal = new ComposedCast ((FullNamedExpression) yyVals[-1+yyTop], "?", lexer.Location);
	  }
  break;
case 374:
#line 2918 "cs-parser.jay"
  {
		/**/
		/* Note that here only unmanaged types are allowed but we*/
		/* can't perform checks during this phase - we do it during*/
		/* semantic analysis.*/
		/**/
		yyVal = new ComposedCast ((FullNamedExpression) yyVals[-1+yyTop], "*", Lexer.Location);
	  }
  break;
case 375:
#line 2927 "cs-parser.jay"
  {
		yyVal = new ComposedCast (TypeManager.system_void_expr, "*", GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 376:
#line 2934 "cs-parser.jay"
  {
		var types = new List<FullNamedExpression> (2);
		types.Add ((FullNamedExpression) yyVals[0+yyTop]);
		yyVal = types;
	  }
  break;
case 377:
#line 2940 "cs-parser.jay"
  {
		var types = (List<FullNamedExpression>) yyVals[-2+yyTop];
		types.Add ((FullNamedExpression) yyVals[0+yyTop]);
		yyVal = types;
	  }
  break;
case 378:
#line 2949 "cs-parser.jay"
  {
		if (yyVals[0+yyTop] is ComposedCast) {
			Report.Error (1521, GetLocation (yyVals[0+yyTop]), "Invalid base type `{0}'", ((ComposedCast)yyVals[0+yyTop]).GetSignatureForError ());
		}
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 379:
#line 2956 "cs-parser.jay"
  {
	  	Error_TypeExpected (lexer.Location);
		yyVal = null;
	  }
  break;
case 380:
#line 2967 "cs-parser.jay"
  { yyVal = TypeManager.system_object_expr; }
  break;
case 381:
#line 2968 "cs-parser.jay"
  { yyVal = TypeManager.system_string_expr; }
  break;
case 382:
#line 2969 "cs-parser.jay"
  { yyVal = TypeManager.system_boolean_expr; }
  break;
case 383:
#line 2970 "cs-parser.jay"
  { yyVal = TypeManager.system_decimal_expr; }
  break;
case 384:
#line 2971 "cs-parser.jay"
  { yyVal = TypeManager.system_single_expr; }
  break;
case 385:
#line 2972 "cs-parser.jay"
  { yyVal = TypeManager.system_double_expr; }
  break;
case 387:
#line 2977 "cs-parser.jay"
  { yyVal = TypeManager.system_sbyte_expr; }
  break;
case 388:
#line 2978 "cs-parser.jay"
  { yyVal = TypeManager.system_byte_expr; }
  break;
case 389:
#line 2979 "cs-parser.jay"
  { yyVal = TypeManager.system_int16_expr; }
  break;
case 390:
#line 2980 "cs-parser.jay"
  { yyVal = TypeManager.system_uint16_expr; }
  break;
case 391:
#line 2981 "cs-parser.jay"
  { yyVal = TypeManager.system_int32_expr; }
  break;
case 392:
#line 2982 "cs-parser.jay"
  { yyVal = TypeManager.system_uint32_expr; }
  break;
case 393:
#line 2983 "cs-parser.jay"
  { yyVal = TypeManager.system_int64_expr; }
  break;
case 394:
#line 2984 "cs-parser.jay"
  { yyVal = TypeManager.system_uint64_expr; }
  break;
case 395:
#line 2985 "cs-parser.jay"
  { yyVal = TypeManager.system_char_expr; }
  break;
case 397:
#line 2991 "cs-parser.jay"
  {
		yyVal = TypeManager.system_void_expr;	
	  }
  break;
case 401:
#line 3009 "cs-parser.jay"
  {
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new SimpleName (lt.Value, (TypeArguments)yyVals[0+yyTop], lt.Location);	  
	  }
  break;
case 402:
#line 3013 "cs-parser.jay"
  {
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
	       yyVal = new CompletionSimpleName (MemberName.MakeName (lt.Value, null), lt.Location);
	  }
  break;
case 422:
#line 3039 "cs-parser.jay"
  { yyVal = new NullLiteral (GetLocation (yyVals[0+yyTop])); }
  break;
case 423:
#line 3043 "cs-parser.jay"
  { yyVal = new BoolLiteral (true, GetLocation (yyVals[0+yyTop])); }
  break;
case 424:
#line 3044 "cs-parser.jay"
  { yyVal = new BoolLiteral (false, GetLocation (yyVals[0+yyTop])); }
  break;
case 429:
#line 3070 "cs-parser.jay"
  {
		yyVal = new ParenthesizedExpression ((Expression) yyVals[-1+yyTop]);
	  }
  break;
case 430:
#line 3074 "cs-parser.jay"
  {
		yyVal = new ParenthesizedExpression ((Expression) yyVals[-1+yyTop]);
	  }
  break;
case 431:
#line 3081 "cs-parser.jay"
  {
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberAccess ((Expression) yyVals[-3+yyTop], lt.Value, (TypeArguments) yyVals[0+yyTop], lt.Location);
	  }
  break;
case 432:
#line 3086 "cs-parser.jay"
  {
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		/* TODO: Location is wrong as some predefined types doesn't hold a location*/
		yyVal = new MemberAccess ((Expression) yyVals[-3+yyTop], lt.Value, (TypeArguments) yyVals[0+yyTop], lt.Location);
	  }
  break;
case 433:
#line 3092 "cs-parser.jay"
  {
		var lt1 = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		var lt2 = (Tokenizer.LocatedToken) yyVals[-1+yyTop];

		yyVal = new QualifiedAliasMember (lt1.Value, lt2.Value, (TypeArguments) yyVals[0+yyTop], lt1.Location);
	  }
  break;
case 434:
#line 3098 "cs-parser.jay"
  {
		yyVal = new CompletionMemberAccess ((Expression) yyVals[-2+yyTop], null,GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 435:
#line 3101 "cs-parser.jay"
  {
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new CompletionMemberAccess ((Expression) yyVals[-3+yyTop], lt.Value, lt.Location);
	  }
  break;
case 436:
#line 3106 "cs-parser.jay"
  {
		/* TODO: Location is wrong as some predefined types doesn't hold a location*/
		yyVal = new CompletionMemberAccess ((Expression) yyVals[-2+yyTop], null, lexer.Location);
	  }
  break;
case 437:
#line 3110 "cs-parser.jay"
  {
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new CompletionMemberAccess ((Expression) yyVals[-3+yyTop], lt.Value, lt.Location);
 	  }
  break;
case 438:
#line 3118 "cs-parser.jay"
  {
		yyVal = new Invocation ((Expression) yyVals[-3+yyTop], (Arguments) yyVals[-1+yyTop]);
	  }
  break;
case 439:
#line 3124 "cs-parser.jay"
  { yyVal = null; }
  break;
case 441:
#line 3130 "cs-parser.jay"
  {
	  	if (yyVals[-1+yyTop] == null)
	  		yyVal = CollectionOrObjectInitializers.Empty;
	  	else
	  		yyVal = new CollectionOrObjectInitializers ((List<Expression>) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 442:
#line 3137 "cs-parser.jay"
  {
	  	yyVal = new CollectionOrObjectInitializers ((List<Expression>) yyVals[-2+yyTop], GetLocation (yyVals[-3+yyTop]));
	  }
  break;
case 443:
#line 3143 "cs-parser.jay"
  { yyVal = null; }
  break;
case 444:
#line 3145 "cs-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	}
  break;
case 445:
#line 3152 "cs-parser.jay"
  {
	  	var a = new List<Expression> ();
	  	a.Add ((Expression) yyVals[0+yyTop]);
	  	yyVal = a;
	  }
  break;
case 446:
#line 3158 "cs-parser.jay"
  {
	  	var a = (List<Expression>)yyVals[-2+yyTop];
	  	a.Add ((Expression) yyVals[0+yyTop]);
	  	yyVal = a;
	  }
  break;
case 447:
#line 3163 "cs-parser.jay"
  {
	  	Error_SyntaxError (yyToken);
		yyVal = yyVals[-1+yyTop];
	  }
  break;
case 448:
#line 3171 "cs-parser.jay"
  {
	  	var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
	  	yyVal = new ElementInitializer (lt.Value, (Expression)yyVals[0+yyTop], lt.Location);
	  }
  break;
case 449:
#line 3176 "cs-parser.jay"
  {
		yyVal = new CompletionElementInitializer (null, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 450:
#line 3179 "cs-parser.jay"
  {
		CompletionSimpleName csn = yyVals[-1+yyTop] as CompletionSimpleName;
		if (csn == null)
			yyVal = new CollectionElementInitializer ((Expression)yyVals[-1+yyTop]);
		else
			yyVal = new CompletionElementInitializer (csn.Prefix, csn.Location);
	  }
  break;
case 451:
#line 3187 "cs-parser.jay"
  {
		if (yyVals[-1+yyTop] == null)
			yyVal = null;
		else
	  		yyVal = new CollectionElementInitializer ((List<Expression>)yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 452:
#line 3194 "cs-parser.jay"
  {
	  	Report.Error (1920, GetLocation (yyVals[-1+yyTop]), "An element initializer cannot be empty");
		yyVal = null;
	  }
  break;
case 455:
#line 3206 "cs-parser.jay"
  { yyVal = null; }
  break;
case 457:
#line 3212 "cs-parser.jay"
  { 
		Arguments list = new Arguments (4);
		list.Add ((Argument) yyVals[0+yyTop]);
		yyVal = list;
	  }
  break;
case 458:
#line 3218 "cs-parser.jay"
  {
		Arguments list = (Arguments) yyVals[-2+yyTop];
		if (list [list.Count - 1] is NamedArgument)
			Error_NamedArgumentExpected ((NamedArgument) list [list.Count - 1]);
		
		list.Add ((Argument) yyVals[0+yyTop]);
		yyVal = list;
	  }
  break;
case 459:
#line 3227 "cs-parser.jay"
  {
		Arguments list = (Arguments) yyVals[-2+yyTop];
		NamedArgument a = (NamedArgument) yyVals[0+yyTop];
		for (int i = 0; i < list.Count; ++i) {
			NamedArgument na = list [i] as NamedArgument;
			if (na != null && na.Name == a.Name)
				Report.Error (1740, na.Location, "Named argument `{0}' specified multiple times",
					na.Name);
		}
		
		list.Add (a);
		yyVal = list;
	  }
  break;
case 460:
#line 3241 "cs-parser.jay"
  {
	  	Report.Error (839, GetLocation (yyVals[0+yyTop]), "An argument is missing");
	  	yyVal = yyVals[-1+yyTop];
	  }
  break;
case 461:
#line 3246 "cs-parser.jay"
  {
	  	Report.Error (839, GetLocation (yyVals[-1+yyTop]), "An argument is missing");
	  	yyVal = yyVals[-1+yyTop];
	  }
  break;
case 462:
#line 3254 "cs-parser.jay"
  {
		yyVal = new Argument ((Expression) yyVals[0+yyTop]);
	  }
  break;
case 466:
#line 3267 "cs-parser.jay"
  { 
		yyVal = new Argument ((Expression) yyVals[0+yyTop], Argument.AType.Ref);
	  }
  break;
case 467:
#line 3271 "cs-parser.jay"
  { 
		yyVal = new Argument ((Expression) yyVals[0+yyTop], Argument.AType.Out);
	  }
  break;
case 468:
#line 3275 "cs-parser.jay"
  {
		yyVal = new Argument (new Arglist ((Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop])));
	  }
  break;
case 469:
#line 3279 "cs-parser.jay"
  {
		yyVal = new Argument (new Arglist (GetLocation (yyVals[-2+yyTop])));
	  }
  break;
case 470:
#line 3283 "cs-parser.jay"
  {
		yyVal = new Argument (new ArglistAccess (GetLocation (yyVals[0+yyTop])));
	  }
  break;
case 472:
#line 3294 "cs-parser.jay"
  {
		yyVal = new ElementAccess ((Expression) yyVals[-3+yyTop], (Arguments) yyVals[-1+yyTop]);
	  }
  break;
case 473:
#line 3298 "cs-parser.jay"
  {
	  	/* LAMESPEC: Not allowed according to specification*/
		yyVal = new ElementAccess ((Expression) yyVals[-3+yyTop], (Arguments) yyVals[-1+yyTop]);
	  }
  break;
case 474:
#line 3303 "cs-parser.jay"
  {
		/* So the super-trick is that primary_expression*/
		/* can only be either a SimpleName or a MemberAccess. */
		/* The MemberAccess case arises when you have a fully qualified type-name like :*/
		/* Foo.Bar.Blah i;*/
		/* SimpleName is when you have*/
		/* Blah i;*/
		  
		Expression expr = (Expression) yyVals[-1+yyTop];  
		if (expr is ComposedCast){
			yyVal = new ComposedCast ((ComposedCast)expr, (string) yyVals[0+yyTop]);
		} else if (expr is ATypeNameExpression){
			/**/
			/* So we extract the string corresponding to the SimpleName*/
			/* or MemberAccess*/
			/* */
			yyVal = new ComposedCast ((ATypeNameExpression)expr, (string) yyVals[0+yyTop]);
		} else {
			Error_ExpectingTypeName (expr);
			yyVal = TypeManager.system_object_expr;
		}
	  }
  break;
case 475:
#line 3329 "cs-parser.jay"
  {
		var list = new List<Expression> (4);
		list.Add ((Expression) yyVals[0+yyTop]);
		yyVal = list;
	  }
  break;
case 476:
#line 3335 "cs-parser.jay"
  {
		var list = (List<Expression>) yyVals[-2+yyTop];
		list.Add ((Expression) yyVals[0+yyTop]);
		yyVal = list;
	  }
  break;
case 477:
#line 3340 "cs-parser.jay"
  {
	  	Error_SyntaxError (yyToken);
		yyVal = yyVals[-1+yyTop];
	  }
  break;
case 478:
#line 3348 "cs-parser.jay"
  {
		Arguments args = new Arguments (4);
		args.Add ((Argument) yyVals[0+yyTop]);
		yyVal = args;
	  }
  break;
case 479:
#line 3354 "cs-parser.jay"
  {
		Arguments args = (Arguments) yyVals[-2+yyTop];
		args.Add ((Argument) yyVals[0+yyTop]);
		yyVal = args;	  
	  }
  break;
case 480:
#line 3363 "cs-parser.jay"
  {
	  	yyVal = new Argument ((Expression) yyVals[0+yyTop]);
	  }
  break;
case 482:
#line 3371 "cs-parser.jay"
  {
		yyVal = new This (current_block, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 483:
#line 3378 "cs-parser.jay"
  {
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new BaseAccess (lt.Value, (TypeArguments) yyVals[0+yyTop], lt.Location);
	  }
  break;
case 484:
#line 3383 "cs-parser.jay"
  {
		yyVal = new BaseIndexerAccess ((Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
	  }
  break;
case 485:
#line 3387 "cs-parser.jay"
  {
	  	Error_SyntaxError (yyToken);
		yyVal = new BaseAccess (null, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 486:
#line 3395 "cs-parser.jay"
  {
		yyVal = new UnaryMutator (UnaryMutator.Mode.PostIncrement, (Expression) yyVals[-1+yyTop], GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 487:
#line 3402 "cs-parser.jay"
  {
		yyVal = new UnaryMutator (UnaryMutator.Mode.PostDecrement, (Expression) yyVals[-1+yyTop], GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 488:
#line 3409 "cs-parser.jay"
  {
		if (yyVals[0+yyTop] != null) {
			if (RootContext.Version <= LanguageVersion.ISO_2)
				Report.FeatureIsNotAvailable (GetLocation (yyVals[-4+yyTop]), "object initializers");
				
			yyVal = new NewInitialize ((Expression) yyVals[-4+yyTop], (Arguments) yyVals[-2+yyTop], (CollectionOrObjectInitializers) yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
		}
		else
			yyVal = new New ((Expression) yyVals[-4+yyTop], (Arguments) yyVals[-2+yyTop], GetLocation (yyVals[-4+yyTop]));
	  }
  break;
case 489:
#line 3420 "cs-parser.jay"
  {
		if (RootContext.Version <= LanguageVersion.ISO_2)
			Report.FeatureIsNotAvailable (GetLocation (yyVals[-1+yyTop]), "collection initializers");
	  
		yyVal = new NewInitialize ((Expression) yyVals[-1+yyTop], null, (CollectionOrObjectInitializers) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 490:
#line 3432 "cs-parser.jay"
  {
		yyVal = new ArrayCreation ((FullNamedExpression) yyVals[-5+yyTop], (List<Expression>) yyVals[-3+yyTop], (string) yyVals[-1+yyTop], (ArrayInitializer) yyVals[0+yyTop], GetLocation (yyVals[-5+yyTop]));
	  }
  break;
case 491:
#line 3436 "cs-parser.jay"
  {
	  	if (yyVals[0+yyTop] == null)
	  		Report.Error (1586, GetLocation (yyVals[-2+yyTop]), "Array creation must have array size or array initializer");

		yyVal = new ArrayCreation ((FullNamedExpression) yyVals[-2+yyTop], (string) yyVals[-1+yyTop], (ArrayInitializer) yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 492:
#line 3443 "cs-parser.jay"
  {
		if (RootContext.Version <= LanguageVersion.ISO_2)
			Report.FeatureIsNotAvailable (GetLocation (yyVals[-2+yyTop]), "implicitly typed arrays");
	  
		yyVal = new ImplicitlyTypedArrayCreation ((string) yyVals[-1+yyTop], (ArrayInitializer) yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 493:
#line 3450 "cs-parser.jay"
  {
		Report.Error (1526, GetLocation (yyVals[-1+yyTop]), "A new expression requires () or [] after type");
		yyVal = new ArrayCreation ((FullNamedExpression) yyVals[-1+yyTop], "[]", null, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 494:
#line 3458 "cs-parser.jay"
  {
		++lexer.parsing_type;
	  }
  break;
case 495:
#line 3462 "cs-parser.jay"
  {
		--lexer.parsing_type;
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 496:
#line 3470 "cs-parser.jay"
  {
		if (RootContext.MetadataCompatibilityVersion < MetadataVersion.v2)	  
	  		Report.FeatureIsNotSupported (GetLocation (yyVals[-3+yyTop]), "anonymous types");
	  	else if (RootContext.Version <= LanguageVersion.ISO_2)
	  		Report.FeatureIsNotAvailable (GetLocation (yyVals[-3+yyTop]), "anonymous types");

		yyVal = new NewAnonymousType ((List<AnonymousTypeParameter>) yyVals[-1+yyTop], current_container, GetLocation (yyVals[-3+yyTop]));
	  }
  break;
case 499:
#line 3486 "cs-parser.jay"
  { yyVal = null; }
  break;
case 501:
#line 3492 "cs-parser.jay"
  {
	  	var a = new List<AnonymousTypeParameter> (4);
	  	a.Add ((AnonymousTypeParameter) yyVals[0+yyTop]);
	  	yyVal = a;
	  }
  break;
case 502:
#line 3498 "cs-parser.jay"
  {
	  	var a = (List<AnonymousTypeParameter>) yyVals[-2+yyTop];
	  	a.Add ((AnonymousTypeParameter) yyVals[0+yyTop]);
	  	yyVal = a;
	  }
  break;
case 503:
#line 3507 "cs-parser.jay"
  {
		var lt = (Tokenizer.LocatedToken)yyVals[-2+yyTop];
	  	yyVal = new AnonymousTypeParameter ((Expression)yyVals[0+yyTop], lt.Value, lt.Location);
	  }
  break;
case 504:
#line 3512 "cs-parser.jay"
  {
		var lt = (Tokenizer.LocatedToken)yyVals[0+yyTop];
	  	yyVal = new AnonymousTypeParameter (new SimpleName (lt.Value, lt.Location),
	  		lt.Value, lt.Location);
	  }
  break;
case 505:
#line 3518 "cs-parser.jay"
  {
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		BaseAccess ba = new BaseAccess (lt.Value, (TypeArguments) yyVals[0+yyTop], lt.Location);
	  	yyVal = new AnonymousTypeParameter (ba, lt.Value, lt.Location);		
	  }
  break;
case 506:
#line 3524 "cs-parser.jay"
  {
	  	MemberAccess ma = (MemberAccess) yyVals[0+yyTop];
	  	yyVal = new AnonymousTypeParameter (ma, ma.Name, ma.Location);
	  }
  break;
case 507:
#line 3529 "cs-parser.jay"
  {
		Report.Error (746, lexer.Location,
			"Invalid anonymous type member declarator. Anonymous type members must be a member assignment, simple name or member access expression");
		yyVal = null;
	  }
  break;
case 508:
#line 3538 "cs-parser.jay"
  {
		yyVal = "";
	  }
  break;
case 509:
#line 3542 "cs-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 510:
#line 3549 "cs-parser.jay"
  {
		if (yyVals[0+yyTop] != null)
			yyVal = "?";
		else
			yyVal = string.Empty;
	  }
  break;
case 511:
#line 3556 "cs-parser.jay"
  {
		if (yyVals[-1+yyTop] != null)
			yyVal = "?" + (string) yyVals[0+yyTop];
		else
			yyVal = yyVals[0+yyTop];
	  }
  break;
case 513:
#line 3567 "cs-parser.jay"
  {
		yyVal = (string) yyVals[-1+yyTop] + (string) yyVals[0+yyTop];
	  }
  break;
case 514:
#line 3574 "cs-parser.jay"
  {
		yyVal = "[]";
	  }
  break;
case 515:
#line 3578 "cs-parser.jay"
  {
		yyVal = "[" + (string) yyVals[-1+yyTop] + "]";
	  }
  break;
case 516:
#line 3582 "cs-parser.jay"
  {
	  	Error_SyntaxError (178, yyToken, "Invalid rank specifier");
		yyVal = "[]";
	  }
  break;
case 517:
#line 3590 "cs-parser.jay"
  {
		yyVal = ",";
	  }
  break;
case 518:
#line 3594 "cs-parser.jay"
  {
		yyVal = (string) yyVals[-1+yyTop] + ",";
	  }
  break;
case 519:
#line 3601 "cs-parser.jay"
  {
		yyVal = null;
	  }
  break;
case 520:
#line 3605 "cs-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 521:
#line 3612 "cs-parser.jay"
  {
		yyVal = new ArrayInitializer (0, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 522:
#line 3616 "cs-parser.jay"
  {
		yyVal = new ArrayInitializer ((List<Expression>) yyVals[-2+yyTop], GetLocation (yyVals[-3+yyTop]));
	  }
  break;
case 523:
#line 3623 "cs-parser.jay"
  {
		var list = new List<Expression> (4);
		list.Add ((Expression) yyVals[0+yyTop]);
		yyVal = list;
	  }
  break;
case 524:
#line 3629 "cs-parser.jay"
  {
		var list = (List<Expression>) yyVals[-2+yyTop];
		list.Add ((Expression) yyVals[0+yyTop]);
		yyVal = list;
	  }
  break;
case 525:
#line 3635 "cs-parser.jay"
  {
	  	Error_SyntaxError (yyToken);
	  	yyVal = new List<Expression> ();
	  }
  break;
case 526:
#line 3643 "cs-parser.jay"
  {
	  	lexer.TypeOfParsing = true;
	  }
  break;
case 527:
#line 3647 "cs-parser.jay"
  {
	  	lexer.TypeOfParsing = false;
		Expression type = (Expression)yyVals[-1+yyTop];
		if (type == TypeManager.system_void_expr)
			yyVal = new TypeOfVoid (GetLocation (yyVals[-4+yyTop]));
		else
			yyVal = new TypeOf (type, GetLocation (yyVals[-4+yyTop]));
	  }
  break;
case 530:
#line 3661 "cs-parser.jay"
  {
	 	Error_TypeExpected (lexer.Location);
	 	yyVal = null;
	 }
  break;
case 531:
#line 3669 "cs-parser.jay"
  {  
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];

		yyVal = new SimpleName (lt.Value, (int) yyVals[0+yyTop], lt.Location);
	  }
  break;
case 532:
#line 3675 "cs-parser.jay"
  {
		var lt1 = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		var lt2 = (Tokenizer.LocatedToken) yyVals[-1+yyTop];

		yyVal = new QualifiedAliasMember (lt1.Value, lt2.Value, (int) yyVals[0+yyTop], lt1.Location);
	  }
  break;
case 533:
#line 3682 "cs-parser.jay"
  {
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		
		yyVal = new MemberAccess ((Expression) yyVals[-2+yyTop], lt.Value, lt.Location);		
	  }
  break;
case 534:
#line 3688 "cs-parser.jay"
  {
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		
		yyVal = new MemberAccess ((Expression) yyVals[-3+yyTop], lt.Value, (int) yyVals[0+yyTop], lt.Location);		
	  }
  break;
case 535:
#line 3694 "cs-parser.jay"
  {
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		MemberName name = (MemberName) yyVals[-3+yyTop];

		yyVal = new MemberAccess (name.GetTypeExpression (), lt.Value, (int) yyVals[0+yyTop], lt.Location);		
	  }
  break;
case 536:
#line 3704 "cs-parser.jay"
  {
		if (RootContext.MetadataCompatibilityVersion < MetadataVersion.v2)	  
	  		Report.FeatureIsNotSupported (GetLocation (yyVals[0+yyTop]), "generics");
		else if (RootContext.Version < LanguageVersion.ISO_2)
			Report.FeatureIsNotAvailable (GetLocation (yyVals[0+yyTop]), "generics");

		yyVal = yyVals[0+yyTop];
	  }
  break;
case 537:
#line 3716 "cs-parser.jay"
  {
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		if (RootContext.Version == LanguageVersion.ISO_1)
			Report.FeatureIsNotAvailable (lt.Location, "namespace alias qualifier");

		yyVal = lt;		
	  }
  break;
case 538:
#line 3726 "cs-parser.jay"
  { 
		yyVal = new SizeOf ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
	  }
  break;
case 539:
#line 3733 "cs-parser.jay"
  {
		yyVal = new CheckedExpr ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
	  }
  break;
case 540:
#line 3740 "cs-parser.jay"
  {
		yyVal = new UnCheckedExpr ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
	  }
  break;
case 541:
#line 3747 "cs-parser.jay"
  {
		Expression deref;
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];

		deref = new Indirection ((Expression) yyVals[-2+yyTop], lt.Location);
		yyVal = new MemberAccess (deref, lt.Value);
	  }
  break;
case 542:
#line 3758 "cs-parser.jay"
  {
		start_anonymous (false, (ParametersCompiled) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 543:
#line 3762 "cs-parser.jay"
  {
		yyVal = end_anonymous ((ToplevelBlock) yyVals[0+yyTop]);
	}
  break;
case 544:
#line 3769 "cs-parser.jay"
  {
		yyVal = ParametersCompiled.Undefined;
	  }
  break;
case 546:
#line 3777 "cs-parser.jay"
  {
	  	valid_param_mod = ParameterModifierType.Ref | ParameterModifierType.Out;
	  }
  break;
case 547:
#line 3781 "cs-parser.jay"
  {
		valid_param_mod = 0;
	  	yyVal = yyVals[-1+yyTop];
	  }
  break;
case 548:
#line 3789 "cs-parser.jay"
  {
		if (RootContext.Version < LanguageVersion.ISO_2)
			Report.FeatureIsNotAvailable (GetLocation (yyVals[-3+yyTop]), "default value expression");

		yyVal = new DefaultValueExpression ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
	  }
  break;
case 550:
#line 3800 "cs-parser.jay"
  {
		yyVal = new Unary (Unary.Operator.LogicalNot, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 551:
#line 3804 "cs-parser.jay"
  {
		yyVal = new Unary (Unary.Operator.OnesComplement, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 553:
#line 3812 "cs-parser.jay"
  {
		yyVal = new Cast ((FullNamedExpression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-3+yyTop]));
	  }
  break;
case 554:
#line 3816 "cs-parser.jay"
  {
		yyVal = new Cast ((FullNamedExpression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-3+yyTop]));
	  }
  break;
case 556:
#line 3828 "cs-parser.jay"
  { 
	  	yyVal = new Unary (Unary.Operator.UnaryPlus, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 557:
#line 3832 "cs-parser.jay"
  { 
		yyVal = new Unary (Unary.Operator.UnaryNegation, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 558:
#line 3836 "cs-parser.jay"
  {
		yyVal = new UnaryMutator (UnaryMutator.Mode.PreIncrement, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 559:
#line 3840 "cs-parser.jay"
  {
		yyVal = new UnaryMutator (UnaryMutator.Mode.PreDecrement, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 560:
#line 3844 "cs-parser.jay"
  {
		yyVal = new Indirection ((Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 561:
#line 3848 "cs-parser.jay"
  {
		yyVal = new Unary (Unary.Operator.AddressOf, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 563:
#line 3856 "cs-parser.jay"
  {
		yyVal = new Binary (Binary.Operator.Multiply, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 564:
#line 3861 "cs-parser.jay"
  {
		yyVal = new Binary (Binary.Operator.Division, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 565:
#line 3866 "cs-parser.jay"
  {
		yyVal = new Binary (Binary.Operator.Modulus, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 567:
#line 3875 "cs-parser.jay"
  {
		yyVal = new Binary (Binary.Operator.Addition, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 568:
#line 3880 "cs-parser.jay"
  {
		yyVal = new Binary (Binary.Operator.Subtraction, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 569:
#line 3884 "cs-parser.jay"
  {
	  	/* Shift/Reduce conflict*/
		yyVal = new Binary (Binary.Operator.Subtraction, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
  	  }
  break;
case 570:
#line 3889 "cs-parser.jay"
  {
		yyVal = new As ((Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 571:
#line 3893 "cs-parser.jay"
  {
		yyVal = new Is ((Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 573:
#line 3901 "cs-parser.jay"
  {
		yyVal = new Binary (Binary.Operator.LeftShift, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 574:
#line 3906 "cs-parser.jay"
  {
		yyVal = new Binary (Binary.Operator.RightShift, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 576:
#line 3915 "cs-parser.jay"
  {
		yyVal = new Binary (Binary.Operator.LessThan, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 577:
#line 3920 "cs-parser.jay"
  {
		yyVal = new Binary (Binary.Operator.GreaterThan, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 578:
#line 3925 "cs-parser.jay"
  {
		yyVal = new Binary (Binary.Operator.LessThanOrEqual, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 579:
#line 3930 "cs-parser.jay"
  {
		yyVal = new Binary (Binary.Operator.GreaterThanOrEqual, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 581:
#line 3939 "cs-parser.jay"
  {
		yyVal = new Binary (Binary.Operator.Equality, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 582:
#line 3944 "cs-parser.jay"
  {
		yyVal = new Binary (Binary.Operator.Inequality, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 584:
#line 3953 "cs-parser.jay"
  {
		yyVal = new Binary (Binary.Operator.BitwiseAnd, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 586:
#line 3962 "cs-parser.jay"
  {
		yyVal = new Binary (Binary.Operator.ExclusiveOr, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 588:
#line 3971 "cs-parser.jay"
  {
		yyVal = new Binary (Binary.Operator.BitwiseOr, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 590:
#line 3980 "cs-parser.jay"
  {
		yyVal = new Binary (Binary.Operator.LogicalAnd, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 592:
#line 3989 "cs-parser.jay"
  {
		yyVal = new Binary (Binary.Operator.LogicalOr, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 594:
#line 3998 "cs-parser.jay"
  {
		if (RootContext.Version < LanguageVersion.ISO_2)
			Report.FeatureIsNotAvailable (GetLocation (yyVals[-1+yyTop]), "null coalescing operator");
			
		yyVal = new Nullable.NullCoalescingOperator ((Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 596:
#line 4009 "cs-parser.jay"
  {
		yyVal = new Conditional (new BooleanExpression ((Expression) yyVals[-4+yyTop]), (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
	  }
  break;
case 597:
#line 4016 "cs-parser.jay"
  {
		yyVal = new SimpleAssign ((Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
	  }
  break;
case 598:
#line 4020 "cs-parser.jay"
  {
		yyVal = new CompoundAssign (
			Binary.Operator.Multiply, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
	  }
  break;
case 599:
#line 4025 "cs-parser.jay"
  {
		yyVal = new CompoundAssign (
			Binary.Operator.Division, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
	  }
  break;
case 600:
#line 4030 "cs-parser.jay"
  {
		yyVal = new CompoundAssign (
			Binary.Operator.Modulus, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
	  }
  break;
case 601:
#line 4035 "cs-parser.jay"
  {
		yyVal = new CompoundAssign (
			Binary.Operator.Addition, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
	  }
  break;
case 602:
#line 4040 "cs-parser.jay"
  {
		yyVal = new CompoundAssign (
			Binary.Operator.Subtraction, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
	  }
  break;
case 603:
#line 4045 "cs-parser.jay"
  {
		yyVal = new CompoundAssign (
			Binary.Operator.LeftShift, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
	  }
  break;
case 604:
#line 4050 "cs-parser.jay"
  {
		yyVal = new CompoundAssign (
			Binary.Operator.RightShift, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
	  }
  break;
case 605:
#line 4055 "cs-parser.jay"
  {
		yyVal = new CompoundAssign (
			Binary.Operator.BitwiseAnd, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
	  }
  break;
case 606:
#line 4060 "cs-parser.jay"
  {
		yyVal = new CompoundAssign (
			Binary.Operator.BitwiseOr, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
	  }
  break;
case 607:
#line 4065 "cs-parser.jay"
  {
		yyVal = new CompoundAssign (
			Binary.Operator.ExclusiveOr, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
	  }
  break;
case 608:
#line 4073 "cs-parser.jay"
  {
		var pars = new List<Parameter> (4);
		pars.Add ((Parameter) yyVals[0+yyTop]);

		yyVal = pars;
	  }
  break;
case 609:
#line 4080 "cs-parser.jay"
  {
		var pars = (List<Parameter>) yyVals[-2+yyTop];
		Parameter p = (Parameter)yyVals[0+yyTop];
		if (pars[0].GetType () != p.GetType ()) {
			Report.Error (748, p.Location, "All lambda parameters must be typed either explicitly or implicitly");
		}
		
		pars.Add (p);
		yyVal = pars;
	  }
  break;
case 610:
#line 4094 "cs-parser.jay"
  {
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];

		yyVal = new Parameter ((FullNamedExpression) yyVals[-1+yyTop], lt.Value, (Parameter.Modifier) yyVals[-2+yyTop], null, lt.Location);
	  }
  break;
case 611:
#line 4100 "cs-parser.jay"
  {
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];

		yyVal = new Parameter ((FullNamedExpression) yyVals[-1+yyTop], lt.Value, Parameter.Modifier.NONE, null, lt.Location);
	  }
  break;
case 612:
#line 4106 "cs-parser.jay"
  {
	  	var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		yyVal = new ImplicitLambdaParameter (lt.Value, lt.Location);
	  }
  break;
case 613:
#line 4113 "cs-parser.jay"
  { yyVal = ParametersCompiled.EmptyReadOnlyParameters; }
  break;
case 614:
#line 4114 "cs-parser.jay"
  { 
		var pars_list = (List<Parameter>) yyVals[0+yyTop];
		yyVal = new ParametersCompiled (compiler, pars_list.ToArray ());
	  }
  break;
case 615:
#line 4121 "cs-parser.jay"
  {
		start_block (lexer.Location);
	  }
  break;
case 616:
#line 4125 "cs-parser.jay"
  {
		Block b = end_block (lexer.Location);
		b.AddStatement (new ContextualReturn ((Expression) yyVals[0+yyTop]));
		yyVal = b;
	  }
  break;
case 617:
#line 4130 "cs-parser.jay"
  { 
	  	yyVal = yyVals[0+yyTop]; 
	  }
  break;
case 618:
#line 4137 "cs-parser.jay"
  {
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		Parameter p = new ImplicitLambdaParameter (lt.Value, lt.Location);
		start_anonymous (true, new ParametersCompiled (compiler, p), GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 619:
#line 4143 "cs-parser.jay"
  {
		yyVal = end_anonymous ((ToplevelBlock) yyVals[0+yyTop]);
	  }
  break;
case 620:
#line 4147 "cs-parser.jay"
  {
		if (RootContext.Version <= LanguageVersion.ISO_2)
			Report.FeatureIsNotAvailable (GetLocation (yyVals[0+yyTop]), "lambda expressions");
	  
	  	valid_param_mod = ParameterModifierType.Ref | ParameterModifierType.Out;
	  }
  break;
case 621:
#line 4154 "cs-parser.jay"
  {
	  	valid_param_mod = 0;
		start_anonymous (true, (ParametersCompiled) yyVals[-2+yyTop], GetLocation (yyVals[-4+yyTop]));
	  }
  break;
case 622:
#line 4159 "cs-parser.jay"
  {
		yyVal = end_anonymous ((ToplevelBlock) yyVals[0+yyTop]);
	  }
  break;
case 629:
#line 4181 "cs-parser.jay"
  {
		yyVal = new BooleanExpression ((Expression) yyVals[0+yyTop]);
	  }
  break;
case 630:
#line 4194 "cs-parser.jay"
  {
		lexer.ConstraintsParsing = true;
	  }
  break;
case 631:
#line 4198 "cs-parser.jay"
  {
		MemberName name = MakeName ((MemberName) yyVals[0+yyTop]);
		push_current_class (new Class (current_namespace, current_class, name, (Modifiers) yyVals[-4+yyTop], (Attributes) yyVals[-5+yyTop]), yyVals[-3+yyTop]);
	  }
  break;
case 632:
#line 4204 "cs-parser.jay"
  {
		lexer.ConstraintsParsing = false;

		current_class.SetParameterInfo ((List<Constraints>) yyVals[0+yyTop]);

		if (RootContext.Documentation != null) {
			current_container.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
	  }
  break;
case 633:
#line 4215 "cs-parser.jay"
  {
		--lexer.parsing_declaration;	  
		if (RootContext.Documentation != null)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }
  break;
case 634:
#line 4221 "cs-parser.jay"
  {
		yyVal = pop_current_class ();
	  }
  break;
case 635:
#line 4228 "cs-parser.jay"
  { yyVal = null; }
  break;
case 636:
#line 4230 "cs-parser.jay"
  { yyVal = yyVals[0+yyTop]; }
  break;
case 637:
#line 4234 "cs-parser.jay"
  { yyVal = (int) 0; }
  break;
case 640:
#line 4241 "cs-parser.jay"
  { 
		var m1 = (Modifiers) yyVals[-1+yyTop];
		var m2 = (Modifiers) yyVals[0+yyTop];

		if ((m1 & m2) != 0) {
			Location l = lexer.Location;
			Report.Error (1004, l, "Duplicate `{0}' modifier", ModifiersExtensions.Name (m2));
		}
		yyVal = m1 | m2;
	  }
  break;
case 641:
#line 4255 "cs-parser.jay"
  {
		yyVal = Modifiers.NEW;
		if (current_container == RootContext.ToplevelTypes)
			Report.Error (1530, GetLocation (yyVals[0+yyTop]), "Keyword `new' is not allowed on namespace elements");
	  }
  break;
case 642:
#line 4260 "cs-parser.jay"
  { yyVal = Modifiers.PUBLIC; }
  break;
case 643:
#line 4261 "cs-parser.jay"
  { yyVal = Modifiers.PROTECTED; }
  break;
case 644:
#line 4262 "cs-parser.jay"
  { yyVal = Modifiers.INTERNAL; }
  break;
case 645:
#line 4263 "cs-parser.jay"
  { yyVal = Modifiers.PRIVATE; }
  break;
case 646:
#line 4264 "cs-parser.jay"
  { yyVal = Modifiers.ABSTRACT; }
  break;
case 647:
#line 4265 "cs-parser.jay"
  { yyVal = Modifiers.SEALED; }
  break;
case 648:
#line 4266 "cs-parser.jay"
  { yyVal = Modifiers.STATIC; }
  break;
case 649:
#line 4267 "cs-parser.jay"
  { yyVal = Modifiers.READONLY; }
  break;
case 650:
#line 4268 "cs-parser.jay"
  { yyVal = Modifiers.VIRTUAL; }
  break;
case 651:
#line 4269 "cs-parser.jay"
  { yyVal = Modifiers.OVERRIDE; }
  break;
case 652:
#line 4270 "cs-parser.jay"
  { yyVal = Modifiers.EXTERN; }
  break;
case 653:
#line 4271 "cs-parser.jay"
  { yyVal = Modifiers.VOLATILE; }
  break;
case 654:
#line 4272 "cs-parser.jay"
  { yyVal = Modifiers.UNSAFE; }
  break;
case 657:
#line 4282 "cs-parser.jay"
  {
		current_container.AddBasesForPart (current_class, (List<FullNamedExpression>) yyVals[0+yyTop]);
	 }
  break;
case 658:
#line 4288 "cs-parser.jay"
  { yyVal = null; }
  break;
case 659:
#line 4290 "cs-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 660:
#line 4297 "cs-parser.jay"
  {
		var constraints = new List<Constraints> (1);
		constraints.Add ((Constraints) yyVals[0+yyTop]);
		yyVal = constraints;
	  }
  break;
case 661:
#line 4303 "cs-parser.jay"
  {
		var constraints = (List<Constraints>) yyVals[-1+yyTop];
		Constraints new_constraint = (Constraints)yyVals[0+yyTop];

		foreach (Constraints c in constraints) {
			if (new_constraint.TypeParameter.Value == c.TypeParameter.Value) {
				Report.Error (409, new_constraint.Location,
					"A constraint clause has already been specified for type parameter `{0}'",
					new_constraint.TypeParameter.Value);
			}
		}

		constraints.Add (new_constraint);
		yyVal = constraints;
	  }
  break;
case 662:
#line 4322 "cs-parser.jay"
  {
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		yyVal = new Constraints (new SimpleMemberName (lt.Value, lt.Location), (List<FullNamedExpression>) yyVals[0+yyTop], GetLocation (yyVals[-3+yyTop]));
	  }
  break;
case 663:
#line 4330 "cs-parser.jay"
  {
		var constraints = new List<FullNamedExpression> (1);
		constraints.Add ((FullNamedExpression) yyVals[0+yyTop]);
		yyVal = constraints;
	  }
  break;
case 664:
#line 4336 "cs-parser.jay"
  {
		var constraints = (List<FullNamedExpression>) yyVals[-2+yyTop];
		var prev = constraints [constraints.Count - 1] as SpecialContraintExpr;
		if (prev != null && (prev.Constraint & SpecialConstraint.Constructor) != 0) {			
			Report.Error (401, GetLocation (yyVals[-1+yyTop]), "The `new()' constraint must be the last constraint specified");
		}
		
		prev = yyVals[0+yyTop] as SpecialContraintExpr;
		if (prev != null) {
			if ((prev.Constraint & (SpecialConstraint.Class | SpecialConstraint.Struct)) != 0) {
				Report.Error (449, prev.Location, "The `class' or `struct' constraint must be the first constraint specified");			
			} else {
			 	prev = constraints [0] as SpecialContraintExpr;
			 	if (prev != null && (prev.Constraint & SpecialConstraint.Struct) != 0) {			
					Report.Error (451, GetLocation (yyVals[0+yyTop]), "The `new()' constraint cannot be used with the `struct' constraint");
				}
			}
		}

		constraints.Add ((FullNamedExpression) yyVals[0+yyTop]);
		yyVal = constraints;
	  }
  break;
case 665:
#line 4362 "cs-parser.jay"
  {
		if (yyVals[0+yyTop] is ComposedCast)
			Report.Error (706, GetLocation (yyVals[0+yyTop]), "Invalid constraint type `{0}'", ((ComposedCast)yyVals[0+yyTop]).GetSignatureForError ());
	  
	  	yyVal = yyVals[0+yyTop];
	  }
  break;
case 666:
#line 4369 "cs-parser.jay"
  {
		yyVal = new SpecialContraintExpr (SpecialConstraint.Constructor, GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 667:
#line 4373 "cs-parser.jay"
  {
		yyVal = new SpecialContraintExpr (SpecialConstraint.Class, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 668:
#line 4377 "cs-parser.jay"
  {
		yyVal = new SpecialContraintExpr (SpecialConstraint.Struct, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 669:
#line 4384 "cs-parser.jay"
  {
		yyVal = Variance.None;
	  }
  break;
case 670:
#line 4388 "cs-parser.jay"
  {
		if (RootContext.MetadataCompatibilityVersion < MetadataVersion.v2)	  
	  		Report.FeatureIsNotSupported (lexer.Location, "generic type variance");
		else if (RootContext.Version <= LanguageVersion.V_3)
			Report.FeatureIsNotAvailable (lexer.Location, "generic type variance");

		yyVal = yyVals[0+yyTop];
	  }
  break;
case 671:
#line 4400 "cs-parser.jay"
  {
		yyVal = Variance.Covariant;
	  }
  break;
case 672:
#line 4404 "cs-parser.jay"
  {
		yyVal = Variance.Contravariant;
	  }
  break;
case 673:
#line 4424 "cs-parser.jay"
  {
		++lexer.parsing_block;
		start_block (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 674:
#line 4429 "cs-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 675:
#line 4436 "cs-parser.jay"
  {
	 	--lexer.parsing_block;
		yyVal = end_block (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 676:
#line 4441 "cs-parser.jay"
  {
	 	--lexer.parsing_block;
		yyVal = end_block (lexer.Location);
	  }
  break;
case 677:
#line 4450 "cs-parser.jay"
  {
		++lexer.parsing_block;
		current_block.StartLocation = GetLocation (yyVals[0+yyTop]);
	  }
  break;
case 678:
#line 4455 "cs-parser.jay"
  {
		--lexer.parsing_block;
		yyVal = end_block (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 683:
#line 4473 "cs-parser.jay"
  {
		if (yyVals[0+yyTop] != null && (Block) yyVals[0+yyTop] != current_block){
			current_block.AddStatement ((Statement) yyVals[0+yyTop]);
			current_block = (Block) yyVals[0+yyTop];
		}
	  }
  break;
case 684:
#line 4480 "cs-parser.jay"
  {
		current_block.AddStatement ((Statement) yyVals[0+yyTop]);
	  }
  break;
case 688:
#line 4499 "cs-parser.jay"
  {
		if (yyVals[0+yyTop] != null && (Block) yyVals[0+yyTop] != current_block){
			current_block.AddStatement ((Statement) yyVals[0+yyTop]);
			current_block = (Block) yyVals[0+yyTop];
		}
	  }
  break;
case 689:
#line 4506 "cs-parser.jay"
  {
		current_block.AddStatement ((Statement) yyVals[0+yyTop]);
	  }
  break;
case 718:
#line 4547 "cs-parser.jay"
  {
		  Report.Error (1023, GetLocation (yyVals[0+yyTop]), "An embedded statement may not be a declaration or labeled statement");
		  yyVal = null;
	  }
  break;
case 719:
#line 4552 "cs-parser.jay"
  {
		  Report.Error (1023, GetLocation (yyVals[0+yyTop]), "An embedded statement may not be a declaration or labeled statement");
		  yyVal = null;
	  }
  break;
case 720:
#line 4560 "cs-parser.jay"
  {
		yyVal = new EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 721:
#line 4567 "cs-parser.jay"
  {
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		LabeledStatement labeled = new LabeledStatement (lt.Value, lt.Location);

		if (current_block.AddLabel (labeled))
			current_block.AddStatement (labeled);
	  }
  break;
case 723:
#line 4579 "cs-parser.jay"
  {
		if (yyVals[-1+yyTop] != null){
			var de = (Tuple<FullNamedExpression, List<object>>) yyVals[-1+yyTop];
			yyVal = declare_local_variables (de.Item1, de.Item2, de.Item1.Location);
		}
	  }
  break;
case 724:
#line 4587 "cs-parser.jay"
  {
		if (yyVals[-1+yyTop] != null){
			var de = (Tuple<FullNamedExpression, List<object>>) yyVals[-1+yyTop];

			yyVal = declare_local_constants (de.Item1, de.Item2);
		}
	  }
  break;
case 725:
#line 4604 "cs-parser.jay"
  { 
		/* FIXME: Do something smart here regarding the composition of the type.*/

		/* Ok, the above "primary_expression" is there to get rid of*/
		/* both reduce/reduce and shift/reduces in the grammar, it should*/
		/* really just be "type_name".  If you use type_name, a reduce/reduce*/
		/* creeps up.  If you use namespace_or_type_name (which is all we need*/
		/* really) two shift/reduces appear.*/
		/* */

		/* So the super-trick is that primary_expression*/
		/* can only be either a SimpleName or a MemberAccess. */
		/* The MemberAccess case arises when you have a fully qualified type-name like :*/
		/* Foo.Bar.Blah i;*/
		/* SimpleName is when you have*/
		/* Blah i;*/
		
		Expression expr = (Expression) yyVals[-1+yyTop];
		string rank_or_nullable = (string) yyVals[0+yyTop];
		
		if (expr is ComposedCast){
			yyVal = new ComposedCast ((ComposedCast)expr, rank_or_nullable);
		} else if (expr is ATypeNameExpression){
			/**/
			/* So we extract the string corresponding to the SimpleName*/
			/* or MemberAccess*/
			/**/
			if (rank_or_nullable.Length == 0) {
				SimpleName sn = expr as SimpleName;
				if (sn != null && sn.Name == "var")
					yyVal = new VarExpr (sn.Location);
				else
					yyVal = yyVals[-1+yyTop];
			} else {
				yyVal = new ComposedCast ((ATypeNameExpression)expr, rank_or_nullable);
			}
		} else {
			Error_ExpectingTypeName (expr);
			yyVal = TypeManager.system_object_expr;
		}
	  }
  break;
case 726:
#line 4646 "cs-parser.jay"
  {
		if ((string) yyVals[0+yyTop] == "")
			yyVal = yyVals[-1+yyTop];
		else
			yyVal = new ComposedCast ((FullNamedExpression) yyVals[-1+yyTop], (string) yyVals[0+yyTop], lexer.Location);
	  }
  break;
case 727:
#line 4653 "cs-parser.jay"
  {
		Expression.Error_VoidInvalidInTheContext (GetLocation (yyVals[-1+yyTop]), Report);
		yyVal = TypeManager.system_void_expr;
	  }
  break;
case 728:
#line 4661 "cs-parser.jay"
  {
		ATypeNameExpression expr = yyVals[-1+yyTop] as ATypeNameExpression;

		if (expr != null) {
			yyVal = new ComposedCast (expr, "*");
		} else {
			Error_ExpectingTypeName ((Expression)yyVals[-1+yyTop]);
			yyVal = expr;
		}
	  }
  break;
case 729:
#line 4672 "cs-parser.jay"
  {
		yyVal = new ComposedCast ((FullNamedExpression) yyVals[-1+yyTop], "*", GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 730:
#line 4676 "cs-parser.jay"
  {
		yyVal = new ComposedCast (TypeManager.system_void_expr, "*", GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 731:
#line 4680 "cs-parser.jay"
  {
		yyVal = new ComposedCast ((FullNamedExpression) yyVals[-1+yyTop], "*");
	  }
  break;
case 733:
#line 4688 "cs-parser.jay"
  {
		if (yyVals[-1+yyTop] != null){
			string rank = (string)yyVals[0+yyTop];

			if (rank == "")
				yyVal = yyVals[-1+yyTop];
			else
				yyVal = new ComposedCast ((FullNamedExpression) yyVals[-1+yyTop], rank);
		} else {
			yyVal = null;
		}
	  }
  break;
case 734:
#line 4704 "cs-parser.jay"
  {
		if (yyVals[-1+yyTop] != null) {
			VarExpr ve = yyVals[-1+yyTop] as VarExpr;
			if (ve != null) {
				if (!((VariableDeclaration) ((List<object>)yyVals[0+yyTop]) [0]).HasInitializer)
					ve.VariableInitializersCount = 0;
				else
					ve.VariableInitializersCount = ((List<object>)yyVals[0+yyTop]).Count;
			}
				
			yyVal = new Tuple<FullNamedExpression, List<object>> ((FullNamedExpression) yyVals[-1+yyTop], (List<object>) yyVals[0+yyTop]);
		} else
			yyVal = null;
	  }
  break;
case 735:
#line 4722 "cs-parser.jay"
  {
		if (yyVals[-1+yyTop] != null)
			yyVal = new Tuple<FullNamedExpression, List<object>> ((FullNamedExpression) yyVals[-1+yyTop], (List<object>) yyVals[0+yyTop]);
		else
			yyVal = null;
	  }
  break;
case 736:
#line 4731 "cs-parser.jay"
  { yyVal = yyVals[-1+yyTop]; }
  break;
case 737:
#line 4732 "cs-parser.jay"
  { yyVal = yyVals[-1+yyTop]; }
  break;
case 738:
#line 4736 "cs-parser.jay"
  { yyVal = yyVals[-1+yyTop]; }
  break;
case 739:
#line 4737 "cs-parser.jay"
  { yyVal = yyVals[-1+yyTop]; }
  break;
case 740:
#line 4746 "cs-parser.jay"
  {
		ExpressionStatement s = yyVals[0+yyTop] as ExpressionStatement;
		if (s == null) {
			Expression.Error_InvalidExpressionStatement (Report, GetLocation (yyVals[0+yyTop]));
			s = EmptyExpressionStatement.Instance;
		}

		yyVal = new StatementExpression (s);
	  }
  break;
case 741:
#line 4756 "cs-parser.jay"
  {
		Error_SyntaxError (yyToken);
		yyVal = null;
	  }
  break;
case 742:
#line 4764 "cs-parser.jay"
  {
		Expression expr = (Expression) yyVals[0+yyTop];
		ExpressionStatement s;

	        s = new OptionalAssign (new SimpleName ("$retval", lexer.Location), expr, lexer.Location);
		yyVal = new StatementExpression (s);
	  }
  break;
case 743:
#line 4772 "cs-parser.jay"
  {
		Error_SyntaxError (yyToken);
		yyVal = new EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 746:
#line 4786 "cs-parser.jay"
  { 
		if (yyVals[0+yyTop] is EmptyStatement)
			Report.Warning (642, 3, GetLocation (yyVals[0+yyTop]), "Possible mistaken empty statement");
		
		yyVal = new If ((BooleanExpression) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
	  }
  break;
case 747:
#line 4794 "cs-parser.jay"
  {
		yyVal = new If ((BooleanExpression) yyVals[-4+yyTop], (Statement) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-6+yyTop]));

		if (yyVals[-2+yyTop] is EmptyStatement)
			Report.Warning (642, 3, GetLocation (yyVals[-2+yyTop]), "Possible mistaken empty statement");
		if (yyVals[0+yyTop] is EmptyStatement)
			Report.Warning (642, 3, GetLocation (yyVals[0+yyTop]), "Possible mistaken empty statement");
	  }
  break;
case 748:
#line 4806 "cs-parser.jay"
  { 
		if (switch_stack == null)
			switch_stack = new Stack<Block> (2);
		switch_stack.Push (current_block);
	  }
  break;
case 749:
#line 4813 "cs-parser.jay"
  {
		yyVal = new Switch ((Expression) yyVals[-2+yyTop], (List<SwitchSection>) yyVals[0+yyTop], GetLocation (yyVals[-5+yyTop]));
		current_block = (Block) switch_stack.Pop ();
	  }
  break;
case 750:
#line 4823 "cs-parser.jay"
  {
		yyVal = yyVals[-1+yyTop];
	  }
  break;
case 751:
#line 4830 "cs-parser.jay"
  {
	  	Report.Warning (1522, 1, lexer.Location, "Empty switch block"); 
		yyVal = new List<SwitchSection> ();
	  }
  break;
case 753:
#line 4839 "cs-parser.jay"
  {
		var sections = new List<SwitchSection> (4);

		sections.Add ((SwitchSection) yyVals[0+yyTop]);
		yyVal = sections;
	  }
  break;
case 754:
#line 4846 "cs-parser.jay"
  {
		var sections = (List<SwitchSection>) yyVals[-1+yyTop];

		sections.Add ((SwitchSection) yyVals[0+yyTop]);
		yyVal = sections;
	  }
  break;
case 755:
#line 4856 "cs-parser.jay"
  {
		current_block = current_block.CreateSwitchBlock (lexer.Location);
	  }
  break;
case 756:
#line 4860 "cs-parser.jay"
  {
		yyVal = new SwitchSection ((List<SwitchLabel>) yyVals[-2+yyTop], current_block.Explicit);
	  }
  break;
case 757:
#line 4867 "cs-parser.jay"
  {
		var labels = new List<SwitchLabel> (4);

		labels.Add ((SwitchLabel) yyVals[0+yyTop]);
		yyVal = labels;
	  }
  break;
case 758:
#line 4874 "cs-parser.jay"
  {
		var labels = (List<SwitchLabel>) (yyVals[-1+yyTop]);
		labels.Add ((SwitchLabel) yyVals[0+yyTop]);

		yyVal = labels;
	  }
  break;
case 759:
#line 4884 "cs-parser.jay"
  {
	 	yyVal = new SwitchLabel ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	 }
  break;
case 760:
#line 4888 "cs-parser.jay"
  {
		yyVal = new SwitchLabel (null, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 765:
#line 4902 "cs-parser.jay"
  {
		Location l = GetLocation (yyVals[-4+yyTop]);
		yyVal = new While ((BooleanExpression) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop], l);
	  }
  break;
case 766:
#line 4911 "cs-parser.jay"
  {
		Location l = GetLocation (yyVals[-6+yyTop]);

		yyVal = new Do ((Statement) yyVals[-5+yyTop], (BooleanExpression) yyVals[-2+yyTop], l);
	  }
  break;
case 767:
#line 4920 "cs-parser.jay"
  {
		Location l = lexer.Location;
		start_block (l);  
		Block assign_block = current_block;

		if (yyVals[-1+yyTop] is Tuple<FullNamedExpression, List<object>>){
			var de = (Tuple<FullNamedExpression, List<object>>) yyVals[-1+yyTop];
			
			var type = de.Item1;

			foreach (VariableDeclaration decl in de.Item2){

				LocalInfo vi;

				vi = current_block.AddVariable (type, decl.identifier, decl.Location);
				if (vi == null)
					continue;

				Expression expr = decl.GetInitializer (type);
					
				LocalVariableReference var;
				var = new LocalVariableReference (assign_block, decl.identifier, l);

				if (expr != null) {
					Assign a = new SimpleAssign (var, expr, decl.Location);
					
					assign_block.AddStatement (new StatementExpression (a));
				}
			}
			
			/* Note: the $$ below refers to the value of this code block, not of the LHS non-terminal.*/
			/* This can be referred to as $5 below.*/
			yyVal = null;
		} else {
			yyVal = yyVals[-1+yyTop];
		}
	  }
  break;
case 768:
#line 4960 "cs-parser.jay"
  {
		Location l = GetLocation (yyVals[-9+yyTop]);

		For f = new For ((Statement) yyVals[-5+yyTop], (BooleanExpression) yyVals[-4+yyTop], (Statement) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop], l);

		current_block.AddStatement (f);

		yyVal = end_block (lexer.Location);
	  }
  break;
case 769:
#line 4972 "cs-parser.jay"
  { yyVal = new EmptyStatement (lexer.Location); }
  break;
case 773:
#line 4982 "cs-parser.jay"
  { yyVal = null; }
  break;
case 775:
#line 4987 "cs-parser.jay"
  { yyVal = new EmptyStatement (lexer.Location); }
  break;
case 778:
#line 4997 "cs-parser.jay"
  {
		/* CHANGE: was `null'*/
		Statement s = (Statement) yyVals[0+yyTop];
		Block b = new Block (current_block, s.loc, lexer.Location);   

		b.AddStatement (s);
		yyVal = b;
	  }
  break;
case 779:
#line 5006 "cs-parser.jay"
  {
		Block b = (Block) yyVals[-2+yyTop];

		b.AddStatement ((Statement) yyVals[0+yyTop]);
		yyVal = yyVals[-2+yyTop];
	  }
  break;
case 780:
#line 5016 "cs-parser.jay"
  {
		Report.Error (230, GetLocation (yyVals[-5+yyTop]), "Type and identifier are both required in a foreach statement");
		yyVal = null;
	  }
  break;
case 781:
#line 5022 "cs-parser.jay"
  {
		start_block (lexer.Location);
		Block foreach_block = current_block;

		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		Location l = lt.Location;
		LocalInfo vi = foreach_block.AddVariable ((Expression) yyVals[-4+yyTop], lt.Value, l);
		if (vi != null) {
			vi.SetReadOnlyContext (LocalInfo.ReadOnlyContext.Foreach);

			/* Get a writable reference to this read-only variable.*/
			/**/
			/* Note that the $$ here refers to the value of _this_ code block,*/
			/* not the value of the LHS non-terminal.  This can be referred to as $8 below.*/
			yyVal = new LocalVariableReference (foreach_block, lt.Value, l, vi, false);
		} else {
			yyVal = null;
		}
	  }
  break;
case 782:
#line 5042 "cs-parser.jay"
  {
		LocalVariableReference v = (LocalVariableReference) yyVals[-1+yyTop];
		Location l = GetLocation (yyVals[-8+yyTop]);

		if (v != null) {
			Foreach f = new Foreach ((Expression) yyVals[-6+yyTop], v, (Expression) yyVals[-3+yyTop], (Statement) yyVals[0+yyTop], l);
			current_block.AddStatement (f);
		}

		yyVal = end_block (lexer.Location);
	  }
  break;
case 789:
#line 5066 "cs-parser.jay"
  {
		yyVal = new Break (GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 790:
#line 5073 "cs-parser.jay"
  {
		yyVal = new Continue (GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 791:
#line 5080 "cs-parser.jay"
  {
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new Goto (lt.Value, lt.Location);
	  }
  break;
case 792:
#line 5085 "cs-parser.jay"
  {
		yyVal = new GotoCase ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
	  }
  break;
case 793:
#line 5089 "cs-parser.jay"
  {
		yyVal = new GotoDefault (GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 794:
#line 5096 "cs-parser.jay"
  {
		yyVal = new Return ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 795:
#line 5103 "cs-parser.jay"
  {
		yyVal = new Throw ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 796:
#line 5110 "cs-parser.jay"
  {
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		string s = lt.Value;
		if (s != "yield"){
			Report.Error (1003, lt.Location, "; expected");
			yyVal = null;
		}
		if (RootContext.Version == LanguageVersion.ISO_1){
			Report.FeatureIsNotAvailable (lt.Location, "yield statement");
			yyVal = null;
		}
		current_block.Toplevel.IsIterator = true;
		yyVal = new Yield ((Expression) yyVals[-1+yyTop], lt.Location); 
	  }
  break;
case 797:
#line 5125 "cs-parser.jay"
  {
		Report.Error (1627, GetLocation (yyVals[-1+yyTop]), "Expression expected after yield return");
		yyVal = null;
	  }
  break;
case 798:
#line 5130 "cs-parser.jay"
  {
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		string s = lt.Value;
		if (s != "yield"){
			Report.Error (1003, lt.Location, "; expected");
			yyVal = null;
		}
		if (RootContext.Version == LanguageVersion.ISO_1){
			Report.FeatureIsNotAvailable (lt.Location, "yield statement");
			yyVal = null;
		}
		
		current_block.Toplevel.IsIterator = true;
		yyVal = new YieldBreak (lt.Location);
	  }
  break;
case 801:
#line 5154 "cs-parser.jay"
  {
		yyVal = new TryCatch ((Block) yyVals[-1+yyTop], (List<Catch>) yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]), false);
	  }
  break;
case 802:
#line 5158 "cs-parser.jay"
  {
		yyVal = new TryFinally ((Statement) yyVals[-2+yyTop], (Block) yyVals[0+yyTop], GetLocation (yyVals[-3+yyTop]));
	  }
  break;
case 803:
#line 5162 "cs-parser.jay"
  {
		yyVal = new TryFinally (new TryCatch ((Block) yyVals[-3+yyTop], (List<Catch>) yyVals[-2+yyTop], GetLocation (yyVals[-4+yyTop]), true), (Block) yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
	  }
  break;
case 804:
#line 5166 "cs-parser.jay"
  {
		Report.Error (1524, GetLocation (yyVals[-2+yyTop]), "Expected catch or finally");
		yyVal = null;
	  }
  break;
case 805:
#line 5174 "cs-parser.jay"
  {
		var l = new List<Catch> (2);

		l.Add ((Catch) yyVals[0+yyTop]);
		yyVal = l;
	  }
  break;
case 806:
#line 5181 "cs-parser.jay"
  {
		var l = (List<Catch>) yyVals[-1+yyTop];
		
		Catch c = (Catch) yyVals[0+yyTop];
		if (l [0].IsGeneral) {
			Report.Error (1017, c.loc, "Try statement already has an empty catch block");
		} else {
			if (c.IsGeneral)
				l.Insert (0, c);
			else
				l.Add (c);
		}
		
		yyVal = l;
	  }
  break;
case 807:
#line 5199 "cs-parser.jay"
  { yyVal = null; }
  break;
case 809:
#line 5205 "cs-parser.jay"
  {
		if (yyVals[0+yyTop] != null) {
			var cc = (Tuple<FullNamedExpression, Tokenizer.LocatedToken>) yyVals[0+yyTop];
			var lt = cc.Item2;

			if (lt != null){
				List<object> one = new List<object> (1);

				one.Add (new VariableDeclaration (lt, null));

				start_block (lexer.Location);
				current_block = declare_local_variables (cc.Item1, one, lt.Location);
			}
		}
	  }
  break;
case 810:
#line 5219 "cs-parser.jay"
  {
		Expression type = null;
		string id = null;
		Block var_block = null;

		if (yyVals[-2+yyTop] != null){
			var cc = (Tuple<FullNamedExpression, Tokenizer.LocatedToken>) yyVals[-2+yyTop];
			type = cc.Item1;
			var lt = cc.Item2;

			if (lt != null){
				id = lt.Value;
				var_block = end_block (lexer.Location);
			}
		}

		yyVal = new Catch (type, id, (Block) yyVals[0+yyTop], var_block, ((Block) yyVals[0+yyTop]).loc);
	  }
  break;
case 811:
#line 5240 "cs-parser.jay"
  { yyVal = null; }
  break;
case 813:
#line 5246 "cs-parser.jay"
  {
		yyVal = new Tuple<FullNamedExpression, Tokenizer.LocatedToken> ((FullNamedExpression)yyVals[-2+yyTop], (Tokenizer.LocatedToken) yyVals[-1+yyTop]);
	  }
  break;
case 814:
#line 5250 "cs-parser.jay"
  {
		Report.Error (1015, GetLocation (yyVals[-1+yyTop]), "A type that derives from `System.Exception', `object', or `string' expected");
		yyVal = null;
	  }
  break;
case 815:
#line 5258 "cs-parser.jay"
  {
		yyVal = new Checked ((Block) yyVals[0+yyTop]);
	  }
  break;
case 816:
#line 5265 "cs-parser.jay"
  {
		yyVal = new Unchecked ((Block) yyVals[0+yyTop]);
	  }
  break;
case 817:
#line 5272 "cs-parser.jay"
  {
		RootContext.CheckUnsafeOption (GetLocation (yyVals[0+yyTop]), Report);
	  }
  break;
case 818:
#line 5274 "cs-parser.jay"
  {
		yyVal = new Unsafe ((Block) yyVals[0+yyTop]);
	  }
  break;
case 819:
#line 5283 "cs-parser.jay"
  {
		start_block (lexer.Location);
	  }
  break;
case 820:
#line 5287 "cs-parser.jay"
  {
		Expression type = (Expression) yyVals[-4+yyTop];
	  	var list = (List<KeyValuePair<Tokenizer.LocatedToken, Expression>>) yyVals[-3+yyTop];
		Fixed f = new Fixed (type,
			list.ConvertAll (i => {
				var v = new KeyValuePair<LocalInfo, Expression> (current_block.AddVariable (type, i.Key.Value, i.Key.Location), i.Value);
				if (v.Key != null) {
					v.Key.SetReadOnlyContext (LocalInfo.ReadOnlyContext.Fixed);
					v.Key.Pinned = true;
				}
				return v;
			}), (Statement) yyVals[0+yyTop], GetLocation (yyVals[-6+yyTop]));

		current_block.AddStatement (f);

		yyVal = end_block (lexer.Location);
	  }
  break;
case 821:
#line 5307 "cs-parser.jay"
  { 
	   	var declarators = new List<KeyValuePair<Tokenizer.LocatedToken, Expression>> (2);
	   	if (yyVals[0+yyTop] != null)
			declarators.Add ((KeyValuePair<Tokenizer.LocatedToken, Expression>)yyVals[0+yyTop]);
		yyVal = declarators;
	  }
  break;
case 822:
#line 5314 "cs-parser.jay"
  {
		var declarators = (List<KeyValuePair<Tokenizer.LocatedToken, Expression>>) yyVals[-2+yyTop];
		if (yyVals[0+yyTop] != null)
			declarators.Add ((KeyValuePair<Tokenizer.LocatedToken, Expression>)yyVals[0+yyTop]);
		yyVal = declarators;
	  }
  break;
case 823:
#line 5324 "cs-parser.jay"
  {
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		yyVal = new KeyValuePair<Tokenizer.LocatedToken, Expression> (lt, (Expression) yyVals[0+yyTop]);
	  }
  break;
case 824:
#line 5329 "cs-parser.jay"
  {
		Report.Error (210, ((Tokenizer.LocatedToken) yyVals[0+yyTop]).Location, "You must provide an initializer in a fixed or using statement declaration");
		yyVal = null;
	  }
  break;
case 825:
#line 5337 "cs-parser.jay"
  {
		/**/
 	  }
  break;
case 826:
#line 5341 "cs-parser.jay"
  {
		yyVal = new Lock ((Expression) yyVals[-3+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-5+yyTop]));
	  }
  break;
case 827:
#line 5348 "cs-parser.jay"
  {
		start_block (lexer.Location);
		Block assign_block = current_block;

		var de = (Tuple<FullNamedExpression, List<object>>) yyVals[-1+yyTop];
		Location l = GetLocation (yyVals[-3+yyTop]);

		var vars = new Stack<Tuple<LocalVariableReference, Expression>> ();

		foreach (VariableDeclaration decl in de.Item2) {
			LocalInfo vi = current_block.AddVariable (de.Item1, decl.identifier, decl.Location);
			if (vi == null)
				continue;
			vi.SetReadOnlyContext (LocalInfo.ReadOnlyContext.Using);

			Expression expr = decl.GetInitializer (de.Item1);
			if (expr == null) {
				Report.Error (210, l, "You must provide an initializer in a fixed or using statement declaration");
				continue;
			}
			LocalVariableReference var;

			/* Get a writable reference to this read-only variable.*/
			var = new LocalVariableReference (assign_block, decl.identifier, l, vi, false);

			/* This is so that it is not a warning on using variables*/
			vi.Used = true;

			vars.Push (new Tuple<LocalVariableReference, Expression> (var, expr));

			/* Assign a = new SimpleAssign (var, expr, decl.Location);*/
			/* assign_block.AddStatement (new StatementExpression (a));*/
		}

		/* Note: the $$ here refers to the value of this code block and not of the LHS non-terminal.*/
		/* It can be referred to as $5 below.*/
		yyVal = vars;
	  }
  break;
case 828:
#line 5387 "cs-parser.jay"
  {
		Statement stmt = (Statement) yyVals[0+yyTop];
		var vars = (Stack<Tuple<LocalVariableReference, Expression>>) yyVals[-1+yyTop];
		Location l = GetLocation (yyVals[-5+yyTop]);

		while (vars.Count > 0) {
			  var de = vars.Pop ();
			  stmt = new Using (de.Item1, de.Item2, stmt, l);
		}
		current_block.AddStatement (stmt);
		yyVal = end_block (lexer.Location);
	  }
  break;
case 829:
#line 5400 "cs-parser.jay"
  {
		start_block (lexer.Location);
	  }
  break;
case 830:
#line 5404 "cs-parser.jay"
  {
		current_block.AddStatement (new UsingTemporary ((Expression) yyVals[-3+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-5+yyTop])));
		yyVal = end_block (lexer.Location);
	  }
  break;
case 831:
#line 5415 "cs-parser.jay"
  {
		lexer.query_parsing = false;
			
		Linq.AQueryClause from = yyVals[-1+yyTop] as Linq.AQueryClause;
			
		from.Tail.Next = (Linq.AQueryClause)yyVals[0+yyTop];
		yyVal = from;
		
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }
  break;
case 832:
#line 5427 "cs-parser.jay"
  {
		Linq.AQueryClause from = yyVals[-1+yyTop] as Linq.AQueryClause;
			
		from.Tail.Next = (Linq.AQueryClause)yyVals[0+yyTop];
		yyVal = from;
		
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }
  break;
case 833:
#line 5438 "cs-parser.jay"
  {
	        lexer.query_parsing = false;
		yyVal = yyVals[-1+yyTop];

		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }
  break;
case 834:
#line 5445 "cs-parser.jay"
  {
	        yyVal = yyVals[-1+yyTop];
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }
  break;
case 835:
#line 5454 "cs-parser.jay"
  {
		yyVal = new Linq.QueryExpression (current_block, new Linq.QueryStartClause ((Expression)yyVals[0+yyTop]));
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		current_block = new Linq.QueryBlock (compiler, current_block, new SimpleMemberName (lt.Value, lt.Location), GetLocation (yyVals[-3+yyTop]));
	  }
  break;
case 836:
#line 5460 "cs-parser.jay"
  {
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		yyVal = new Linq.QueryExpression (current_block, new Linq.Cast ((FullNamedExpression)yyVals[-3+yyTop], (Expression)yyVals[0+yyTop]));
		current_block = new Linq.QueryBlock (compiler, current_block, new SimpleMemberName (lt.Value, lt.Location), GetLocation (yyVals[-4+yyTop]));
	  }
  break;
case 837:
#line 5469 "cs-parser.jay"
  {
		yyVal = new Linq.QueryExpression (current_block, new Linq.QueryStartClause ((Expression)yyVals[0+yyTop]));
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		current_block = new Linq.QueryBlock (compiler, current_block, new SimpleMemberName (lt.Value, lt.Location), GetLocation (yyVals[-3+yyTop]));
	  }
  break;
case 838:
#line 5475 "cs-parser.jay"
  {
		yyVal = new Linq.QueryExpression (current_block, new Linq.Cast ((FullNamedExpression)yyVals[-3+yyTop], (Expression)yyVals[0+yyTop]));
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		current_block = new Linq.QueryBlock (compiler, current_block, new SimpleMemberName (lt.Value, lt.Location), GetLocation (yyVals[-4+yyTop]));
	  }
  break;
case 839:
#line 5484 "cs-parser.jay"
  {
		current_block = new Linq.QueryBlock (compiler, current_block, GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 840:
#line 5488 "cs-parser.jay"
  {
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		var sn = new SimpleMemberName (lt.Value, lt.Location);
		yyVal = new Linq.SelectMany (current_block.Toplevel, sn, (Expression)yyVals[0+yyTop]);
		
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
		
		((Linq.QueryBlock)current_block).AddTransparentParameter (compiler, sn);
	  }
  break;
case 841:
#line 5499 "cs-parser.jay"
  {
		current_block = new Linq.QueryBlock (compiler, current_block, GetLocation (yyVals[-3+yyTop]));
	  }
  break;
case 842:
#line 5503 "cs-parser.jay"
  {
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		var sn = new SimpleMemberName (lt.Value, lt.Location);

		FullNamedExpression type = (FullNamedExpression)yyVals[-4+yyTop];
		
		yyVal = new Linq.SelectMany (current_block.Toplevel, sn, new Linq.Cast (type, (FullNamedExpression)yyVals[0+yyTop]));
		
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
		
		((Linq.QueryBlock)current_block).AddTransparentParameter (compiler, sn);
	  }
  break;
case 843:
#line 5520 "cs-parser.jay"
  {
	  	Linq.AQueryClause head = (Linq.AQueryClause)yyVals[-1+yyTop];
		
		if (yyVals[0+yyTop] != null)
			head.Next = (Linq.AQueryClause)yyVals[0+yyTop];
				
		if (yyVals[-2+yyTop] != null) {
			Linq.AQueryClause clause = (Linq.AQueryClause)yyVals[-2+yyTop];
			clause.Tail.Next = head;
			head = clause;
		}
		
		yyVal = head;
	  }
  break;
case 845:
#line 5539 "cs-parser.jay"
  {
	  	current_block = new Linq.QueryBlock (compiler, current_block, lexer.Location);
	  }
  break;
case 846:
#line 5543 "cs-parser.jay"
  {
		yyVal = new Linq.Select (current_block.Toplevel, (Expression)yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]));

		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }
  break;
case 847:
#line 5550 "cs-parser.jay"
  {
	  	if (linq_clause_blocks == null)
	  		linq_clause_blocks = new Stack<Block> ();
	  		
	  	current_block = new Linq.QueryBlock (compiler, current_block, lexer.Location);
	  	linq_clause_blocks.Push (current_block);
	  }
  break;
case 848:
#line 5558 "cs-parser.jay"
  {
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  
		current_block = new Linq.QueryBlock (compiler, current_block, lexer.Location);
	  }
  break;
case 849:
#line 5565 "cs-parser.jay"
  {
		yyVal = new Linq.GroupBy (current_block.Toplevel, (Expression)yyVals[-3+yyTop], (ToplevelBlock) linq_clause_blocks.Pop (), (Expression)yyVals[0+yyTop], GetLocation (yyVals[-5+yyTop]));
		
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }
  break;
case 853:
#line 5581 "cs-parser.jay"
  {
		((Linq.AQueryClause)yyVals[-1+yyTop]).Tail.Next = (Linq.AQueryClause)yyVals[0+yyTop];
		yyVal = yyVals[-1+yyTop];
	  }
  break;
case 859:
#line 5597 "cs-parser.jay"
  {
	  	current_block = new Linq.QueryBlock (compiler, current_block, GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 860:
#line 5601 "cs-parser.jay"
  {
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		var sn = new SimpleMemberName (lt.Value, lt.Location);
	  	yyVal = new Linq.Let (current_block.Toplevel, current_container, sn, (Expression)yyVals[0+yyTop]);
	  	
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
		
		((Linq.QueryBlock)current_block).AddTransparentParameter (compiler, sn);
	  }
  break;
case 861:
#line 5615 "cs-parser.jay"
  {
	  	current_block = new Linq.QueryBlock (compiler, current_block, lexer.Location);
	  }
  break;
case 862:
#line 5619 "cs-parser.jay"
  {
		yyVal = new Linq.Where (current_block.Toplevel, (BooleanExpression)yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]));

		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }
  break;
case 863:
#line 5629 "cs-parser.jay"
  {
		if (linq_clause_blocks == null)
			linq_clause_blocks = new Stack<Block> ();
	  		
		current_block = new Linq.QueryBlock (compiler, current_block, lexer.Location);
		linq_clause_blocks.Push (current_block);
	  }
  break;
case 864:
#line 5637 "cs-parser.jay"
  {
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;

		current_block = new Linq.QueryBlock (compiler, current_block, lexer.Location);
		linq_clause_blocks.Push (current_block);
	  }
  break;
case 865:
#line 5645 "cs-parser.jay"
  {
		current_block.AddStatement (new ContextualReturn ((Expression) yyVals[-1+yyTop]));
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;

		var lt = (Tokenizer.LocatedToken) yyVals[-7+yyTop];
		current_block = new Linq.QueryBlock (compiler, current_block, new SimpleMemberName (lt.Value, lt.Location), lexer.Location);
	  }
  break;
case 866:
#line 5654 "cs-parser.jay"
  {
		var lt = (Tokenizer.LocatedToken) yyVals[-10+yyTop];
		var sn = new SimpleMemberName (lt.Value, lt.Location);
		SimpleMemberName sn2 = null;
		
		ToplevelBlock outer_selector = (ToplevelBlock) linq_clause_blocks.Pop ();
		ToplevelBlock block = (ToplevelBlock) linq_clause_blocks.Pop ();

		if (yyVals[0+yyTop] == null) {
	  		yyVal = new Linq.Join (block, sn, (Expression)yyVals[-7+yyTop], outer_selector, current_block.Toplevel, GetLocation (yyVals[-11+yyTop]));
		} else {
			var lt2 = (Tokenizer.LocatedToken) yyVals[0+yyTop];
			sn2 = new SimpleMemberName (lt2.Value, lt2.Location);
			yyVal = new Linq.GroupJoin (block, sn, (Expression)yyVals[-7+yyTop], outer_selector, current_block.Toplevel,
				sn2, GetLocation (yyVals[-11+yyTop]));
		}

		current_block.AddStatement (new ContextualReturn ((Expression) yyVals[-1+yyTop]));
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
			
		if (sn2 == null)
			((Linq.QueryBlock)current_block).AddTransparentParameter (compiler, sn);
		else
			((Linq.QueryBlock)current_block).AddTransparentParameter (compiler, sn2);
	  }
  break;
case 867:
#line 5681 "cs-parser.jay"
  {
		if (linq_clause_blocks == null)
			linq_clause_blocks = new Stack<Block> ();
	  		
		current_block = new Linq.QueryBlock (compiler, current_block, lexer.Location);
		linq_clause_blocks.Push (current_block);
	  }
  break;
case 868:
#line 5689 "cs-parser.jay"
  {
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;

		current_block = new Linq.QueryBlock (compiler, current_block, lexer.Location);
		linq_clause_blocks.Push (current_block);
	  }
  break;
case 869:
#line 5697 "cs-parser.jay"
  {
		current_block.AddStatement (new ContextualReturn ((Expression) yyVals[-1+yyTop]));
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;

		var lt = (Tokenizer.LocatedToken) yyVals[-7+yyTop];
		current_block = new Linq.QueryBlock (compiler, current_block, new SimpleMemberName (lt.Value, lt.Location), lexer.Location);
	  }
  break;
case 870:
#line 5706 "cs-parser.jay"
  {
		var lt = (Tokenizer.LocatedToken) yyVals[-10+yyTop];
		var sn = new SimpleMemberName (lt.Value, lt.Location);
		SimpleMemberName sn2 = null;
		ToplevelBlock outer_selector = (ToplevelBlock) linq_clause_blocks.Pop ();
		ToplevelBlock block = (ToplevelBlock) linq_clause_blocks.Pop ();
		
		Linq.Cast cast = new Linq.Cast ((FullNamedExpression)yyVals[-11+yyTop], (Expression)yyVals[-7+yyTop]);
		if (yyVals[0+yyTop] == null) {
	  		yyVal = new Linq.Join (block, sn, cast, outer_selector, current_block.Toplevel, GetLocation (yyVals[-12+yyTop]));
		} else {
			var lt2 = (Tokenizer.LocatedToken) yyVals[0+yyTop];
			sn2 = new SimpleMemberName (lt2.Value, lt2.Location);
			yyVal = new Linq.GroupJoin (block, sn, cast, outer_selector, current_block.Toplevel,
				sn2, GetLocation (yyVals[-12+yyTop]));
		}
		
		current_block.AddStatement (new ContextualReturn ((Expression) yyVals[-1+yyTop]));
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
			
		if (sn2 == null)
			((Linq.QueryBlock)current_block).AddTransparentParameter (compiler, sn);
		else
			((Linq.QueryBlock)current_block).AddTransparentParameter (compiler, sn2);
	  }
  break;
case 872:
#line 5737 "cs-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 873:
#line 5744 "cs-parser.jay"
  {
		current_block = new Linq.QueryBlock (compiler, current_block, lexer.Location);
	  }
  break;
case 874:
#line 5748 "cs-parser.jay"
  {
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 876:
#line 5759 "cs-parser.jay"
  {
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  
		current_block = new Linq.QueryBlock (compiler, current_block, lexer.Location);
	  }
  break;
case 877:
#line 5766 "cs-parser.jay"
  {
		((Linq.AQueryClause)yyVals[-3+yyTop]).Next = (Linq.AQueryClause)yyVals[0+yyTop];
		yyVal = yyVals[-3+yyTop];
	  }
  break;
case 879:
#line 5775 "cs-parser.jay"
  {
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  
		current_block = new Linq.QueryBlock (compiler, current_block, lexer.Location);	 
	 }
  break;
case 880:
#line 5782 "cs-parser.jay"
  {
		((Linq.AQueryClause)yyVals[-3+yyTop]).Tail.Next = (Linq.AQueryClause)yyVals[-1+yyTop];
		yyVal = yyVals[-3+yyTop];
	 }
  break;
case 881:
#line 5790 "cs-parser.jay"
  {
		yyVal = new Linq.OrderByAscending (current_block.Toplevel, (Expression)yyVals[0+yyTop]);	
	  }
  break;
case 882:
#line 5794 "cs-parser.jay"
  {
		yyVal = new Linq.OrderByAscending (current_block.Toplevel, (Expression)yyVals[-1+yyTop]);	
	  }
  break;
case 883:
#line 5798 "cs-parser.jay"
  {
		yyVal = new Linq.OrderByDescending (current_block.Toplevel, (Expression)yyVals[-1+yyTop]);	
	  }
  break;
case 884:
#line 5805 "cs-parser.jay"
  {
		yyVal = new Linq.ThenByAscending (current_block.Toplevel, (Expression)yyVals[0+yyTop]);	
	  }
  break;
case 885:
#line 5809 "cs-parser.jay"
  {
		yyVal = new Linq.ThenByAscending (current_block.Toplevel, (Expression)yyVals[-1+yyTop]);	
	  }
  break;
case 886:
#line 5813 "cs-parser.jay"
  {
		yyVal = new Linq.ThenByDescending (current_block.Toplevel, (Expression)yyVals[-1+yyTop]);	
	  }
  break;
case 888:
#line 5822 "cs-parser.jay"
  {
		/* query continuation block is not linked with query block but with block*/
		/* before. This means each query can use same range variable names for*/
		/* different identifiers.*/

		current_block.SetEndLocation (GetLocation (yyVals[-1+yyTop]));
		current_block = current_block.Parent;

		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		
		current_block = new Linq.QueryBlock (compiler, current_block, new SimpleMemberName (lt.Value, lt.Location), GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 889:
#line 5835 "cs-parser.jay"
  {
  		yyVal = new Linq.QueryExpression (current_block, (Linq.AQueryClause)yyVals[0+yyTop]);
	  }
  break;
case 892:
#line 5856 "cs-parser.jay"
  { 
	        Evaluator.LoadAliases (current_namespace);

		push_current_class (new Class (current_namespace, current_class, new MemberName ("Class" + class_count++),
			Modifiers.PUBLIC, null), null);

		var baseclass_list = new List<FullNamedExpression> ();
		baseclass_list.Add (new TypeExpression (Evaluator.InteractiveBaseClass, lexer.Location));
		current_container.AddBasesForPart (current_class, baseclass_list);

		/* (ref object retval)*/
		Parameter [] mpar = new Parameter [1];
		mpar [0] = new Parameter (TypeManager.system_object_expr, "$retval", Parameter.Modifier.REF, null, Location.Null);

		ParametersCompiled pars = new ParametersCompiled (compiler, mpar);
		current_local_parameters = pars;
		Method method = new Method (
			current_class,
			null, /* generic*/
			TypeManager.system_void_expr,
			Modifiers.PUBLIC | Modifiers.STATIC,
			new MemberName ("Host"),
			pars,
			null /* attributes */);

		oob_stack.Push (method);
	        ++lexer.parsing_block;
		start_block (lexer.Location);
	  }
  break;
case 893:
#line 5886 "cs-parser.jay"
  {
		--lexer.parsing_block;
		Method method = (Method) oob_stack.Pop ();

		method.Block = (ToplevelBlock) end_block(lexer.Location);
		current_container.AddMethod (method);

		--lexer.parsing_declaration;
		InteractiveResult = pop_current_class ();
		current_local_parameters = null;
	  }
  break;
case 894:
#line 5897 "cs-parser.jay"
  {
	        Evaluator.LoadAliases (current_namespace);
	  }
  break;
#line default
        }
        yyTop -= yyLen[yyN];
        yyState = yyStates[yyTop];
        int yyM = yyLhs[yyN];
        if (yyState == 0 && yyM == 0) {
          if (debug != null) debug.shift(0, yyFinal);
          yyState = yyFinal;
          if (yyToken < 0) {
            yyToken = yyLex.advance() ? yyLex.token() : 0;
            if (debug != null)
               debug.lex(yyState, yyToken,yyname(yyToken), yyLex.value());
          }
          if (yyToken == 0) {
            if (debug != null) debug.accept(yyVal);
            return yyVal;
          }
          goto continue_yyLoop;
        }
        if (((yyN = yyGindex[yyM]) != 0) && ((yyN += yyState) >= 0)
            && (yyN < yyTable.Length) && (yyCheck[yyN] == yyState))
          yyState = yyTable[yyN];
        else
          yyState = yyDgoto[yyM];
        if (debug != null) debug.shift(yyStates[yyTop], yyState);
	 goto continue_yyLoop;
      continue_yyDiscarded: continue;	// implements the named-loop continue: 'continue yyDiscarded'
      }
    continue_yyLoop: continue;		// implements the named-loop continue: 'continue yyLoop'
    }
  }

   static  short [] yyLhs  = {              -1,
    0,    0,    0,    0,    5,    0,    2,    2,    1,    1,
    6,    6,    6,   10,   10,    7,    7,   11,   11,    8,
    8,   12,   12,   13,   20,   16,   18,   18,   18,   21,
   21,   22,   22,   15,   24,   19,   23,   28,   23,   23,
   26,   26,   25,   25,   27,   27,   29,   29,    9,    9,
    9,    9,   30,   30,   30,   30,   30,    3,   17,   17,
   38,   38,   39,   39,   40,   42,   42,   42,   42,   41,
   41,   46,   43,   44,   45,   45,   47,   47,   47,   47,
   47,   48,   48,   49,   51,   52,   52,   52,   53,   54,
   54,   55,   55,   56,   56,   56,   56,   56,   56,   56,
   56,   56,   56,   56,   67,   69,   72,   73,   34,   34,
   75,   71,   74,   74,   76,   76,   77,   77,   77,   77,
   77,   77,   77,   77,   77,   77,   57,   79,   79,   82,
   80,   80,   81,   81,   31,   31,   31,   87,   87,   88,
   88,   89,   89,   90,   90,   90,   91,   91,   91,   91,
   91,   86,   86,   97,   94,   94,   94,   92,   96,   96,
  101,   32,  104,  105,   99,  106,  107,   99,   99,  100,
  100,  103,  103,  110,  110,  110,  110,  110,  110,  110,
  110,  110,  111,  111,  114,  114,  114,  114,  115,  115,
  117,  117,  118,  118,  118,  112,  112,  112,  119,  119,
  119,  113,  120,  122,  123,   58,  121,  121,  121,  121,
  121,  127,  124,  128,  125,  126,  126,  126,  129,  130,
  132,  133,   35,   35,  131,  134,  134,  135,  135,  136,
  136,  136,  136,  136,  136,  136,  136,  136,  139,   61,
  138,  138,  140,  140,  143,  137,  137,  142,  142,  142,
  142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
  142,  142,  142,  142,  142,  142,  142,  142,  142,  145,
  144,  146,  144,  144,  144,   62,  149,  151,  147,  148,
  148,  150,  150,  155,  153,  156,  153,  153,  157,   63,
   59,  159,  160,   59,   59,  158,  158,  158,  158,  158,
  158,  163,  161,  161,  161,  164,  162,  162,  162,  166,
  167,  168,   60,  171,   36,  169,  169,  169,  173,  174,
  170,  172,  172,  175,  175,  176,  177,  176,  178,  179,
  180,   37,  181,  181,   14,   14,  182,  182,  185,  184,
  184,  184,  186,  186,  188,   66,   95,  102,  102,  165,
  165,  189,  189,  189,  187,  187,  190,  190,  191,  191,
  193,  193,   85,   78,   78,   93,   93,  116,  116,  141,
  141,  194,  194,  194,  194,  197,  197,  198,  198,  196,
  196,  196,  196,  196,  196,  196,  199,  199,  199,  199,
  199,  199,  199,  199,  199,  200,  200,  201,  201,  202,
  202,  202,  202,  202,  202,  202,  202,  202,  202,  202,
  202,  202,  202,  202,  202,  202,  202,  202,  202,  204,
  204,  204,  222,  222,  223,  223,  224,  224,  205,  205,
  207,  207,  207,  207,  207,  207,  207,  208,  225,  225,
  226,  226,  227,  227,  229,  229,  229,  230,  230,  230,
  230,  230,  231,  231,  154,  154,  235,  235,  235,  235,
  235,  237,  237,  236,  236,  238,  238,  238,  238,  238,
  239,  209,  209,  209,  234,  234,  234,  240,  240,  241,
  241,  210,  211,  211,  211,  212,  213,  214,  214,  203,
  203,  203,  203,  245,  242,  215,  246,  246,  247,  247,
  248,  248,  249,  249,  249,  249,  249,  243,  243,  250,
  250,  195,  195,  251,  251,  251,  252,  252,  244,  244,
   84,   84,  253,  253,  253,  254,  216,  255,  255,  255,
  256,  256,  256,  256,  256,  257,  183,  217,  218,  219,
  220,  259,  221,  258,  258,  261,  260,  206,  262,  262,
  262,  262,  264,  264,  263,  263,  263,  263,  263,  263,
  263,  265,  265,  265,  265,  266,  266,  266,  266,  266,
  266,  267,  267,  267,  268,  268,  268,  268,  268,  269,
  269,  269,  270,  270,  271,  271,  272,  272,  273,  273,
  274,  274,  275,  275,  276,  276,  277,  277,  277,  277,
  277,  277,  277,  277,  277,  277,  277,  278,  278,  279,
  279,  279,  280,  280,  282,  281,  281,  284,  283,  285,
  286,  283,   50,   50,  232,  232,  232,   83,  288,  289,
  290,  291,  292,   33,   65,   65,   64,   64,  108,  108,
  293,  293,  293,  293,  293,  293,  293,  293,  293,  293,
  293,  293,  293,  293,   68,   68,  294,   70,   70,  295,
  295,  296,  297,  297,  298,  298,  298,  298,  192,  192,
  299,  299,  301,  109,  302,  302,  303,  152,  300,  300,
  304,  304,  305,  305,  305,  309,  309,  310,  310,  310,
  307,  307,  307,  307,  307,  307,  307,  307,  307,  307,
  307,  307,  307,  311,  311,  311,  311,  311,  311,  311,
  311,  311,  311,  311,  311,  311,  325,  325,  325,  312,
  326,  308,  306,  306,  329,  329,  329,  330,  330,  330,
  330,  331,  331,  327,  328,  313,  313,  324,  324,  332,
  332,  333,  333,  314,  314,  334,  334,  336,  335,  337,
  338,  338,  339,  339,  342,  340,  341,  341,  343,  343,
  315,  315,  315,  315,  344,  345,  350,  346,  348,  348,
  352,  352,  349,  349,  351,  351,  354,  353,  353,  347,
  355,  347,  316,  316,  316,  316,  316,  316,  356,  357,
  358,  358,  358,  359,  360,  361,  361,  361,   98,   98,
  317,  317,  317,  317,  362,  362,  364,  364,  366,  363,
  365,  365,  367,  367,  318,  319,  368,  322,  370,  323,
  369,  369,  371,  371,  372,  320,  373,  321,  374,  321,
  287,  287,  287,  287,  375,  375,  377,  377,  379,  378,
  380,  378,  376,  376,  384,  382,  385,  386,  382,  381,
  381,  387,  387,  388,  388,  388,  388,  388,  393,  389,
  394,  390,  395,  396,  397,  391,  399,  400,  401,  391,
  398,  398,  403,  392,  402,  406,  402,  405,  408,  405,
  404,  404,  404,  407,  407,  407,  383,  409,  383,    4,
    4,  410,    4,  412,    4,  411,  411,  411,  411,  233,
  233,  228,  228,
  };
   static  short [] yyLen = {           2,
    2,    3,    2,    1,    0,    3,    0,    1,    1,    2,
    1,    1,    1,    1,    2,    4,    2,    1,    2,    1,
    1,    5,    2,    3,    0,    6,    1,    3,    1,    0,
    1,    0,    1,    1,    0,    3,    4,    0,    3,    4,
    0,    1,    0,    1,    0,    1,    1,    2,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    0,    1,
    1,    2,    5,    4,    2,    1,    1,    1,    1,    1,
    3,    0,    3,    1,    0,    3,    0,    1,    1,    3,
    3,    1,    1,    3,    4,    0,    1,    1,    3,    0,
    1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    0,    0,    0,    0,   13,    5,
    0,    4,    0,    1,    1,    2,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    6,    1,    3,    0,
    4,    1,    1,    1,    5,    6,    5,    1,    3,    4,
    3,    1,    3,    3,    1,    2,    1,    1,    5,    1,
    2,    1,    3,    0,    4,    1,    2,    3,    1,    1,
    0,    3,    0,    0,   10,    0,    0,   11,    8,    1,
    1,    0,    1,    1,    3,    3,    3,    5,    3,    5,
    1,    1,    1,    3,    4,    6,    4,    6,    0,    1,
    1,    2,    1,    1,    1,    4,    6,    4,    1,    2,
    2,    1,    0,    0,    0,   10,    1,    2,    1,    2,
    1,    0,    5,    0,    5,    1,    1,    1,    0,    0,
    0,    0,   13,    5,    3,    0,    1,    1,    2,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    0,    5,
    1,    1,    1,    1,    0,    7,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    0,
    7,    0,    7,    2,    2,    2,    0,    0,    9,    1,
    1,    0,    1,    0,    6,    0,    6,    2,    0,    8,
    6,    0,    0,   10,    6,    2,    2,    1,    1,    1,
    0,    0,    4,    3,    3,    0,    4,    3,    3,    0,
    0,    0,   13,    0,    8,    0,    2,    2,    0,    0,
    5,    0,    2,    1,    3,    2,    0,    5,    0,    0,
    0,   13,    0,    1,    1,    3,    1,    4,    2,    0,
    3,    2,    1,    3,    0,    3,    1,    1,    3,    1,
    2,    3,    4,    4,    0,    3,    1,    3,    3,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    2,    2,    2,    2,    2,    1,    3,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    2,    2,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    3,    3,
    4,    4,    3,    3,    4,    3,    4,    4,    0,    1,
    3,    4,    0,    1,    1,    3,    2,    3,    1,    2,
    3,    2,    1,    1,    0,    1,    1,    3,    3,    2,
    2,    1,    1,    1,    1,    2,    2,    4,    3,    1,
    1,    4,    4,    2,    1,    3,    2,    1,    3,    1,
    1,    1,    4,    4,    2,    2,    2,    5,    2,    6,
    3,    3,    2,    0,    3,    4,    1,    2,    0,    1,
    1,    3,    3,    1,    4,    1,    1,    0,    1,    1,
    2,    1,    2,    2,    3,    2,    1,    2,    0,    1,
    2,    4,    1,    3,    1,    0,    5,    1,    1,    1,
    2,    3,    3,    4,    4,    1,    2,    4,    4,    4,
    3,    0,    4,    0,    1,    0,    4,    4,    1,    2,
    2,    1,    4,    4,    1,    2,    2,    2,    2,    2,
    2,    1,    3,    3,    3,    1,    3,    3,    3,    3,
    3,    1,    3,    3,    1,    3,    3,    3,    3,    1,
    3,    3,    1,    3,    1,    3,    1,    3,    1,    3,
    1,    3,    1,    3,    1,    5,    3,    3,    3,    3,
    3,    3,    3,    3,    3,    3,    3,    1,    3,    3,
    2,    1,    0,    1,    0,    2,    1,    0,    4,    0,
    0,    7,    1,    1,    1,    1,    1,    1,    1,    0,
    0,    0,    0,   13,    0,    1,    0,    1,    1,    2,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    0,    1,    2,    0,    1,    1,
    2,    4,    1,    3,    1,    3,    1,    1,    0,    1,
    1,    1,    0,    4,    1,    1,    0,    4,    0,    1,
    1,    2,    1,    1,    1,    1,    2,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    0,    4,    2,    2,    2,    2,    2,    2,    2,    2,
    2,    1,    2,    2,    3,    2,    2,    2,    2,    1,
    1,    1,    1,    1,    1,    5,    7,    0,    6,    3,
    0,    1,    1,    2,    0,    3,    1,    2,    3,    1,
    1,    1,    1,    1,    5,    7,    0,   10,    0,    1,
    1,    1,    0,    1,    0,    1,    1,    1,    3,    6,
    0,    9,    1,    1,    1,    1,    1,    1,    2,    2,
    3,    4,    3,    3,    3,    4,    3,    3,    0,    1,
    3,    4,    5,    3,    1,    2,    0,    1,    0,    4,
    0,    1,    4,    2,    2,    2,    0,    3,    0,    7,
    1,    3,    3,    1,    0,    6,    0,    6,    0,    6,
    2,    2,    2,    2,    4,    5,    4,    5,    0,    5,
    0,    6,    3,    2,    0,    3,    0,    0,    6,    0,
    1,    1,    2,    1,    1,    1,    1,    1,    0,    5,
    0,    3,    0,    0,    0,   12,    0,    0,    0,   13,
    0,    2,    0,    3,    1,    0,    4,    1,    0,    4,
    1,    2,    2,    1,    2,    2,    0,    0,    4,    2,
    2,    0,    4,    0,    3,    1,    2,    1,    0,    0,
    1,    1,    1,
  };
   static  short [] yyDefRed = {            0,
    8,    0,    0,    0,    0,  894,    0,    0,    0,    4,
    0,    5,    9,   11,   12,   13,   20,   21,   50,    0,
   49,   51,   52,   53,   54,   55,   56,   57,    0,   61,
  161,   23,    0,    0,    0,  335,    0,  337,   17,    0,
   69,   67,   68,    0,    0,    0,    0,    0,   70,   72,
  890,    0,    0,   18,    0,    1,    0,   10,    3,    0,
  646,  652,  644,    0,  641,  651,  645,  643,  642,  649,
  647,  648,  654,  650,  653,    0,    0,  639,   62,    0,
    0,    0,  537,  339,    0,   24,    0,    0,    0,    0,
    0,    0,   65,    0,  743,    0,  382,    0,  388,  395,
    0,    0,    0,  383,    0,    0,    0,  385,  424,    0,
  384,    0,    0,    0,    0,  391,    0,  393,    0,  422,
  380,    0,  387,  389,    0,  381,    0,  482,    0,  423,
    0,  526,  392,  394,    0,  817,  390,    0,    0,    0,
    0,    0,  673,    0,  720,    0,    0,    0,    0,    0,
    0,    0,    0,  421,    0,  620,    0,  742,  704,    0,
    0,  386,    0,    0,    0,    0,  400,    0,  404,  405,
  406,  407,  408,  409,  410,  411,  412,  413,  414,  415,
  416,  417,  418,  419,  420,  624,    0,  555,    0,  552,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  625,  623,  626,  627,  688,  690,    0,  686,  689,
  705,  707,  708,  709,  710,  711,  712,  713,  714,  715,
  716,  706,    0,    0,  732,    0,    0,    0,  744,  745,
  761,  762,  763,  764,  783,  784,  785,  786,  787,  788,
    0,    0,    0,  898,  895,   19,    2,    6,   29,   27,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  361,
  363,    0,    0,  640,  171,  162,  170,  342,    0,  343,
  364,    0,    0,    0,  336,   16,    0,   71,   64,    0,
   73,  485,    0,    0,  789,  425,  426,  815,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  403,    0,  790,
    0,  546,  542,  545,  741,  740,  691,  718,  717,  719,
  692,  693,  694,  695,  696,  697,  698,  699,  700,  701,
  702,  703,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  397,    0,  800,
    0,  396,    0,    0,  748,    0,    0,    0,  816,    0,
    0,    0,  730,  509,  727,    0,    0,    0,    0,    0,
    0,    0,    0,  551,  556,  557,  550,  561,  560,  558,
  559,    0,    0,  618,  721,  402,  401,    0,    0,    0,
  334,  729,    0,  726,    0,    0,  486,  487,    0,    0,
    0,  728,  474,  725,    0,    0,  493,    0,    0,    0,
    0,  489,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  901,  893,  687,  723,  724,
  731,  733,    0,    0,  142,  738,  739,  861,    0,    0,
    0,  873,  833,  831,  854,    0,    0,  852,  855,  856,
  857,  858,  834,  832,  897,    0,    0,    0,  345,    0,
    0,  375,    0,  372,  630,    0,    0,    0,  348,    0,
  152,    0,    0,    0,    0,    0,  374,  371,  373,  341,
    0,   22,  338,   63,    0,    0,   78,   79,   82,   83,
    0,  480,  481,    0,  478,    0,    0,    0,    0,  128,
    0,    0,    0,    0,  736,  737,    0,  771,  778,    0,
  770,    0,    0,  628,    0,  793,  791,  629,    0,    0,
  507,    0,    0,    0,    0,  497,    0,  501,  516,  514,
  517,    0,    0,  492,    0,  495,    0,  513,  794,    0,
    0,  795,  804,    0,    0,    0,  805,    0,    0,  818,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  681,
  683,  684,  685,  429,  430,    0,  798,  797,    0,    0,
    0,  194,  193,  195,    0,    0,    0,    0,  368,    0,
  608,    0,    0,  433,  511,    0,  436,    0,  434,  541,
    0,    0,    0,    0,  462,  465,    0,    0,  457,  464,
  463,    0,    0,  562,    0,    0,    0,  449,    0,    0,
  445,    0,  475,    0,  520,  491,    0,  597,  598,  599,
  600,  601,  602,  603,  604,  605,  607,  606,  563,  565,
  564,  570,  571,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  594,    0,
    0,    0,  146,    0,    0,    0,    0,    0,    0,    0,
    0,  845,  847,  844,    0,  853,   28,   35,    0,    0,
    0,    0,  314,  137,    0,    0,  138,    0,    0,  224,
    0,  110,    0,    0,    0,  135,  154,  157,  163,    0,
    0,    0,  344,    0,    0,   76,    0,  484,    0,  483,
  539,  130,    0,  548,  202,    0,    0,    0,  173,    0,
    0,    0,  183,  543,    0,    0,    0,  821,  767,    0,
    0,    0,  792,    0,  825,    0,    0,  496,    0,  515,
  518,  525,  521,  159,  160,  523,    0,  538,    0,    0,
  809,  812,  802,    0,  806,  530,    0,    0,    0,  528,
    0,    0,  540,  829,  827,    0,  837,    0,  835,    0,
  675,  676,  674,  682,  554,  796,  617,  619,    0,  722,
  611,    0,    0,    0,  553,  437,  432,  435,  431,  471,
  467,  466,    0,  461,  427,  428,  438,    0,  472,  473,
  452,    0,    0,  902,  903,  441,  447,    0,  450,  477,
    0,    0,    0,    0,    0,    0,  150,  147,  148,  144,
  143,  862,  839,    0,  863,    0,  859,    0,  874,    0,
    0,    0,    0,  843,    0,   31,   26,  329,    0,  346,
  318,  317,    0,    0,    0,  136,  166,  631,  220,  106,
  352,  153,  347,    0,    0,    0,    0,    0,  349,   88,
   87,    0,   84,   80,   81,  479,    0,  129,    0,    0,
    0,  191,    0,  547,    0,    0,    0,    0,    0,  819,
    0,    0,  779,    0,    0,    0,    0,    0,  503,  502,
    0,    0,    0,  814,    0,    0,  803,  536,  531,    0,
    0,  527,    0,    0,    0,  765,  838,  836,  616,  610,
  609,  621,  469,    0,  459,  458,  451,  453,  454,  448,
  442,  446,    0,  476,  488,  440,  596,  158,    0,    0,
  841,    0,  867,    0,  882,  883,  876,  846,  848,  888,
   38,   14,    0,   36,    0,    0,  360,    0,    0,  357,
  319,    0,  141,    0,  139,    0,    0,    0,    0,  155,
    0,    0,  353,  354,   85,  131,  133,  134,  200,  201,
    0,  192,    0,    0,    0,  176,  184,  177,  179,    0,
  823,    0,  822,  774,    0,  780,    0,    0,  826,    0,
  524,  522,    0,  749,  808,    0,  810,    0,  532,    0,
  830,  828,    0,  468,  490,    0,  840,    0,    0,    0,
  860,    0,    0,    0,    0,   15,    0,    0,    0,  672,
  671,    0,  670,  356,    0,    0,  315,  140,    0,    0,
    0,  656,    0,    0,  164,  169,  187,    0,  198,    0,
    0,    0,  766,  820,    0,  781,  747,    0,  760,    0,
    0,  753,    0,  757,  813,  535,  534,  622,    0,  842,
  864,    0,    0,    0,  878,    0,  889,   39,   47,    0,
    0,  330,  359,  358,    0,  320,    0,  324,  167,  379,
  378,    0,  376,    0,  632,    0,  660,  221,  107,    0,
    0,    0,    0,  180,  178,    0,    0,  776,    0,    0,
  750,  754,    0,  758,  149,    0,  868,  885,  886,  879,
  849,   40,   37,   48,    0,    0,    0,    0,  323,    0,
    0,    0,    0,  661,    0,    0,  165,  186,  188,  197,
    0,  782,  759,    0,    0,    0,    0,  331,    0,  321,
  325,  168,  377,    0,    0,  633,    0,  222,  111,  108,
  768,  865,    0,  880,    0,    0,  667,    0,  668,  665,
    0,  663,  104,    0,  103,   95,   96,    0,    0,   92,
   94,   97,   98,   99,  100,  101,  102,    0,    0,    0,
  238,  231,  232,  230,  233,  234,  235,  236,  237,    0,
    0,  228,    0,    0,    0,    0,  869,  332,  328,    0,
    0,    0,   89,   93,  677,  281,  276,  280,  634,    0,
  225,  229,  223,  125,  118,  119,  117,  120,  121,  122,
  123,  124,  126,    0,    0,  115,  109,    0,    0,  666,
  664,    0,    0,    0,    0,    0,  289,    0,    0,  239,
    0,    0,  247,    0,  112,  116,    0,  866,    0,    0,
    0,  275,    0,  274,    0,    0,    0,  350,    0,    0,
    0,    0,    0,    0,  872,  870,    0,    0,    0,    0,
    0,    0,    0,    0,  310,  351,  242,  241,  240,  253,
  252,  249,  254,  255,  248,  267,  266,  259,  260,  256,
  258,  257,  261,  250,  251,  262,  263,  269,  268,  264,
  265,    0,  678,  127,  291,  295,  292,  272,  270,    0,
    0,  204,    0,  245,    0,    0,    0,    0,  278,    0,
    0,    0,  300,    0,  293,    0,    0,    0,    0,  290,
    0,  211,    0,  205,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  296,    0,  297,  273,  271,    0,  279,
  283,    0,    0,  208,  210,  311,  246,  304,    0,  308,
    0,  305,  309,  294,    0,    0,  288,    0,    0,  212,
  214,  206,    0,  303,  307,  284,  286,    0,    0,  312,
    0,    0,  218,  217,  216,  213,  215,    0,    0,    0,
  313,  285,  287,
  };
  protected static  short [] yyDgoto  = {             8,
    9,   10,   11,   12,   60,   13,   14,   15,   16,  943,
   55,   17,   18,  257,   35,   19,  716,  251,  679,  467,
  837,   92,  944,  835,  945, 1018, 1070, 1015, 1071,   21,
   22,   23,   24,   25,   26,   27,   28,  717,   30,   46,
   47,   48,   49,   50,  281,   94,  496,  497,  498,  306,
  606,  862, 1146, 1168, 1169, 1170, 1171, 1172, 1173, 1174,
 1175, 1176, 1177,   76,  258,  479,  693, 1031,  959, 1085,
 1150, 1126, 1195, 1224, 1194, 1225, 1226, 1081,  509,  510,
  966,  867,  525,  745, 1239,  480,  686,  687,  444,  445,
  820,  698,  546,  481,  482,  746,  854,  341,   31,  266,
   80,  483,  718,  855, 1090,  956, 1120,   77,  307,  719,
  720,  721,  722,  723,  870,  587,  871,  588,  873, 1274,
 1334, 1320, 1353, 1335, 1336, 1386, 1378, 1379,  691,  958,
 1148, 1125, 1193, 1190, 1191, 1192, 1240, 1279, 1262, 1241,
  271, 1302, 1322, 1243, 1317, 1316, 1178, 1207, 1257, 1350,
 1331, 1208, 1351,  607, 1381, 1382, 1256, 1325, 1315, 1342,
 1326, 1327, 1359, 1361, 1260, 1313, 1373, 1388,  683,  952,
  843, 1076, 1026, 1117, 1077, 1078, 1139,  946, 1115, 1155,
  383,   36,  160,   84,   38,  272,  840,  681,  486,  949,
  950, 1022,  261,  262,  354,  342, 1082, 1083,  162,  163,
  164,  343,  166,  167,  168,  169,  170,  171,  172,  173,
  174,  175,  176,  177,  178,  179,  180,  181,  182,  183,
  184,  185,  289,  797,  925,  402,  619,  806,  620,  621,
  920,  186,  437,  624,  608,  609,  610,  611,  791,  504,
  505,  187,  355,  626,  336,  535,  536,  537,  538,  384,
  337,  542,  747,  348,  761,  762,  899,  303,  513,  304,
  512,  188,  189,  190,  191,  192,  193,  194,  195,  196,
  197,  198,  199,  200,  201,  202,  203,  590,  591,  592,
  778,  779,  204,  580,  378, 1003,  205,  529,  689,  957,
 1123, 1179,   78, 1032, 1086, 1087, 1161, 1162, 1023,  568,
  361,  773, 1244,  569,  570,  308,  309,  310,  208,  209,
  210,  311,  312,  313,  314,  315,  316,  317,  318,  319,
  320,  321,  322,  222,  323,  581,  223,  224,  225,  226,
  227,  324,  228,  229,  230,  551,  994, 1050, 1051, 1052,
 1053, 1103, 1054,  231,  232,  233,  234,  520,  985,  882,
 1096,  521,  522, 1098, 1099,  235,  236,  237,  238,  239,
  240,  556,  557,  996,  751,  896,  752,  351,  727,  982,
  728,  887,  905,  904,  241,  454,  242,  455,  930, 1008,
  456,  675,  834,  831,  832, 1013,  457,  458,  459,  460,
  461,  462,  934,  665,  932, 1106, 1196, 1248, 1010, 1136,
 1229,  829,  671,  830, 1064, 1012, 1065, 1137, 1014,   52,
  245,   53,
  };
  protected static  short [] yySindex = {         -167,
    0, -203, -200, -207, -103,    0, -204,    0, -149,    0,
  -64,    0,    0,    0,    0,    0,    0,    0,    0,12358,
    0,    0,    0,    0,    0,    0,    0,    0,  -84,    0,
    0,    0, -230,  -42,  199,    0,  -69,    0,    0,    9,
    0,    0,    0,    4,  -42,  183,  242,  334,    0,    0,
    0, 6002,  390,    0, -204,    0,  -64,    0,    0,  -64,
    0,    0,    0, -197,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,11432,12514,    0,    0,  298,
 7470,  183,    0,    0,  346,    0,  442,  498,    4,  242,
  183,  361,    0,  465,    0,  -74,    0,  509,    0,    0,
  277,10889,  517,    0,  -19,  553, 6133,    0,    0,  -19,
    0,  -19,  -19, -136,  -19,    0,  -19,    0,   46,    0,
    0,10035,    0,    0,  -19,    0,  -19,    0,10035,    0,
  572,    0,    0,    0,  277,    0,    0,  -19, -258,  -19,
 8954,11640,    0,10035,    0,10767,10767,10767,10767,10767,
10767,10767,10767,    0,   57,    0,11680,    0,    0,  563,
  231,    0,  632,  692,  385,  583,    0,  584,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, -195,    0,  629,    0,
  724,   50,  474,  461,  585,  612,  619,  626,  618,  300,
  637,    0,    0,    0,    0,    0,    0, 2456,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  654,  665,    0,  335,  660,  134,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  245,  524,  390,    0,    0,    0,    0,    0,    0,    0,
  679,11718,  667,11718,  707,  749,  433,  285, 5664,    0,
    0,  347,  743,    0,    0,    0,    0,    0,  707,    0,
    0,  425,  295,  442,    0,    0,  755,    0,    0,10157,
    0,    0,10279,  704,    0,    0,    0,    0,10035,  -19,
  -19,  771,10035,   19,  743,  692,  172,    0,  741,    0,
11680,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  816,  149,11718, 6919,11680,10035,  786,  788,
10035,10035, 7425,  -53,  803,11768,  771,    0,  218,    0,
  791,    0,  806,11680,    0,  802,  418,  -19,    0,10035,
  572,10401,    0,    0,    0,10035, -223,  775, -212,  793,
 6133,    6,  808,    0,    0,    0,    0,    0,    0,    0,
    0,  824, 9425,    0,    0,    0,    0,11516,  831,  442,
    0,    0,  771,    0, -288,  180,    0,    0,  811, 9059,
 6526,    0,    0,    0,10279,10767,    0, 7294, 6657,  803,
 9059,    0,10035,10035,10035,10035,10035,10035,10035,10035,
10035,10035,10035,10767,10767,10767,11680,11680,10767,10767,
10767,10767,10767,10767,10767,10767,10767,10767,10767,10767,
10767,10767,10767,10767,10035,    0,    0,    0,    0,    0,
    0,    0,   95,  853,    0,    0,    0,    0,11792,11842,
  823,    0,    0,    0,    0,  -17,  562,    0,    0,    0,
    0,    0,    0,    0,    0,  825,  872,  667,    0,  869,
 -192,    0,  833,    0,    0,  988, 1002,    4,    0,  123,
    0,  382,  891, 5664,  848,  850,    0,    0,    0,    0,
11680,    0,    0,    0,  107,  453,    0,    0,    0,    0,
 -172,    0,    0,  537,    0,  442,  892,  885,  893,    0,
  898,  192,  572,  -19,    0,    0,  857,    0,    0,  903,
    0,  906, -215,    0,  905,    0,    0,    0,  910,  915,
    0,  -61,  105,    0,  920,    0,  931,    0,    0,    0,
    0,  568, 6788,    0,  707,    0,  908,    0,    0,  917,
10035,    0,    0,  -19,  572,  527,    0, 7510,  938,    0,
  940,  941,  944,10035, 1011,10035, 1023, -271, 6133,    0,
    0,    0,    0,    0,    0,10767,    0,    0,  945,  572,
 6133,    0,    0,    0,  707,    4,  907,11880,    0,  946,
    0,  952,10767,    0,    0, -198,    0,   10,    0,    0,
10035,10035,  955, 9181,    0,    0,  119,  959,    0,    0,
    0,  607,  684,    0,  724, 9547,  159,    0,  -57, -158,
    0,  913,    0,  -27,    0,    0,  968,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  724,  724,   50,   50,  474,  474,  474,
  474,  461,  461,  585,  612,  619,  626,  618,    0,  966,
10035, 9303,    0,  660,10035,   43,  927,   70,  928,  963,
10035,    0,    0,    0,  987,    0,    0,    0,  970,  978,
  989, 7555,    0,    0,  981,  475,    0,  982,  667,    0,
  667,    0,  667,  983,  833,    0,    0,    0,    0,  984,
  442,  821,    0,  358,10035,    0,10157,    0,10279,    0,
    0,    0,  741,    0,    0,  594,  -84,  985,    0,  980,
  986,  990,    0,    0,10035,  977,  698,    0,    0, 7050,
10035, 1063,    0, 6133,    0,  947, 9669,    0, 7425,    0,
    0,    0,    0,    0,    0,    0,  992,    0,  991,11596,
    0,    0,    0,  572,    0,    0,   74,  487,  954,    0,
  995,  997,    0,    0,    0, 6133,    0,10035,    0,10035,
    0,    0,    0,    0,    0,    0,    0,    0,10035,    0,
    0,  957,11516, 1016,    0,    0,    0,    0,    0,    0,
    0,    0, 8937,    0,    0,    0,    0, 9181,    0,    0,
    0, -126, 9791,    0,    0,    0,    0, 7172,    0,    0,
  771,10035, 1006,10035, 1004,11768,    0,    0,    0,    0,
    0,    0,    0, 1081,    0, 1084,    0,  830,    0, 1009,
10035,10035,  972,    0, -156,    0,    0,    0, -168,    0,
    0,    0, 1018, 9913,  973,    0,    0,    0,    0,    0,
    0,    0,    0, 9669,  192,  192, 1005, 1017,    0,    0,
    0,10035,    0,    0,    0,    0, 9669,    0,  594,11880,
  511,    0,11680,    0,  270, 1134, 1136, 1024,10035,    0,
  857,10035,    0, 1025,10035, 1121, 6133,  442,    0,    0,
 9669, 1036, 1038,    0,  993,  572,    0,    0,    0,  998,
 -102,    0, 1007, 6133, 6133,    0,    0,    0,    0,    0,
    0,    0,    0,  706,    0,    0,    0,    0,    0,    0,
    0,    0,  803,    0,    0,    0,    0,    0, 1037,10035,
    0,10035,    0,10035,    0,    0,    0,    0,    0,    0,
    0,    0, 1047,    0, -204,  192,    0,  520,  460,    0,
    0,  970,    0, 1042,    0,  192, 1044, 1044, 1044,    0,
 1045, 1048,    0,    0,    0,    0,    0,    0,    0,    0,
 -187,    0, -180, 1053, 1054,    0,    0,    0,    0, 1057,
    0, 6133,    0,    0, 1058,    0, 1066, 6133,    0,    0,
    0,    0, -185,    0,    0, 1068,    0, -102,    0, 1031,
    0,    0,  572,    0,    0,10035,    0,10035, 1080,10035,
    0,10035, 1088,  562, 1074,    0, -204,  -84, 1071,    0,
    0, 1039,    0,    0, -168,  -84,    0,    0, 1083, 7600,
 1116,    0, 1116, 1116,    0,    0,    0,  388,    0, 1072,
 1200, 1201,    0,    0, 7050,    0,    0,10035,    0, 1092,
 -185,    0, -185,    0,    0,    0,    0,    0, 1091,    0,
    0, 1114,  839, 1090,    0,10035,    0,    0,    0, -118,
  -84,    0,    0,    0, 1050,    0, 1094,    0,    0,    0,
    0, 1095,    0, 1051,    0, 1116,    0,    0,    0, 1116,
 1100,10035,10035,    0,    0, 1099,  906,    0, 6133, 1097,
    0,    0, 6133,    0,    0,10035,    0,    0,    0,    0,
    0,    0,    0,    0, 1116,    0, 1105,  -84,    0, 1116,
 7600, 1101, 1107,    0, 1108, 1111,    0,    0,    0,    0,
 6133,    0,    0, 6133, 1129,10035,10035,    0, 1103,    0,
    0,    0,    0,11556, -160,    0,  -84,    0,    0,    0,
    0,    0, 1131,    0, 1109,10035,    0, 1115,    0,    0,
 1113,    0,    0,12514,    0,    0,    0, 1120, -160,    0,
    0,    0,    0,    0,    0,    0,    0,  499,  970,12514,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1122,
  -84,    0,  970,  -84,  970,10035,    0,    0,    0, 1117,
11556,11197,    0,    0,    0,    0,    0,    0,    0,11229,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1123,  -84,    0,    0, 1135,10035,    0,
    0,11680,11680, -132, -121,  707,    0,    4, 8873,    0,
 1185,    0,    0, 6133,    0,    0, 1079,    0, 1135,  741,
  833,    0,11680,    0,11680, 1086, 1124,    0,  382, 1127,
 -228,  522, 2042, 1153,    0,    0,  720,  731,   72, 1126,
 1151, 1152,  192, 1157,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1155,    0,    0,    0,    0,    0,    0,    0, 1130,
 1158,    0,  192,    0,  -77,  192,  192,  298,    0,  -68,
 1161,  192,    0,12296,    0,  -84,  -84, 1160, 1163,    0,
 1172,    0,12514,    0,  -68,  -68, 1166, 1176, 1291, 1294,
12328, 1186,12390,    0,12420,    0,    0,    0,  131,    0,
    0,  834, 1187,    0,    0,    0,    0,    0,  572,    0,
  572,    0,    0,    0,12452,12482,    0, 1182, 1190,    0,
    0,    0,  -68,    0,    0,    0,    0, -169, -169,    0,
 9059, 9059,    0,    0,    0,    0,    0, 1191, 1193, 1194,
    0,    0,    0,
  };
  protected static  short [] yyRindex = {         2064,
    0,    0,    0,    0, 6264,    0,    0,    0, 2064,    0,
 1565,    0,    0,    0,    0,    0,    0,    0,    0,11303,
    0,    0,    0,    0,    0,    0,    0,    0, 1112,    0,
    0,    0,  550, 1192,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  649,  548,    0, 1202,    0,    0,    0,
    0,    0, 1908,    0,   35,    0, 1565,    0,    0, 1565,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  353,10957,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 2303,    0, 2555, 1202,
 1204,    0,    0,  685,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1203,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,11920,    0,
    0, 1199,    0,    0,    0,    0,    0,    0, 1199,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   63,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 5726,    0,    0,    0,    0,    0,
  235,    0,    0, 3725, 5842, 3489,    0, 3016,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 3959,    0,
 4040,  901, 4358, 4743, 4974, 5128, 5282, 5436, 5590,  579,
 1188,    0,    0,    0,    0,    0,    0,   39,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  741,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  854,  854, 1986,    0,    0,    0,    0,    0,    0,    0,
 1209,    0,    0,    0,  804,  355, 2699,    0,    0,    0,
    0, 3172, 2699,    0,    0,    0,    0,    0, 3879,    0,
    0,    0,    0, 2303,    0,    0,    0,    0,    0,  748,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   63,    0, 2780,  235,    0,  597,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1205,    0,    0,    0,    0,
    0,    0, 1210,    0,    0,    0, 2147,    0, 2780,    0,
    0,    0, 3569,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  602,    0,  602,    0,
  -31,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1207,    0, 2780,
    0,    0, 1162,    0,    0,    0,    0,    0,    0,  157,
    0,    0,    0,    0,    0,    0,    0,   76,    0, 3253,
 1208,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  623,  705,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   30,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1215,
    0,    0,    0,    0,    0, 1168, 1169,  326,    0,    0,
    0,  750,  598,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 8098,    0,    0,    0,    0,    0,
 5782,    0,    0,    0,    0, 2780,    0,  761, 1211,    0,
    0,11348,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1212,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  633,  792,    0,    0, 1217,    0,    0,    0,
    0,    0,    0,    0,    3,    0,   45,    0,    0,    0,
    0,    0,    0, 1219,    0, 1465,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   78,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,10523,
    0,    0,    0,    0, -178,  481,    0,    0,    0, 1218,
    0,    0,    0,    0,    0, 2780,    0, 2780,    0,    0,
    0,    0,   99,    0,    0,    0,    0,  170,    0,    0,
    0,    0,    0,    0, 4120,    0, 3798,    0,    0,   81,
    0,  -26,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 4201, 4281, 3410, 3646, 4435, 4512, 4589,
 4666, 4820, 4897, 5051, 5205, 5359, 5513, 5667,    0,    0,
 1221,    0,    0,    0,    0,  602,    0,  602,    0,    0,
    0,    0,    0,    0, 2969,    0,    0,    0, 1334,    0,
  193,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1216,  257,    0,10645,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,11958, 8249,    0,    0,  766,
  773,  777,    0,    0,    0,  779,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1224,    0,
    0,    0,    0,    0,    0,    0, 1227,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  528,  370,    0,    0,
    0, 1228,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  113,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 3333,    0, 2860,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  331,    0,  424,
    0,    0,    0,    0, 7685,    0,    0,    0, -146,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,11348,11348,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,12008,    0,
12032,    0,    0,    0,11476,    0,    0,    0,    0,    0,
    0, 1220,    0,    0,    0, 1628,    0,  800,    0,    0,
 1231,    0,    0,    0, 1230,    0,    0,    0,    0,    0,
  528,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 3253,    0,    0,    0,    0,    0,  672,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 7769,    0, 7853,11348,    0, 1189,    0,    0,
    0, 1801,    0,    0,    0,11348,  293,  293,  293,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  782,  785,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  935,
    0,    0, 1237,    0,    0,    0,    0,  528,    0,  838,
    0,    0,10523,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   32,    0,    0, 7937, 8021,    0,    0,
    0,    0,    0,    0, -146,  -88,    0,    0,    0,    0,
 1240,    0, 1240, 1240,    0,    0,    0,  677,    0,  699,
    0,    0,    0,    0, 1238,    0,    0,    0,    0,    0,
 1241,    0, 6395,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  371,  459,    0,    0,    0,    0,    0,    0,
 8105,    0,    0,    0,    0,    0, 1227,    0,    0,    0,
    0,  294,    0,    0,    0,  574,    0,    0,    0,  590,
    0,    0,    0,    0,    0,    0, 1242,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1243,  392,    0,    8,    0,  590,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, -174,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 8348,    0, 8668,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  273,    0,    0,11056,    0,    0,    0,    0, 8422,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1801,11124,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 8742,    0, 1801, 8508, 1801,    0,    0,    0,    0,    0,
    0,  353,    0,    0,    0,    0,    0,    0,    0,  353,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 8582,    0,    0,  540,    0,    0,
    0,    0,    0,    0,    0, 1727,    0, 8805,    0,    0,
    0, 8835,    0, 1250,    0,    0,    0,    0,  540,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  606,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  750,    0,
    0,    0,11348,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,11392,    0,12068,11348,11348,    0,    0,12261,
    0,11348,    0,    0,    0,12176,12229,    0,    0,    0,
  609,    0,  849,    0,12103,12141,    0,    0, 1254, 1255,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,12261,    0,    0,    0,    0,    0,    0,    0,
 1208, 1208,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,
  };
  protected static  short [] yyGindex = {            0,
 1570,  721,   31,    0,    0,   41, -754,   -4, -913,    0,
  680,    0,    0,   20,    0,    0,    1,    0,    0,    0,
 -907,  -86,    0,    0,    0,    0,    0,    0,    0, -746,
 -529, -419,    0,    0,    0,    0,    0,   48,  -11,    0,
 1580,    0, 1541,    0,    0,    0,    0,  926,  932,  -52,
 -254,    0,    0,    0,    0,  471, -672, -604, -571, -409,
 -403, -363, -595,-1118,    0, -221,    0,  255,    0, -609,
    0,    0,    0,    0,    0,    0,  417,  -14,  397,  936,
    0,    0, -829, -320,  -16,  402,    0,  809,    0,  996,
    0, 1223,  832,  964, -382, -646,    0, -106,    0,  343,
    0, -456, -812,    0,    0,    0,    0, -247,  -46,    0,
    0,  787,  798,  805,    0, -546,    0, -613,  794,    0,
 -691,    0,    0,    0,    0,  299,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  483,    0,    0,    0,    0,
  -71,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, -392,    0,    0,    0,    0,    0,    0,
  350,  356,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  561,    0,    0,    0,    0,
 -227,    0,  316,  -13,    0,    0,  979,    0,  444,    0,
  659,    0, -273, -309,  -72,  493,    0,  564,    0, 1542,
  -83,  -44,    0,    0,  -30,    0, -296,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   40,    0,    0,  100,    0,    0,    0,  879,
    0, -367, 1067, 1075,  895, 1089,  899,    0, 1096,  702,
  999,    0, -206,  767,    0,    0,    0,    0,  960, -100,
    0,    0,    0,    0,    0,    0, -725,    0,    0,    0,
    0,    0, 1082,    0,   96,  799,  703,  795, 1267, 1272,
 1273, 1274, 1276,    0, 1271,    0,    0,    0,  924,    0,
  708,    0,    0,    0,    0,    0,    0, -331,    0,    0,
    0,    0,  -75,    0,    0,  624,    0,  512,    0,  468,
    0,    0,    0,  611, -548,  -45, -347,  -39,    0, 1507,
    0,   16,    0,   34,   47,   52,   54,   58,   60,   61,
   62,   86,   94,    0, -693,    0,  387,    0, 1614,    0,
    0, -310,    0,    0,    0,    0,    0,    0,    0,  666,
    0,    0,  670,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  673,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1164,    0,    0,    0,    0,    0,    0,    0,
  843,    0,    0,    0,    0, -231,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1262,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  478,    0,    0,
    0,    0,    0,    0,    0,    0,  591,    0,    0,    0,
    0,    0,
  };
  protected static  short [] yyTable = {           158,
   20,  264,   54,  277,  260,  159,  206,  165,  627,   20,
  464,  484,  207,  572,  544,  519,  688,   79,  296,  442,
  774,   34,  346,   45,  563,  500,  547,  700,  503,  474,
  622,  470,  780,  267,  891,  489,  534,  967,  900,   57,
  886,  782,  961,  962, 1027, 1202,  335,   29,   41,   58,
  246,  517,   32,   20,  288,   39,   29,  297,  249,  259,
  397, 1210,  165,  684,  394,   45,  270,  211, 1037,  340,
  564,  298,  906,  275,   42, 1039,  340,  369,  731,  625,
  942,  566, 1048,  244,  347,  212, 1383,  947,  349,    1,
  889,  362,  393,  756,  771, 1163, 1276,  807,  213,  941,
   29,  273,  872,  214, 1069,  215,   43,    1,  334,  216,
   45,  217,  218,  219,  400,  298,  298,  298,  298,  298,
  298,  298,  298, 1252,  596,  353,  358,  360,   81,  810,
    2,  328,  597, 1019, 1254,   81,  503,  220, 1112,  329,
  503,  377,  379, 1029,  301,  221,   81,   59,   82,  325,
  772,  326,  327,   51,  331,  158,  332, 1114,   83,   59,
   81,  159,  206,  165,  344,   83,  345,    2,  207,  398,
  374,  399, 1253,  286,  350,  999,   83,  352, 1323,  356,
  260,  282,  260, 1255,  702,    2,   81, 1332, 1016,  488,
    3,  756,    1,  989,  282,  143,  394,  732,    4,    4,
  704,    3,  539,  390, 1384,   44,    4,  960,    3,   33,
 1001, 1002,   40,  808, 1352,  250,   83,    4, 1100,  287,
  685,  572,  786,  211,  393, 1038,  401,  499,  810,  900,
  502, 1049, 1040,  572,  369,  468,  507,  471,  853,  917,
  362,  212,  756,   20,  991,  812,  680, 1113,  376,  296,
    5,    6,    7,  260,  213,  969,   81,  972,  367,  214,
  493,  215, 1129, 1130,  548,  216,   59,  217,  218,  219,
  393, 1209, 1056,  465, 1057,  524,  330,  322,  528,  530,
  377,  165,    4,   58,  760, 1213,  511, 1227, 1044,    4,
   29,  891,  283,  220, 1047,  900,  284,  559,    4,  561,
  366,  221,  298,  528,  560,  283,  589,  165,  804,  736,
  595,  417,  523,  898,  540,  571,  165,   37,  541,   37,
  579,  573,  372,  971,   59,  377, 1199, 1306,   85,  550,
  350,  672,  673,  822,  679,  390,  823,  605,  502,  900,
  811,  819,  502,   87,  812,  900,  623,  418,  605,  286,
  628,  629,  630,  631,  632,  633,  634,  635,  636,  637,
  638,   37,   81,  825,  805,  298,  594,  367,   81,  367,
  373,  367,  367,   33,  367,  574,  367,   81,  851,  851,
  850,  850,  660,  298,  298,  298, 1367,  558,  298,  298,
  679,   37,   83,  878, 1368,  287,   37,   37, 1165,  374,
 1181,   81,  642,  643,  674, 1132,   37,   83,  264,  366,
  333,  366,  334,  366,  366,   81,  366,  367,  366,  883,
   59,   88, 1165, 1088, 1089,  419,  420,  575,   81,  375,
  788,   83,   81,  397,  667,  669, 1307, 1151,  661,  376,
  622,  443,  534,  680, 1181,   83,  444, 1214,  355,  374,
  697,  851,  500,  850,  503, 1369,   37,   37,   83,  366,
 1311,  661,   83,   81,  694,   81,  724,  848,  470,  849,
  470,  850,   37,  662, 1184,  508,  703,  376, 1214,  704,
 1127,  377,  460,  737,  460,  705,  260,  377,  795,  898,
  744,  615,  710,   83,  695,   83,  696,  443,  749,  680,
 1321,  374,  444, 1328, 1329, 1138,  547,  446,  753, 1338,
 1142,  767,  355,  769,  644,  645,  589,   81, 1184,  377,
  470, 1217,  515,  571,  165,  376,  455,  376,  381,  573,
  474,  355,  715,  777,  460,  571,  165,  803,  391,  456,
  796,  573, 1185,  915,  161,  298,  968,   83,  790,  790,
  984,  605, 1217,  725,  815,  447,  475,  355,    4,  355,
  374,  355,  298,  623,  355,  355,  355,   37,  263,   37,
  516,  355,   86,  263,  485, 1186,   81,  758,  455,  376,
  476,  345,  787,  448,  789,  774, 1185,  381,  449, 1218,
  450,  456,  598,  750,  295,   89,  451,  452, 1223,  161,
  599,  333,  625,  377,  923,  396,   83,  477,  340,  818,
  974,  662,  528,   91,  382, 1166,   37, 1182,  828, 1186,
 1218,  355, 1219,  355,  635,  355,  636,  340,  355, 1223,
  355,  655,  657,  263,  263,  355,    4,  662,  376, 1166,
   37,  143,   37, 1354, 1355,  286,  662,  333,  635,  263,
  636,   37,  863, 1219,  499,  296,  502,  655,  657,   37,
  892, 1182,  143,  860, 1215,   85,  453,  842,  492,  881,
  861,  265,  528,  553,  881,  635,  881,  636,  884,  881,
  881, 1380,  881,  881,  744,  345,  554,  857,  858,  165,
  345,  287,  345,   37,  345, 1215,  340,  345,  433,  345,
  161,  334,  881,  555,  345,   79,   93,  897,  298,  884,
  434,  589,  518,  334,  884,  907,  884,  908,  441,  884,
  884,  165,  884,  884,    2, 1167,  909, 1183,  279,   56,
  487,   59,   37,   37,  519,  895,  333, 1187,  562,  333,
  605,  381,  884, 1188,  263,  605,  263,    3,  661, 1167,
  918,  391,  881,  333, 1091,  572,    4,  326,  274,  924,
  697,  927,  875,  326,   37,   37, 1092,  875,  392,  875,
  327, 1183,  875,  875, 1216,  875,  875,  247,  938,  939,
  248, 1187, 1067, 1189, 1220,  490,  572, 1188,  485,  381,
 1221,  954,  884,  263,  853,  554,  491,  877,  589,  485,
   81,  744,  877,   85,  877, 1216,   37,  877,  877,  965,
  877,  877,  754, 1020,  524, 1220,  582,  263,  161,  263,
 1024, 1221,  706,  583,  707, 1021,  981, 1189,  263,  528,
 1222, 1025,  987,  280,  593,  584,  263,  340,  744,  948,
  423,  424,  165,  381,  161,  875,  845,  340,  846,  997,
  612,  340,  612,  161,  425,  426, 1259,  900,  973,  165,
  165, 1222,  448, 1205,  340,  421,  422,  449, 1269,  450,
  263,  276, 1206,  759,  990,  451,  452, 1007,  871, 1009,
  877, 1011,  285,  871,  340,  871,  143,  275,  871,  871,
  300,  871,  871,  340,  340, 1277,  572,  340,  340,  582,
  448,  869,  919,   37,  708,  449,  583,  450,  709,  263,
  263,  340,  926,  451,  452,   74,   74,  593,  584,   74,
  340,  302,  593,  340,  593,  593,  593,  593,  593,  593,
  593,  593,  593,  593,  593,  740,  143,  165,  659,  741,
   54,  263,  263,  165,  593,  463,  593,  659,  593,  395,
  593,  593,  593, 1059,  658, 1060,  777, 1062,  340, 1063,
  396,  871,  347,  658,  347,  398,  593,  398,  340,  347,
  203,  347,  340,  282,  799,  380,  347,  156,  709,  156,
  427,  428,  282,  263,  493,  340,  398,  398, 1389, 1390,
 1119,  484,  145,  429,  145,  524,  145,   37,  504,  340,
  593,  340,  385,  340,  504,  430,  398,  403,  431,  333,
  485,  398,  246, 1111,  340,  432,  340,  340,   20,  340,
  340,   66,  340,  340,  435,  948, 1075,  439,  404,  405,
  406,  407,  408,  409,  410,  411,  412,  413,  440,  524,
  524,  151,  340,  151,  185,  151,  185,  340,  185,  466,
  263,  800,   75, 1135,  165,  709,   75,  571,  165,  362,
  286,  161,  386,  573,  362,   37,  196,  880,  196,  881,
  196,   20,  443,  161,  734, 1004, 1341,  798,  734,  469,
  263,  387,  388, 1153, 1063,  473,  165,  362,  571,  165,
  472,  713,  612, 1304,  573, 1365,  613, 1366,   37,  381,
  362,  389,  695,  524, 1305,  362,  287,  414,  415,  416,
  362,   58,  362,  362,  362,  362,  506,   77, 1075,   77,
  362,  156,  494,  156,  362,  648,  649,  650,  651, 1160,
 1242,   37,  132,  174,  132,  174,  362,  334, 1242,  362,
  181,  362,  181, 1228,  182, 1164,  182, 1180,  824,  202,
  824,  202,  175,  508,  175,  514,  572,  506,  405,  526,
  405,  527,  405,  506,  549,  340,  340,  543,  340, 1164,
  340,  340,  391,  362,  263,  552, 1249,  576,  385,   81,
  839,  405,  405,  935,  936,   37, 1160,  565,   37,  340,
  340, 1180, 1108, 1109, 1164, 1370, 1371,  577,  571,  165,
  593,  405,  850,  850,  573,  567,  405,  533,  533,  340,
  637,  637, 1033, 1034,  340, 1278,  362, 1250, 1251,  646,
  647,  652,  653,  600,  664, 1164,  161,  364,  365,  366,
  367,  368,  369,  370,  371,  670,  678,  677, 1270,  572,
 1271,  682,  263,  690,  572,  478,  572,  572,  572,  572,
  572,  572,  572,  572,  572,  572,  572,  692,  161,  699,
  701,  711,  702,  712,  713,  264,  572,  714,  572,  726,
  572,  267,  572,  572,  572,  263,  729,  730,  733,  734,
  572,  572,  572,  572,  735,  738,  748,  572,  572,  264,
  264,  487,  572,  572,  572,  572,  572,  572,  572,  572,
  505,  483,  739,  483,  768,  483,  505,  763,  263,  764,
  765,  572, 1374,  766, 1375, 1324,  770,  783,  776,  781,
 1333,  784,  572,  793,  483,  483, 1343, 1345,  605,  605,
  798, 1385, 1385,   30,  436, 1333, 1333,  813,  814,  824,
  826,  827,  833,  836,  483,   37,  838,  844,  839,  483,
  847,  875,  856,  851,  874,  879,  885,  876,  912,  888,
  893,  877,  263,  891,  902,  263,  901,  903,   58,  910,
  398,  928,   60, 1333,  931,  963,   60,  933,   60,  161,
  937,   60,  951,   60,  940,  685,   60,  964,   60,  978,
   60,  979,   60,  980,  986,   60,  161,  161,   60,   60,
  988,  992,  993, 1006,    3,  995,   60,   60,   60, 1028,
  998,   60,   60,   60, 1035,   60, 1030, 1036,   60, 1000,
   60,   60,   60,   60, 1041, 1042, 1061,   60,   60,   60,
 1043, 1045,   60,   60,   60, 1046,   37, 1055, 1066, 1068,
 1072,   60,   60,  595,   60,   60,  898,   60,   60,   60,
 1093, 1073, 1079,   60, 1084, 1094, 1095, 1101, 1105,   37,
 1107, 1110, 1116, 1122,  801, 1118, 1121, 1128, 1131, 1133,
 1140, 1145, 1147, 1144,  161, 1149, 1152,  614, 1197,  614,
  161, 1156, 1198, 1200, 1201, 1203, 1230, 1211, 1245, 1263,
 1247, 1265, 1273, 1275, 1308,  639,  640,  641, 1272, 1318,
  614,  614,  614,  614,  614,  614,  614,  614,  614,  614,
  614,  614,  614,  614,  614,  614,   37,   37, 1303, 1309,
 1310, 1312,  263, 1314,   60,   37,  595, 1319, 1337, 1347,
 1356,  595, 1348,  595,  595,  595,  595,  595,  595,  595,
  595,  595,  595,  595, 1349, 1357, 1358,   37,   37, 1360,
 1376, 1364, 1372,  595,  485,  595, 1391,  595, 1377,  595,
  595,  595, 1392, 1393,    7,   34,  485,  544,   37,   32,
   37,   33,  799,   25,  510,  499,  613,  455,  769,  316,
  219,  105,  500,  811,  735,  772,  340,  614,  799,  498,
   30,  161,   32,  773,   30,  161,   33,  529,   30,  807,
   30,  669,  751,   30,  658,   30,  752,  775,   30,  595,
   30,  777,   30,  263,   30,  679,  658,   30,  302,  306,
   30,   30,  243,  161, 1017,   90,  161,  746,   30,   30,
   30,  278,  864,   30,   30,   30,  263,   30,  865, 1204,
   30, 1246,   30,   30,   30,   30, 1267,  929,  868,   30,
   30,   30, 1268,  955,   30,   30,   30,  775,  852,  821,
 1330,  975,  970,   30,   30,  663,   30,   30,   30,   30,
   30,   30,  976, 1212,  785,   30, 1346, 1387, 1141,  977,
  859, 1344, 1261, 1074, 1143,  363,  922,  914,  809, 1005,
  802,   30,  794,  263,  263,  654,  916,  792,  890,   30,
   30,  655,  263,  656,  659,  657,  911,  866,  658, 1124,
 1058, 1264, 1231, 1134,  438,  299, 1102, 1097,  676,  755,
  801,  801, 1104,  983,  263,  263, 1266, 1154,  801,  801,
  801,  801,  801,    0,  801,  801,  161,  801,  801,  801,
  801,  801,  801,  801,  801,  263,   30,  263,    0,  801,
    0,  801,  801,  801,  801,  801,  801,    0,    0,  801,
    0,    0,    0,  801,  801,    0,  801,  801,  801,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  801,    0,
  801,    0,  801,  801,    0,    0,  801,    0,  801,  801,
  801,  801,  801,  801,  801,  801,  801,  801,  801,  801,
   30,  801,    0,    0,  801,    0,    0,    0,  801,  801,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  801,
  801,    0,    0,  801,    0,    0,    0,    0,  801,  801,
  801,  801,  801,    0,    0,    0,  801,    0,  801,    0,
    0,    0,    0,    0,  801,  801,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  801,  801,  801,  801,
    0,  801,    0,  746,  746,    0,  801,    0,    0,  614,
    0,  746,  746,  746,  746,  746,    0,  746,  746,    0,
  746,  746,  746,  746,  746,  746,  746,  899,    0,    0,
    0,    0,  746,    0,  746,  746,  746,  746,  746,  746,
    0,    0,  746,    0,    0,    0,  746,  746,    0,  746,
  746,  746,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  746,    0,  746,    0,  746,  746,    0,    0,  746,
    0,  746,  746,  746,  746,  746,  746,  746,  746,  746,
  746,  746,  746,    0,  746,    0,    0,  746,    0,    0,
    0,  746,  746,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  896,    0,  362,    0,    0,
    0,    0,  746,  746,    0,    0,  746,    0,    0,    0,
    0,  746,  746,  746,  746,  746,    0,    0,    0,  746,
  362,  746,    0,    0,    0,    0,    0,  746,  746,    0,
    0,    0,    0,  362,    0,    0,    0,    0,  362,    0,
    0,  244,    0,  362,    0,  362,  362,  362,  362,  746,
  746,  746,  746,  362,  746,    0,    0,  362,    0,  746,
    0,  362,    0,    0,    0,    0,   30,   30,    0,  362,
    0,   30,  362,    7,  362,   30,    0,   30,    0,    0,
   30,    0,   30,   30,    0,   30,    0,   30,    0,   30,
    0,   30,   30,   30,   30,    0,    0,   30,   30,    0,
    0,    0,    0,   30,    0,   30,   30,   30,    0,    0,
   30,   30,   30,    0,   30,    0,    0,   30,    0,   30,
   30,   30,   30,    0,    0,    0,   30,   30,   30,    0,
    0,   30,   30,   30,    0,    0,    0,    0,    0,    0,
   30,   30,    0,   30,   30,   30,   30,   30,   30,  362,
    0,    0,   30,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   30,    0,
    0,    0,    0,    0,  899,    0,   30,   30,   59,    0,
    0,    0,   59,    0,   59,   30,    0,   59,    0,   59,
    0,    0,   59,    0,   59,    0,   59,    0,   59,    0,
    0,   59,    0,    0,   59,   59,    0,    0,    0,    0,
    0,    0,   59,   59,   59,    0,    0,   59,   59,   59,
    0,   59,    0,   30,   59,    0,   59,   59,   59,   59,
    0,    0,    0,   59,   59,   59,    0,    0,   59,   59,
   59,    0,    0,    0,    0,    0,    0,   59,   59,    0,
   59,   59,  896,   59,   59,   59,   59,    0,    0,   59,
   59,    0,   59,    0,    0,   59,    0,   59,    0,    0,
   59,    0,   59,    0,   59,    0,   59,    0,    0,   59,
    0,    0,   59,   59,    0,    0,    0,    0,    0,    0,
   59,   59,   59,    0,    0,   59,   59,   59,    0,   59,
    0,    0,   59,    0,   59,   59,   59,   59,    0,    0,
    0,   59,   59,   59,    0,    0,   59,   59,   59,    0,
    0,    0,    0,    0,    0,   59,   59,    0,   59,   59,
   59,   59,   59,   59,   59,    0, 1280,   59,   59,    0,
   59,    0,    0,   59,    0,   59,    0,    0,   59,    0,
   59,    0,   59,    0,   59,    0,    0,   59,    0,    0,
   59,   59,    0,    0,    0,    0,    0,    0,   59,   59,
   59,    0,    0,   59,   59,   59,    0,   59, 1281,    0,
   59,    0,   59,   59,   59,   59,    0,    0,    0,   59,
   59,   59,    0,    0,   59,   59,   59,    0,    0,    0,
    0,    0,    0,   59,   59,    0,   59,   59,   59,   59,
   59,   59,  512,    0,    0,   59,    0,  512,  512,    0,
    0,    0,    0,    0,    0,    0, 1282, 1283, 1284, 1285,
    0, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293,    0,
  512, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301,    0,
  512,    0,    0,  512,  512,    0,    0,    0,  512,    0,
    0,  512,    0,  512,    0,  512,  512,  512,  512,    0,
    0,    0,    0,  512,    0,    0,    0,  512,    0,    0,
    0,  512,    0,    0,    0,    0,   59,    0,    0,  512,
    0,    0,  512,    0,  512,  512,    0,    0,    0,    0,
  512,    0,  512,  512,  512,  512,  512,  512,  512,  512,
  512,  512,  512,  512,    0,    0,    0,  512,    0,    0,
    0,  512,  512,    0,  512,  512,  512,  512,  512,  512,
  512,    0,  512,  512,    0,  512,  512,  512,  512,  512,
  512,  512,  512,  512,  512,    0,  512,  512,  512,  512,
  512,  512,  512,  512,  512,  512,  512,  512,  512,  512,
  512,  512,  512,  512,  512,  512,  512,  512,  340,  512,
    0,  512,    0,  340,  340,    0,    0,    0,  512,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  340,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  340,    0,    0,  340,
  340,    0,    0,    0,  340,    0,    0,  340,    0,  340,
    0,  340,  340,  340,  340,    0,    0,    0,    0,  340,
    0,    0,    0,  340,    0,    0,    0,  340,    0,    0,
    0,    0,    0,    0,    0,  340,    0,    0,  340,    0,
  340,  340,    0,    0,    0,    0,  340,    0,  340,  340,
  340,  340,  340,  340,  340,  340,  340,  340,  340,  340,
    0,    0,    0,  340,    0,    0,    0,  340,  340,  340,
  340,  340,  340,  340,  340,  340,  340,    0,  340,  340,
    0,    0,  340,  340,  340,  340,  340,    0,    0,  340,
  340,    0,    0,    0,  340,  340,  340,  340,  340,  340,
  340,  340,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   95,    0,  340,    0,  340,    0,  340,    0,   96,
   97,   98,   99,    0,  340,  100,  101,    0,  102,  103,
  104,  105,  106,  107,  108,    0,    0,    0,    0,    0,
  109,    0,  110,  111,  112,  113,  114,  115,    0,    0,
  116,    0,    0,    0,  117,  118,    0,  119,  120,  121,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  122,
    0,  123,    0,  124,  125,    0,    0,  126,    0,  127,
  128,  129,  130,  131,  132,  133,  134,  135,  136,  137,
  138,    0,  139,    0,    0,  140,    0,    0,    0,  141,
  142,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  340,    0,    0,    0,    0,  340,  340,    0,    0,    0,
  143,    0,    0,    0,  144,    0,    0,    0,    0,  145,
  146,  147,  148,  149,    0,    0,    0,  150,  340,  151,
    0,    0,    0,    0,    0,  152,  153,    0,  340,    0,
    0,  340,  340,    0,    0,    0,  340,    0,    0,    0,
    0,  340,    0,  340,  340,  340,  340,  154,  155,  156,
  157,  340,    0,    0,    0,  340,    0,  436,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  340,    0,    0,
  340,    0,  340,  340,    0,    0,    0,    0,  340,    0,
  340,  340,  340,  340,  340,  340,  340,  340,  340,  340,
  340,  340,    0,    0,    0,  340,    0,    0,    0,  340,
  340,  340,  340,  340,  340,  340,  340,  340,  340,    0,
  340,  340,    0,    0,  340,  340,  340,  340,  340,    0,
    0,  340,  340,    0,    0,    0,  340,  340,  340,  340,
  340,  340,  340,  340,  333,    0,    0,    0,    0,  333,
  333,    0,    0,    0,    0,  340,    0,  340,    0,  340,
    0,    0,    0,    0,    0,    0,  340,    0,    0,    0,
    0,    0,  333,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  333,    0,    0,  333,  333,    0,    0,    0,
  333,    0,    0,  333,    0,  333,    0,  333,  333,  333,
  333,    0,    0,    0,    0,  333,    0,    0,    0,  333,
    0,    0,    0,  333,    0,    0,    0,    0,    0,    0,
    0,  333,    0,    0,  333,  340,  333,  333,    0,    0,
    0,  340,  333,    0,  333,  333,  333,  333,  333,  333,
  333,  333,  333,  333,  333,    0,    0,    0,    0,  333,
    0,    0,    0,  333,  333,  333,  333,  333,  333,    0,
  333,  333,  333,    0,  333,  333,    0,  340,  333,  333,
  333,  333,  333,    0,    0,  333,  333,    0,    0,    0,
  333,  333,  333,  333,  333,  333,  333,  333,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  333,
    0,  333,    0,  333,    0,  439,    0,    0,  340,    0,
  333,  439,    0,  340,    0,  340,  340,  340,  340,  340,
  340,  340,  340,  340,  340,  340,  340,    0,    0,    0,
    0,    0,    0,    0,    0,  340,  340,  340,  340,  340,
  340,  340,  340,  340,    0,  340,  340,  439,  340,  340,
  340,  340,  340,  340,  340,  340,  340,  340,    0,  340,
  340,  340,  340,  340,  340,  340,  340,  340,  340,  340,
  340,  340,  340,  340,  340,  340,  340,  340,  340,  340,
  340,    0,  340,    0,  340,    0,    0,    0,  439,    0,
    0,  340,    0,  439,    0,  439,  439,  439,  439,  439,
  439,  439,  439,  439,  439,  439,  439,    0,    0,    0,
    0,    0,    0,    0,  887,  439,  439,  439,  439,  439,
  439,  439,  439,  439,    0,  439,  439,    0,  439,  439,
  439,  439,  439,  439,  439,  439,  439,  439,    0,  439,
  439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
  439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
  439,  403,  439,    0,  439,    0,    0,  403,    0,    0,
    0,  439,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  887,    0,    0,
    0,    0,  887,  403,  887,  887,  887,  887,  887,  887,
  887,  887,  887,  887,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  887,    0,  887,    0,  887,    0,
  887,  887,  887,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  403,    0,    0,    0,    0,  403,
    0,  403,  403,  403,  403,  403,  403,  403,  403,  403,
  403,  403,  403,    0,    0,    0,    0,    0,    0,    0,
    0,  403,  403,  403,  403,  403,  403,  403,  403,  403,
  887,  403,    0,    0,  403,  403,  403,  403,  403,  403,
  403,  403,  403,  403,    0,  403,  403,  403,  403,  403,
  403,  403,  403,  403,  403,  403,  403,  403,  403,  403,
  403,  403,  403,  403,  403,  403,  403,  370,  403,    0,
  403,    0,  370,  370,    0,    0,    0,  403,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  370,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  370,    0,    0,  370,  370,
    0,    0,    0,  370,    0,    0,  370,    0,  370,    0,
  370,  370,  370,  370,    0,    0,    0,    0,  370,    0,
    0,    0,  370,    0,    0,    0,  370,    0,    0,    0,
    0,    0,    0,    0,  370,    0,    0,  370,  519,  370,
  370,    0,    0,    0,  519,  370,    0,  370,  370,  370,
  370,  370,  370,  370,  370,  370,  370,  370,    0,    0,
    0,    0,  370,    0,    0,    0,  370,  370,    0,  370,
  370,  370,    0,  370,  370,  370,    0,  370,  370,    0,
  519,  370,  370,  370,  370,    0,    0,    0,  370,  370,
    0,    0,    0,  370,  370,  370,  370,  370,  370,  370,
  370,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  370,    0,  370,    0,    0,    0,  508,    0,
    0,  519,    0,  370,  508,    0,  519,    0,  519,  519,
  519,  519,  519,  519,  519,  519,  519,  519,  519,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  519,  519,
  519,  519,  519,  519,  519,  519,  519,    0,  519,  519,
  508,  519,  519,  519,  519,  519,  519,  519,  519,  519,
  519,    0,  519,  519,  519,  519,  519,  519,  519,  519,
  519,  519,  519,  519,  519,  519,  519,  519,  519,  519,
  519,  519,  519,  519,    0,  573,    0,  519,    0,    0,
    0,  508,    0,    0,  519,    0,  508,    0,  508,  508,
  508,  508,  508,  508,  508,  508,  508,  508,  508,    0,
    0,    0,    0,    0,    0,    0,    0,  508,  508,    0,
  508,  508,  508,  508,  508,  508,  508,    0,  508,  508,
    0,  508,  508,  508,  508,  508,  508,  508,  508,  508,
  508,    0,  508,  508,  508,  508,  508,  508,  508,  508,
  508,  508,  508,  508,  508,  508,  508,  508,  508,  508,
  508,  508,  508,  508,  399,    0,    0,  508,  573,    0,
  399,    0,    0,  573,  508,  573,  573,  573,  573,  573,
  573,  573,  573,  573,  573,  573,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  573,    0,  573,    0,  573,
    0,  573,  573,  573,    0,    0,  399,    0,    0,  573,
  573,  573,  573,    0,    0,    0,  573,  573,    0,    0,
    0,  573,  573,  573,  573,  573,  573,  573,  573,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  573,    0,    0,    0,  398,    0,    0,  399,    0,    0,
  398,  573,  399,    0,  399,  399,  399,  399,  399,  399,
  399,  399,  399,  399,  399,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  399,    0,  399,  399,  399,  399,
  399,  399,  399,    0,  399,  399,  398,  399,  399,  399,
  399,  399,  399,  399,  399,  399,  399,    0,  399,  399,
  399,  399,  399,  399,  399,  399,  399,  399,  399,  399,
  399,  399,  399,  399,  399,  399,  399,  399,  399,  399,
    0,  574,    0,  399,    0,    0,    0,  398,    0,    0,
  399,    0,  398,    0,  398,  398,  398,  398,  398,  398,
  398,  398,  398,  398,  398,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  398,    0,  398,  398,  398,  398,
  398,  398,  398,    0,  398,  398,    0,  398,  398,  398,
  398,  398,  398,  398,  398,  398,  398,    0,  398,  398,
  398,  398,  398,  398,  398,  398,  398,  398,  398,  398,
  398,  398,  398,  398,  398,  398,  398,  398,  398,  398,
  549,    0,    0,  398,  574,    0,  549,    0,    0,  574,
  398,  574,  574,  574,  574,  574,  574,  574,  574,  574,
  574,  574,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  574,    0,  574,    0,  574,    0,  574,  574,  574,
    0,    0,  549,    0,    0,  574,  574,  574,  574,    0,
    0,    0,  574,  574,    0,    0,    0,  574,  574,  574,
  574,  574,  574,  574,  574,    0,    0,    0,    0,    0,
    0,    0,    0,  340,    0,    0,  574,    0,    0,  340,
    0,    0,    0,  549,    0,    0,    0,  574,  549,    0,
  549,  549,  549,  549,  549,  549,  549,  549,  549,  549,
  549,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  549,    0,  549,    0,  549,  340,  549,  549,  549,    0,
  549,  549,    0,  549,  549,  549,  549,  549,  549,  549,
  549,  549,  549,    0,    0,    0,  549,  549,  549,  549,
  549,  549,  549,  549,  549,  549,  549,  549,  549,  549,
  549,  549,  549,  549,  365,  549,    0,    0,    0,    0,
  365,    0,    0,    0,    0,    0,  549,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  340,  340,    0,  340,    0,  340,  340,
    0,    0,  365,  340,  340,    0,  365,  340,  340,  340,
  340,  340,  340,  340,  340,  340,    0,  340,  340,  340,
  340,  340,  340,  340,  340,  340,  340,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  340,  340,    0,
    0,    0,  340,    0,  562,    0,    0,  365,    0,  340,
  562,    0,  365,    0,  365,  365,  365,  365,  365,  365,
  365,  365,  365,  365,  365,    0,    0,    0,    0,  365,
    0,    0,    0,  365,  365,    0,  365,  365,  365,    0,
  365,  365,  365,    0,  365,  365,  562,    0,  365,  365,
  365,  365,    0,    0,    0,  365,  365,    0,    0,    0,
  365,  365,  365,  365,  365,  365,  365,  365,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  365,
    0,  365,    0,    0,    0,  566,    0,  562,    0,    0,
  365,  566,  562,    0,  562,  562,  562,  562,  562,  562,
  562,  562,  562,  562,  562,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  562,    0,  562,    0,  562,    0,
  562,  562,  562,    0,  562,  562,    0,  566,  562,  562,
  562,  562,  562,  562,  562,  562,  562,    0,    0,    0,
  562,  562,  562,  562,  562,  562,  562,  562,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  562,
    0,    0,    0,    0,    0,  569,    0,    0,  566,    0,
  562,  569,    0,  566,    0,  566,  566,  566,  566,  566,
  566,  566,  566,  566,  566,  566,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  566,    0,  566,    0,  566,
    0,  566,  566,  566,    0,  566,  566,  569,    0,  566,
  566,  566,  566,    0,    0,    0,  566,  566,    0,    0,
    0,  566,  566,  566,  566,  566,  566,  566,  566,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  566,    0,    0,    0,    0,    0,  567,    0,  569,    0,
    0,  566,  567,  569,    0,  569,  569,  569,  569,  569,
  569,  569,  569,  569,  569,  569,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  569,    0,  569,    0,  569,
    0,  569,  569,  569,    0,  569,  569,    0,  567,  569,
  569,  569,  569,    0,    0,    0,  569,  569,    0,    0,
    0,  569,  569,  569,  569,  569,  569,  569,  569,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  569,    0,    0,    0,    0,    0,  568,    0,    0,  567,
    0,  569,  568,    0,  567,    0,  567,  567,  567,  567,
  567,  567,  567,  567,  567,  567,  567,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  567,    0,  567,    0,
  567,    0,  567,  567,  567,    0,  567,  567,  568,    0,
  567,  567,  567,  567,    0,    0,    0,  567,  567,    0,
    0,    0,  567,  567,  567,  567,  567,  567,  567,  567,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  567,    0,  575,    0,    0,    0,    0,    0,  568,
    0,    0,  567,    0,  568,    0,  568,  568,  568,  568,
  568,  568,  568,  568,  568,  568,  568,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  568,    0,  568,    0,
  568,    0,  568,  568,  568,    0,  568,  568,    0,    0,
  568,  568,  568,  568,    0,    0,    0,  568,  568,    0,
    0,    0,  568,  568,  568,  568,  568,  568,  568,  568,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  576,  568,    0,    0,    0,    0,  575,    0,    0,    0,
    0,  575,  568,  575,  575,  575,  575,  575,  575,  575,
  575,  575,  575,  575,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  575,    0,  575,    0,  575,    0,  575,
  575,  575,    0,    0,    0,    0,    0,  575,  575,  575,
  575,    0,    0,    0,  575,  575,    0,    0,    0,    0,
    0,  575,  575,  575,  575,  575,  575,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  577,  575,    0,
    0,    0,    0,  576,    0,    0,    0,    0,  576,  575,
  576,  576,  576,  576,  576,  576,  576,  576,  576,  576,
  576,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  576,    0,  576,    0,  576,    0,  576,  576,  576,    0,
    0,    0,    0,    0,  576,  576,  576,  576,    0,    0,
    0,  576,  576,    0,    0,    0,    0,    0,  576,  576,
  576,  576,  576,  576,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  578,  576,    0,    0,    0,    0,
  577,    0,    0,    0,    0,  577,  576,  577,  577,  577,
  577,  577,  577,  577,  577,  577,  577,  577,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  577,    0,  577,
    0,  577,    0,  577,  577,  577,    0,    0,    0,    0,
    0,  577,  577,  577,  577,    0,    0,    0,  577,  577,
    0,    0,    0,    0,    0,  577,  577,  577,  577,  577,
  577,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  579,  577,    0,    0,    0,    0,  578,    0,    0,
    0,    0,  578,  577,  578,  578,  578,  578,  578,  578,
  578,  578,  578,  578,  578,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  578,    0,  578,    0,  578,    0,
  578,  578,  578,    0,    0,    0,    0,    0,  578,  578,
  578,  578,    0,    0,    0,  578,  578,    0,    0,    0,
    0,    0,  578,  578,  578,  578,  578,  578,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  580,  578,
    0,    0,    0,    0,  579,    0,    0,    0,    0,  579,
  578,  579,  579,  579,  579,  579,  579,  579,  579,  579,
  579,  579,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  579,    0,  579,    0,  579,    0,  579,  579,  579,
    0,    0,    0,    0,    0,  579,  579,  579,  579,    0,
    0,    0,  579,  579,    0,    0,    0,    0,    0,  579,
  579,  579,  579,  579,  579,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  581,  579,    0,    0,    0,
    0,  580,    0,    0,    0,    0,  580,  579,  580,  580,
  580,  580,  580,  580,  580,  580,  580,  580,  580,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  580,    0,
  580,    0,  580,    0,  580,  580,  580,    0,    0,    0,
    0,    0,    0,    0,  580,  580,    0,    0,    0,  580,
  580,    0,    0,    0,    0,    0,    0,    0,  580,  580,
  580,  580,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  582,  580,    0,    0,    0,    0,  581,    0,
    0,    0,    0,  581,  580,  581,  581,  581,  581,  581,
  581,  581,  581,  581,  581,  581,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  581,    0,  581,    0,  581,
    0,  581,  581,  581,    0,    0,    0,    0,    0,    0,
    0,  581,  581,    0,    0,    0,  581,  581,    0,    0,
    0,    0,    0,    0,    0,  581,  581,  581,  581,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  583,
  581,    0,    0,    0,    0,  582,    0,    0,    0,    0,
  582,  581,  582,  582,  582,  582,  582,  582,  582,  582,
  582,  582,  582,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  582,    0,  582,    0,  582,    0,  582,  582,
  582,    0,    0,    0,    0,    0,    0,    0,  582,  582,
    0,    0,    0,  582,  582,    0,    0,    0,    0,    0,
    0,    0,  582,  582,  582,  582,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  584,  582,    0,    0,
    0,    0,  583,    0,    0,    0,    0,  583,  582,  583,
  583,  583,  583,  583,  583,  583,  583,  583,  583,  583,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  583,
    0,  583,    0,  583,    0,  583,  583,  583,    0,    0,
    0,    0,    0,    0,    0,  583,  583,    0,    0,    0,
  583,  583,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  583,  583,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  585,  583,    0,    0,    0,    0,  584,
    0,    0,    0,    0,  584,  583,  584,  584,  584,  584,
  584,  584,  584,  584,  584,  584,  584,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  584,    0,  584,    0,
  584,    0,  584,  584,  584,    0,    0,    0,    0,    0,
    0,    0,  584,  584,    0,    0,    0,  584,  584,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  584,  584,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  586,  584,    0,    0,    0,    0,  585,    0,    0,    0,
    0,  585,  584,  585,  585,  585,  585,  585,  585,  585,
  585,  585,  585,  585,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  585,    0,  585,    0,  585,    0,  585,
  585,  585,    0,    0,    0,    0,    0,    0,    0,    0,
  585,    0,    0,    0,  585,  585,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  585,  585,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  587,  585,    0,
    0,    0,    0,  586,    0,    0,    0,    0,  586,  585,
  586,  586,  586,  586,  586,  586,  586,  586,  586,  586,
  586,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  586,    0,  586,    0,  586,    0,  586,  586,  586,    0,
    0,    0,    0,    0,    0,    0,    0,  586,    0,    0,
    0,  586,  586,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  586,  586,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  588,  586,    0,    0,    0,    0,
  587,    0,    0,    0,    0,  587,  586,  587,  587,  587,
  587,  587,  587,  587,  587,  587,  587,  587,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  587,    0,  587,
    0,  587,    0,  587,  587,  587,    0,    0,    0,    0,
    0,    0,    0,    0,  587,    0,    0,    0,    0,  587,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  587,
  587,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  589,  587,    0,    0,    0,    0,  588,    0,    0,
    0,    0,  588,  587,  588,  588,  588,  588,  588,  588,
  588,  588,  588,  588,  588,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  588,    0,  588,    0,  588,    0,
  588,  588,  588,    0,    0,    0,    0,    0,    0,    0,
    0,  588,    0,    0,    0,    0,  588,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  588,  588,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  590,  588,
    0,    0,    0,    0,  589,    0,    0,    0,    0,  589,
  588,  589,  589,  589,  589,  589,  589,  589,  589,  589,
  589,  589,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  589,    0,  589,    0,  589,    0,  589,  589,  589,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  589,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  589,  589,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  591,  589,    0,    0,    0,
    0,  590,    0,    0,    0,    0,  590,  589,  590,  590,
  590,  590,  590,  590,  590,  590,  590,  590,  590,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  590,    0,
  590,    0,  590,    0,  590,  590,  590,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  590,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  590,  590,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  592,  590,   61,    0,    0,    0,  591,    0,
    0,    0,    0,  591,  590,  591,  591,  591,  591,  591,
  591,  591,  591,  591,  591,  591,    0,   62,    0,    0,
    0,    0,    0,    0,    0,  591,    0,  591,    0,  591,
   63,  591,  591,  591,    0,   65,    0,    0,    0,    0,
   66,    0,   67,   68,   69,   70,    0,  591,    0,    0,
   71,    0,    0,    0,   72,    0,    0,  340,  591,    0,
    0,    0,    0,    0,    0,    0,   73,    0,    0,   74,
  591,   75,    0,    0,    0,  592,    0,    0,    0,    0,
  592,  591,  592,  592,  592,  592,  592,  592,  592,  592,
  592,  592,  592,  340,    0,    0,    0,    0,    0,    0,
    0,    0,  592,    0,  592,    0,  592,    0,  592,  592,
  592,    0,    0,  340,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  592,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  592,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  478,  592,    0,  340,
    0,    0,  340,    0,    0,    0,    0,    0,  592,    0,
    0,    0,  340,    0,  340,    0,  340,    0,    0,  340,
    0,  340,  340,  398,  340,  340,  340,  340,  340,  340,
  340,  340,  340,  340,    0,  340,  340,  340,  340,  340,
  340,  340,  340,  340,  340,  340,  340,  340,  340,  340,
  340,  340,  340,  340,  340,  340,  340,    0,  340,  398,
  340,    0,    0,    0,    0,    0,    0,  340,  340,  340,
  340,  340,  340,  340,    0,    0,    0,  340,  340,    0,
  340,  340,  340,  340,  340,  340,  340,  340,  340,  340,
    0,  340,  340,  340,  340,  340,  340,  340,  340,  340,
  340,  340,  340,  340,  340,  340,  340,  340,  340,  340,
  340,  340,  340,    0,    0,    0,  340,    0,    0,    0,
    0,    0,    0,  340,    0,    0,    0,    0,    0,    0,
  398,  398,  398,  398,    0,  398,    0,  398,  398,    0,
  398,  398,  398,  398,  398,    0,  398,  398,  398,  398,
    0,  398,  398,  398,  398,  398,  398,  398,  398,  398,
  398,  398,  398,  398,  398,  398,  398,  398,  398,  398,
  398,  398,  398,    0,  333,    0,  398,   95,    0,    0,
    0,    0,    0,  398,    0,   96,   97,   98,   99,    0,
    0,  100,  101,    0,  102,  103,  104,  105,  106,  107,
  108,    0,    0,    0,    0,    0,  109,    0,  110,  111,
  112,  113,  114,  115,    0,    0,  116,    0,    0,    0,
  117,  118,    0,  119,  120,  121,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  122,    0,  123,    0,  124,
  125,    0,    0,  126,    0,  127,  128,  129,  130,  131,
  132,  133,  134,  135,  136,  137,  138,    0,  139,    0,
    0,  140,    0,    0,    0,  141,  142,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  143,    0,    0,    0,
  144,    0,    0,    0,    0,  145,  146,  147,  148,  149,
    0,    0,    0,  150,    0,  151,    0,    0,  305,    0,
    0,  152,  153,    0,    0,    0,   96,   97,   98,   99,
    0,    0,  100,  101,    0,  102,  103,  104,  105,  106,
  107,  108,    0,  154,  155,  156,  157,  109,    0,  110,
  111,  112,  113,  114,  115,    0,    0,  116,    0,    0,
    0,  117,  118,    0,  119,  120,  121,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  122,    0,  123,    0,
  124,  125,    0,    0,  126,    0,  127,  128,  129,  130,
  131,  132,  133,  134,  135,  136,  137,  138,    0,  139,
    0,    0,  140,    0,    0,    0,  141,  142,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  143,    0,    0,
    0,  144,    0,    0,    0,    0,  145,  146,  147,  148,
  149,    0,    0,    0,  150,    0,  151,    0,    0,  892,
    0,    0,  152,  153,    0,    0,    0,  892,  892,  892,
  892,    0,    0,  892,  892,    0,  892,  892,  892,  892,
  892,  892,  892,    0,  154,  155,  156,  157,  892,    0,
  892,  892,  892,  892,  892,  892,    0,    0,  892,    0,
    0,    0,  892,  892,    0,  892,  892,  892,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  892,    0,  892,
    0,  892,  892,    0,    0,  892,    0,  892,  892,  892,
  892,  892,  892,  892,  892,  892,  892,  892,  892,    0,
  892,    0,    0,  892,    0,    0,    0,  892,  892,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  892,    0,
    0,    0,  892,    0,    0,    0,    0,  892,  892,  892,
  892,  892,    0,    0,    0,  892,    0,  892,    0,    0,
  755,    0,    0,  892,  892,    0,    0,    0,  755,  755,
  755,  755,    0,    0,  755,  755,    0,  755,  755,  755,
  755,  755,  755,  755,    0,  892,  892,  892,  892,  755,
    0,  755,  755,  755,  755,  755,  755,    0,    0,  755,
    0,    0,    0,  755,  755,    0,  755,  755,  755,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  755,    0,
  755,    0,  755,  755,    0,    0,  755,    0,  755,  755,
  755,  755,  755,  755,  755,  755,  755,  755,  755,  755,
    0,  755,    0,    0,  755,    0,    0,    0,  755,  755,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  755,
    0,    0,    0,  755,    0,    0,    0,    0,  755,  755,
  755,  755,  755,    0,    0,    0,  755,    0,  755,    0,
    0,  539,    0,    0,  755,  755,    0,    0,    0,   96,
   97,    0,   99,    0,    0,  100,  290,    0,    0,    0,
  104,  105,  106,    0,  108,    0,  755,  755,  755,  755,
  109,    0,    0,  111,    0,    0,    0,    0,    0,    0,
  116,    0,    0,    0,    0,  118,    0,  119,  120,  121,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  123,    0,  124,  125,    0,    0,  126,    0,    0,
  128,    0,  130,    0,  132,  133,  134,  291,    0,  137,
    0,    0,  338,    0,    0,    0,    0,    0,    0,  141,
  142,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  540,  144,    0,    0,  541,    0,    0,
  146,  147,  148,  149,    0,    0,    0,  150,    0,  151,
    0,    0,  539,    0,    0,  152,  153,    0,    0,    0,
   96,   97,    0,   99,    0,    0,  100,  290,    0,    0,
    0,  104,  105,  106,    0,  108,    0,  154,  501,  156,
  157,  109,    0,    0,  111,    0,    0,    0,    0,    0,
    0,  116,    0,    0,    0,    0,  118,    0,  119,  120,
  121,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  123,    0,  124,  125,    0,    0,  126,    0,
    0,  128,    0,  130,    0,  132,  133,  134,  291,    0,
  137,    0,    0,  338,    0,    0,    0,    0,    0,    0,
  141,  142,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  540,  144,    0,    0,  541,    0,
    0,  146,  147,  148,  149,    0,    0,    0,  150,    0,
  151,    0,    0,  742,    0,    0,  152,  153,    0,    0,
    0,   96,   97,    0,   99,    0,    0,  100,  290,    0,
    0,    0,  104,  105,  106,    0,  108,    0,  154,  339,
  156,  157,  109,    0,    0,  111,    0,    0,    0,    0,
    0,    0,  116,    0,    0,    0,    0,  118,    0,  119,
  120,  121,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  123,    0,  124,  125,    0,    0,  126,
    0,    0,  128,    0,  130,    0,  132,  133,  134,  291,
    0,  137,    0,    0,  338,    0,    0,    0,    0,    0,
    0,  141,  142,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  543,  743,    0,    0,  144,    0,    0,    0,
    0,    0,  146,  147,  148,  149,    0,    0,    0,  150,
    0,  151,    0,    0,  305,    0,    0,  152,  153,    0,
    0,    0,   96,   97,    0,   99,    0,    0,  100,  290,
    0,    0,    0,  104,  105,  106,    0,  108,    0,  154,
  339,  156,  157,  109,    0,    0,  111,    0,    0,    0,
    0,    0,    0,  116,    0,    0,    0,    0,  118,    0,
  119,  120,  121,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  123,    0,  124,  125,    0,    0,
  126,    0,    0,  128,    0,  130,    0,  132,  133,  134,
  291,    0,  137,    0,    0,  139,    0,    0,    0,    0,
    0,    0,  141,  142,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  144,    0,    0,
    0,    0,    0,  146,  147,  148,  149,    0,    0,    0,
  150,    0,  151,    0,    0,  305,    0,    0,  152,  153,
    0,    0,    0,   96,   97,    0,   99,    0,    0,  100,
  290,    0,    0,    0,  104,  105,  106,    0,  108,    0,
  154,  339,  156,  157,  109,    0,    0,  111,    0,    0,
    0,    0,    0,    0,  116,    0,    0,    0,    0,  118,
    0,  119,  120,  121,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  123,    0,  124,  125,    0,
    0,  126,    0,    0,  128,    0,  130,    0,  132,  133,
  134,  291,    0,  137,    0,    0,  338,    0,    0,    0,
    0,    0,    0,  141,  142,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  144,    0,
    0,    0,    0,    0,  146,  147,  148,  149,    0,    0,
    0,  150,    0,  151,    0,   96,   97,    0,   99,  152,
  153,  100,  290,    0,    0,    0,  104,  105,  106,    0,
  108,    0,    0,    0,    0,    0,  109,    0,    0,  111,
    0,  154,  339,  156,  157,    0,  116,    0,    0,    0,
    0,  118,    0,  119,  120,  121,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  123,    0,  124,
  125,    0,    0,  126,    0,    0,  128,    0,  130,    0,
  132,  133,  134,  291,    0,  137,    0,    0,  338,    0,
    0,    0,    0,    0,    0,  141,  142,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  616,  921,    0,    0,
  144,    0,    0,    0,    0,    0,  146,  147,  148,  149,
    0,    0,    0,  150,    0,  151,    0,   96,   97,    0,
   99,  152,  153,  100,  290,    0,    0,    0,  104,  105,
  106,    0,  108,    0,    0,    0,    0,    0,  109,    0,
    0,  111,    0,  154,  617,  156,  157,    0,  116,    0,
    0,    0,  618,  118,    0,  119,  120,  121,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  123,
    0,  124,  125,    0,    0,  126,    0,    0,  128,    0,
  130,    0,  132,  133,  134,  291,    0,  137,    0,    0,
  338,    0,    0,    0,    0,    0,    0,  141,  142,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  616,    0,
    0,    0,  144,    0,    0,    0,    0,    0,  146,  147,
  148,  149,    0,    0,    0,  150,    0,  151,    0,    0,
  531,    0,    0,  152,  153,    0,    0,    0,  532,   97,
    0,   99,    0,    0,  100,  290,    0,    0,    0,  104,
  105,  106,    0,  108,    0,  154,  617,  156,  157,  109,
    0,    0,  111,    0,  618,    0,    0,    0,    0,  116,
    0,    0,    0,    0,  118,  268,  119,  120,  121,    0,
    0,    0,    0,    0,   97,    0,   99,    0,    0,  100,
  123,    0,  124,  125,  104,    0,  126,    0,  108,  128,
    0,  130,    0,  132,  133,  134,  291,  111,  137,    0,
    0,  338,    0,    0,  116,  756,    0,    0,    0,  118,
    0,    0,    0,  121,   97,    0,   99,    0,    0,  100,
    0,    0,    0,    0,  104,  123,    0,  124,  108,    0,
    0,  126,    0,  293,    0,    0,    0,  111,    0,  133,
  134,    0,    0,  137,  116,    0,  269,    0,    0,  118,
  841,    0,    0,  121,    0,    0,    0,    0,    0,   97,
    0,   99,    0,    0,  100,  123,    0,  124,    0,  104,
    0,  126,    0,  108,    0,    0,  154,  533,    0,  133,
  134,    0,  111,  137,    0,    0,  255,    0,    0,  116,
    0,    0,    0,    0,  118, 1080,    0,    0,  121,    0,
    0,    0,    0,    0,   97,    0,   99,    0,    0,  100,
  123,    0,  124,    0,  104,    0,  126,    0,  108,    0,
    0,    0,   89,    0,  133,  134,    0,  111,  137,    0,
    0,  269,    0,    0,  116,    0,    0,    0,    0,  118,
    0,    0,    0,  121,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  123,    0,  124,    0,    0,
    0,  126,  757,    0,    0,    0,    0,    0,    0,  133,
  134,    0,    0,  137,    0,    0,  269,    0,    0,    0,
    0,   43,    0,    0,    0,   43,    0,    0,    0,   43,
    0,   43,    0,    0,   43,    0,   43,    0,    0,   43,
    0,   43,    0,   43,    0,   43,    0,   89,   43,    0,
    0,   43,   43,    0,    0,    0,    0,    0,    0,   43,
   43,   43,    0,    0,   43,   43,   43,    0,   43,    0,
    0,   43,    0,   43,   43,   43,   43,    0,    0,    0,
   43,   43,   43,    0,    0,   43,   43,   43,    0,    0,
    0,    0,   89,    0,   43,   43,    0,   43,   43,   43,
   43,   43,   43,    0,    0,   44,   43,    0,    0,   44,
    0,    0,    0,   44,    0,   44,    0,    0,   44,    0,
   44,    0,    0,   44,    0,   44,    0,   44,    0,   44,
   43,   43,   44,    0,    0,   44,   44,    0,    0,    0,
    0,    0,    0,   44,   44,   44,    0,    0,   44,   44,
   44,    0,   44,    0,    0,   44,    0,   44,   44,   44,
   44,    0,    0,    0,   44,   44,   44,    0,    0,   44,
   44,   44,    0,    0,    0,    0,    0,   43,   44,   44,
    0,   44,   44,   44,   44,   44,   44,    0,    0,   41,
   44,    0,    0,   41,    0,    0,    0,   41,    0,   41,
    0,    0,   41,    0,   41,    0,    0,   41,    0,   41,
    0,   41,    0,   41,   44,   44,   41,    0,    0,   41,
   41,    0,    0,    0,    0,    0,    0,   41,   41,   41,
    0,    0,   41,   41,   41,    0,   41,    0,    0,   41,
    0,   41,   41,   41,   41,    0,    0,    0,   41,   41,
   41,    0,    0,   41,   41,   41,    0,    0,    0,    0,
    0,   44,   41,   41,    0,   41,   41,    0,   41,   41,
   41,    0,    0,   42,   41,    0,    0,   42,    0,    0,
    0,   42,    0,   42,    0,    0,   42,    0,   42,    0,
    0,   42,    0,   42,    0,   42,    0,   42,   41,   41,
   42,    0,    0,   42,   42,    0,    0,    0,    0,    0,
    0,   42,   42,   42,    0,    0,   42,   42,   42,    0,
   42,    0,    0,   42,    0,   42,   42,   42,   42,    0,
    0,    0,   42,   42,   42,    0,    0,   42,   42,   42,
    0,    0,    0,    0,    0,   41,   42,   42,    0,   42,
   42,    0,   42,   42,   42,    0,    0,   45,   42,    0,
    0,   59,    0,    0,    0,   59,    0,   59,    0,    0,
   59,    0,   59,    0,    0,   59,    0,   59,    0,   59,
    0,   59,   42,   42,   59,    0,    0,   59,   59,    0,
    0,    0,    0,    0,    0,   59,   59,   59,    0,    0,
   59,   59,   59,    0,   59,    0,    0,   59,    0,   59,
   59,   59,   59,    0,    0,    0,   59,   59,   59,    0,
    0,   59,   59,   59,    0,    0,    0,    0,    0,   42,
   59,   59,    0,   59,   59,    0,   59,   59,   59,  340,
    0,   46,   59,    0,    0,   59,    0,    0,    0,   59,
    0,   59,    0,    0,   59,    0,   59,    0,    0,   59,
    0,   59,    0,   59,    0,   59,   45,    0,   59,    0,
    0,   59,   59,    0,    0,  340,    0,    0,    0,   59,
   59,   59,    0,    0,   59,   59,   59,    0,   59,    0,
    0,   59,    0,   59,   59,   59,   59,    0,    0,    0,
   59,   59,   59,    0,    0,   59,   59,   59,    0,    0,
    0,    0,    0,   59,   59,   59,    0,   59,   59,    0,
   59,   59,   59,    0,    0,    0,   59,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  340,    0,  340,  340,  340,  340,
   46,    0,    0,  340,  340,    0,    0,  340,  340,  340,
  340,  340,  340,  340,  340,  340,    0,  340,  340,  340,
  340,  340,  340,  340,  340,  340,  340,  340,  340,  340,
  340,  340,  340,  340,  340,  340,  340,  340,  340,   60,
    0,   60,  340,   60,    0,   60,    0,   59,   60,    0,
   60,   60,    0,   60,    0,   60,    0,   60,    0,   60,
   60,   60,   60,    0,    0,   60,   60,    0,    0,    0,
    0,   60,   60,   60,   60,   60,    0,    0,   60,   60,
   60,    0,   60,    0,   60,   60,   60,   60,   60,   60,
   60,   60,    0,   60,   60,   60,   60,    0,    0,   60,
   60,   60,    0,   60,    0,    0,    0,    0,   60,   60,
    0,   60,   60,    0,   60,   60,   60,    0,    0,    0,
   60,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   59,    0,
   60,   60,   59,    0,   59,    0,    0,   59,    0,   59,
   59,    0,   59,   60,   59,    0,   59,    0,   59,   59,
   59,   59,    0,    0,   59,   59,    0,    0,    0,    0,
   59,    0,   59,   59,   59,    0,    0,   59,    0,   59,
    0,   59,    0,    0,   59,    0,   59,   59,   59,   59,
    0,   60,    0,   59,   59,   59,    0,    0,   59,   59,
   59,    0,    0,    0,    0,    0,    0,   59,   59,    0,
   59,   59,   59,   59,   59,   59,   59,    0,   59,   59,
    0,   59,    0,   59,   59,    0,   59,    0,   59,    0,
   59,    0,   59,   59,   59,   59,    0,    0,   59,   59,
    0,    0,    0,   90,   59,    0,   59,   59,   59,    0,
    0,   59,   59,   59,    0,   59,    0,    0,   59,    0,
   59,   59,   59,   59,    0,    0,    0,   59,   59,   59,
    0,    0,   59,   59,   59,    0,    0,    0,    0,    0,
    0,   59,   59,    0,   59,   59,    0,   59,   59,   59,
   59,    0,    0,   59,    0,    0,    0,    0,   59,    0,
    0,    0,   59,    0,   59,    0,    0,   59,    0,   59,
   59,    0,   59,    0,   59,    0,   59,   91,   59,   59,
   59,   59,    0,    0,   59,   59,   59,    0,    0,    0,
   59,    0,   59,   59,   59,    0,    0,   59,    0,   59,
    0,   59,    0,    0,   59,    0,   59,   59,   59,   59,
    0,    0,    0,   59,   59,   59,    0,    0,   59,   59,
   59,    0,    0,    0,   59,    0,    0,   59,   59,    0,
   59,   59,   59,   59,   59,   59,   59,    0,   59,   59,
    0,   59,    0,   59,   59,    0,   59,    0,   59,    0,
   59,    0,   59,   59,   59,   59,    0,    0,   59,   59,
    0,    0,    0,  113,   59,    0,   59,   59,   59,    0,
    0,   59,   59,   59,    0,   59,    0,    0,   59,    0,
   59,   59,   59,   59,    0,    0,    0,   59,   59,   59,
    0,    0,   59,   59,   59,    0,    0,    0,    0,    0,
    0,   59,   59,    0,   59,   59,    0,   59,   59,   59,
   59,    0,    0,   59,    0,    0,    0,    0,   59,    0,
    0,    0,   59,    0,   59,    0,    0,   59,    0,   59,
   59,    0,   59,    0,   59,    0,   59,  114,   59,   59,
   59,   59,    0,    0,   59,   59,   59,    0,    0,    0,
   59,    0,   59,   59,   59,    0,    0,   59,    0,   59,
    0,   59,    0,    0,   59,    0,   59,   59,   59,   59,
    0,    0,    0,   59,   59,   59,    0,    0,   59,   59,
   59,    0,    0,    0,   59,    0,    0,   59,   59,    0,
   59,   59,   59,   59,   59,   59,   59,    0,   59,   59,
    0,   59,    0,   59,   59,    0,   59,    0,   59,    0,
   59,    0,   59,   59,   59,   59,    0,    0,   59,   59,
    0,    0,    0,  226,   59,    0,   59,   59,   59,    0,
    0,   59,    0,   59,    0,   59,    0,    0,   59,    0,
   59,   59,   59,   59,    0,    0,    0,   59,   59,   59,
    0,    0,   59,   59,   59,  340,    0,    0,    0,    0,
    0,   59,   59,    0,   59,   59,    0,   59,   59,   59,
   59,    0,    0,   59,    0,    0,    0,    0,  340,    0,
    0,    0,    0,    0,    0,  361,    0,    0,    0,    0,
    0,  340,    0,    0,    0,    0,  340,  227,    0,  340,
    0,  340,    0,  340,  340,  340,  340,    0,  361,    0,
    0,  340,    0,    0,    0,  340,    0,    0,    0,  340,
    0,  361,    0,   61,    0,    0,  361,  340,    0,  243,
  340,  361,  340,  361,  361,  361,  361,    0,    0,    0,
    0,  361,    0,    0,   59,  361,   62,    0,    0,  361,
    0,  340,    0,    0,    0,    0,    0,  361,    0,   63,
  361,  340,  361,  277,   65,  340,    0,    0,    0,   66,
    0,   67,   68,   69,   70,    0,    0,    0,  340,   71,
    0,    0,    0,   72,    0,    0,    0, 1258,    0,    0,
   96,   97,    0,   99,    0,   73,  100,  290,   74,    0,
   75,  104,  105,  106,    0,  108,    0,  340,   97,    0,
   99,  109,    0,  100,  111,    0,    0,    0,  104,    0,
    0,  116,  108,    0,    0,    0,  118,    0,  119,  120,
  121,  111,  601,    0,    0,    0,    0,  361,  116,  602,
    0,    0,  123,  118,  124,  125,    0,  121,  126,    0,
    0,  128,    0,  130,    0,  132,  133,  134,  291,  123,
  137,  124,    0,  338,    0,  126,    0,  603,    0,    0,
  141,  142,    0,  133,  134,  478,    0,  137,    0,    0,
  269,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  144,  913,    0,  604,    0,
    0,  146,  147,  148,  149,    0,    0,    0,  150,    0,
  151,    0,   96,   97,    0,   99,  152,  153,  100,  290,
    0,    0,    0,  104,  105,  106,    0,  108,    0,    0,
    0,    0,    0,  109,    0,    0,  111,    0,  154,  501,
  156,  157,    0,  116,    0,    0,    0,    0,  118,    0,
  119,  120,  121,    0,  601,    0,  357,    0,    0,    0,
    0,  602,    0,    0,  123,    0,  124,  125,    0,    0,
  126,    0,    0,  128,    0,  130,    0,  132,  133,  134,
  291,    0,  137,    0,    0,  338,    0,    0,    0,  603,
    0,    0,  141,  142,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  144,    0,    0,
  604,    0,    0,  146,  147,  148,  149,    0,    0,    0,
  150,    0,  151,    0,   96,   97,    0,   99,  152,  153,
  100,  290,    0,    0,    0,  104,  105,  106,    0,  108,
    0,    0,    0,    0,    0,  109,    0,    0,  111,    0,
  154,  501,  156,  157,    0,  116,    0,    0,    0,    0,
  118,    0,  119,  120,  121,    0,  601,    0,    0,    0,
    0,    0,    0,  602,    0,    0,  123,    0,  124,  125,
    0,    0,  126,    0,    0,  128,    0,  130,    0,  132,
  133,  134,  291,    0,  137,    0,    0,  338,    0,    0,
    0,  603,    0,    0,  141,  142,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  144,
    0,    0,    0,    0,    0,  146,  147,  148,  149,    0,
    0,    0,  150,    0,  151,    0,   96,   97,    0,   99,
  152,  153,  100,  290,    0,    0,    0,  104,  105,  106,
    0,  108,    0,    0,    0,    0,    0,  109,    0,    0,
  111,    0,  154,  501,  156,  157,    0,  116,    0,    0,
    0,    0,  118,    0,  119,  120,  121,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  123,    0,
  124,  125,  816,    0,  126,    0,    0,  128,    0,  130,
    0,  132,  133,  134,  291,    0,  137,    0,    0,  338,
    0,    0,    0,  817,    0,    0,  141,  142,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  543,    0,    0,
    0,  144,    0,    0,    0,    0,    0,  146,  147,  148,
  149,    0,    0,    0,  150,    0,  151,    0,   96,   97,
    0,   99,  152,  153,  100,  290,    0,    0,    0,  104,
  105,  106,    0,  108,    0,    0,    0,    0,    0,  109,
    0,    0,  111,    0,  154,  339,  156,  157,    0,  116,
    0,    0,    0,    0,  118,    0,  119,  120,  121,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  123,    0,  124,  125,    0,    0,  126,    0,    0,  128,
    0,  130,    0,  132,  133,  134,  291,    0,  137,    0,
    0,  338,    0,    0,    0,    0,    0,    0,  141,  142,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  144,    0,    0,    0,    0,  578,  146,
  147,  148,  149,    0,    0,    0,  150,    0,  151,    0,
   96,   97,    0,   99,  152,  153,  100,  290,    0,    0,
    0,  104,  105,  106,    0,  108,    0,    0,    0,    0,
    0,  109,    0,    0,  111,    0,  154,  339,  156,  157,
    0,  116,    0,    0,    0,    0,  118,    0,  119,  120,
  121,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  123,    0,  124,  125,    0,    0,  126,    0,
    0,  128,    0,  130,    0,  132,  133,  134,  291,    0,
  137,    0,    0,  338,    0,    0,    0,    0,    0,    0,
  141,  142,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  801,    0,    0,  144,    0,    0,    0,    0,
    0,  146,  147,  148,  149,    0,    0,    0,  150,    0,
  151,    0,   96,   97,    0,   99,  152,  153,  100,  290,
    0,    0,    0,  104,  105,  106,    0,  108,    0,    0,
    0,    0,    0,  109,    0,    0,  111,    0,  154,  339,
  156,  157,    0,  116,    0,    0,    0,    0,  118,    0,
  119,  120,  121,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  123,    0,  124,  125,    0,    0,
  126,    0,    0,  128,    0,  130,    0,  132,  133,  134,
  291,    0,  137,    0,    0,  338,    0,    0,    0,    0,
    0,    0,  141,  142,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  543,    0,    0,    0,  144,    0,    0,
    0,    0,    0,  146,  147,  148,  149,    0,    0,    0,
  150,    0,  151,    0,   96,   97,    0,   99,  152,  153,
  100,  290,    0,    0,    0,  104,  105,  106,    0,  108,
    0,    0,    0,    0,    0,  109,    0,    0,  111,    0,
  154,  339,  156,  157,    0,  116,    0,    0,    0,    0,
  118,    0,  119,  120,  121,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  123,    0,  124,  125,
    0,    0,  126,    0,    0,  128,    0,  130,    0,  132,
  133,  134,  291,    0,  137,    0,    0,  338,    0,    0,
    0,    0,    0,    0,  141,  142,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  398,    0,    0,    0,  144,
    0,    0,    0,    0,    0,  146,  147,  148,  149,    0,
    0,    0,  150,    0,  151,    0,   96,   97,    0,   99,
  152,  153,  100,  290,    0,    0,    0,  104,  105,  106,
    0,  108,    0,    0,    0,    0,    0,  109,    0,    0,
  111,    0,  154,  339,  156,  157,    0,  116,    0,    0,
    0,    0,  118,    0,  119,  120,  121,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  123,    0,
  124,  125,    0,    0,  126,    0,    0,  128,    0,  130,
    0,  132,  133,  134,  291,    0,  137,    0,    0,  338,
    0,    0,    0,    0,    0,    0,  141,  142,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  953,  144,    0,    0,    0,    0,    0,  146,  147,  148,
  149,    0,    0,    0,  150,    0,  151,    0,   96,   97,
    0,   99,  152,  153,  100,  290,    0,    0,    0,  104,
  105,  106,    0,  108,    0,    0,    0,    0,    0,  109,
    0,    0,  111,    0,  154,  339,  156,  157,    0,  116,
    0,    0,    0,    0,  118,    0,  119,  120,  121,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  123,    0,  124,  125,    0,    0,  126,    0,    0,  128,
    0,  130,    0,  132,  133,  134,  291,    0,  137,    0,
    0,  338,    0,    0,    0,    0,    0,    0,  141,  142,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  144,    0,    0,    0,    0,    0,  146,
  147,  148,  149,    0,    0,    0,  150,    0,  151,    0,
   96,   97,    0,   99,  152,  153,  100,  290,    0,    0,
    0,  104,  105,  106,    0,  108,    0,    0,    0,    0,
    0,  109,    0,    0,  111,    0,  154,  339,  156,  157,
    0,  116,    0,    0,    0,    0,  118,    0,  119,  120,
  121,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  123,    0,  124,  125,    0,    0,  126,    0,
    0,  128,    0,  130,    0,  132,  133,  134,  291,    0,
  137,    0,    0,  338,    0,    0,    0,    0,    0,    0,
  141,  142,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  144,    0,    0,    0,    0,
    0,  146,  147,  148,  149,    0,    0,    0,  150,    0,
  151,    0,   96,   97,    0,   99,  152,  153,  100,  290,
    0,    0,    0,  104,  105,  106,    0,  108,    0,    0,
    0,    0,    0,  109,    0,    0,  111,    0,  154,  495,
  156,  157,    0,  116,    0,    0,    0,    0,  118,    0,
  119,  120,  121,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  123,    0,  124,  125,    0,    0,
  126,    0,    0,  128,    0,  130,    0,  132,  133,  134,
  291,    0,  137,    0,    0,  338,    0,    0,    0,    0,
    0,    0,  141,  142,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  144,    0,    0,
    0,    0,    0,  146,  147,  148,  149,    0,    0,    0,
  150,    0,  151,    0,   96,   97,    0,   99,  152,  153,
  100,  290,    0,    0,    0,  104,  105,  106,    0,  108,
    0,    0,    0,    0,    0,  109,    0,    0,  111,    0,
  154,  501,  156,  157,    0,  116,    0,    0,    0,    0,
  118,    0,  119,  120,  121,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  123,    0,  124,  125,
    0,    0,  126,    0,    0,  128,    0,  130,    0,  132,
  133,  134,  291,    0,  137,    0,    0,  139,    0,    0,
    0,    0,    0,    0,  141,  142,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  144,
    0,    0,    0,    0,    0,  146,  147,  148,  149,    0,
    0,    0,  150,    0,  151,    0,  615,  615,    0,  615,
  152,  153,  615,  615,    0,    0,    0,  615,  615,  615,
    0,  615,    0,    0,    0,    0,    0,  615,    0,    0,
  615,    0,  154,  339,  156,  157,    0,  615,    0,    0,
    0,    0,  615,    0,  615,  615,  615,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  615,    0,
  615,  615,    0,    0,  615,    0,    0,  615,    0,  615,
    0,  615,  615,  615,  615,    0,  615,    0,    0,  615,
    0,    0,    0,    0,    0,    0,  615,  615,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  615,    0,    0,    0,    0,    0,  615,  615,  615,
  615,    0,    0,    0,  615,    0,  615,    0,   86,   86,
    0,   86,  615,  615,   86,   86,    0,    0,    0,   86,
   86,   86,    0,   86,    0,    0,    0,    0,    0,   86,
    0,    0,   86,    0,  615,  615,  615,  615,    0,   86,
    0,    0,    0,    0,   86,    0,   86,   86,   86,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   86,    0,   86,   86,    0,    0,   86,    0,    0,   86,
    0,   86,    0,   86,   86,   86,   86,    0,   86,    0,
    0,   86,    0,    0,    0,    0,    0,    0,   86,   86,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   86,    0,    0,    0,    0,    0,   86,
   86,   86,   86,    0,    0,    0,   86,    0,   86,    0,
   96,   97,    0,   99,   86,   86,  100,  290,    0,    0,
    0,  104,  105,  106,    0,  108,    0,    0,    0,    0,
    0,  109,    0,    0,  111,    0,   86,   86,   86,   86,
    0,  116,    0,    0,    0,    0,  118,    0,  119,  120,
  121,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  123,    0,  124,  125,    0,    0,  126,    0,
    0,  128,    0,  130,    0,  132,  133,  134,  291,    0,
  137,    0,    0,  338,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  144,    0,    0,    0,    0,
    0,  146,  147,  148,  149,    0,    0,    0,  150,    0,
  151,    0,   96,   97,    0,   99,  152,  153,  100,  290,
    0,    0,    0,  104,  105,  106,    0,  108,    0,    0,
    0,    0,    0,  109,    0,    0,  111,    0,  154,  294,
    0,  157,    0,  116,    0,    0,    0,    0,  118,    0,
  119,  120,  121,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  123,    0,  124,  125,    0,    0,
  126,    0,    0,  128,    0,  130,    0,  132,  133,  134,
  291,  638,  137,  638,    0,  292,  638,    0,  638,  638,
    0,  638,    0,  638,    0,  638,    0,  638,  638,  638,
    0,    0,    0,  638,  638,    0,    0,    0,    0,  638,
    0,  638,  638,    0,    0,    0,  638,  293,    0,    0,
  638,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  638,    0,  638,    0,    0,    0,  638,  638,
    0,    0,    0,    0,    0,    0,  638,  638,    0,    0,
  638,    0,    0,  638,    0,    0,    0,    0,  638,    0,
  154,  294,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  638,  638,
  637,    0,  637,    0,    0,  637,    0,  637,  637,    0,
  637,  638,  637,    0,  637,    0,  637,  637,  637,    0,
    0,    0,  637,  637,    0,    0,    0,    0,  637,    0,
  637,  637,    0,    0,    0,  637,    0,    0,    0,  637,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  638,
    0,  637,    0,  637,    0,    0,    0,  637,  637,    0,
    0,    0,    0,    0,    0,  637,  637,    0,  637,  637,
  637,    0,  637,  637,    0,  637,  637,  637,  637,    0,
  637,    0,  637,    0,  637,  637,  637,    0,    0,    0,
  637,  637,    0,    0,    0,    0,  637,    0,  637,  637,
    0,    0,    0,  637,    0,    0,    0,  637,    0,    0,
  637,    0,    0,    0,    0,    0,    0,    0,    0,  637,
    0,  637,    0,    0,    0,  637,  637,    0,    0,    0,
    0,    0,    0,  637,  637,    0,    0,  637,    0,    0,
  637,   97,    0,   99,    0,  637,  100,    0,  637, 1232,
    0,  104,    0,  252,    0,  108,    0,  253, 1233, 1234,
    0,    0,    0,  254,  111,    0,    0,    0,    0, 1235,
    0,  116,    0,   97,    0,   99,  118,    0,  100,    0,
  121, 1232,    0,  104,    0,  252,    0,  108,    0,  253,
 1233, 1234,  123,    0,  124,  254,  111,    0,  126,    0,
    0, 1235,    0,  116,    0,    0,  133,  134,  118,    0,
  137,    0,  121, 1236,    0,    0,  637,    0,  256,    0,
    0,    0,    0,    0,  123,    0,  124,    0,    0,    0,
  126,    0,    0,    0,    0,    0,    0,    0,  133,  134,
    0,    0,  137,    0,    0, 1236,    0,  637,    0,  637,
  256, 1237,  637,    0,  637,    0,    0,  637,    0,  637,
    0,  637,    0,  637,    0,    0,    0,    0,    0,  637,
  637,    0,    0,    0,    0,    0,    0,  637,  637,    0,
    0,    0,  637,    0,    0,    0,  637,    0,    0, 1238,
    0,    0,   59,    0,   59,    0,    0,   59,  637,    0,
  637,    0,   59,    0,  637,  637,   59,    0,    0,    0,
    0,    0,  637,  637,    0,   59,  637,    0,    0,  637,
    0, 1238,   59,    0,  637,    0,    0,   59,    0,    0,
    0,   59,    0,   59,    0,   59,   59,    0,   59,    0,
   59,   59,    0,   59,    0,   59,   59,    0,    0,   59,
   59,    0,   59,    0,    0,    0,    0,   59,   59,   59,
    0,   59,    0,    0,   59,    0,   59,    0,    0,    0,
    0,   59,    0,    0,    0,   59,   97,   59,   99,   59,
    0,  100,    0,    0,   59,    0,  104,   59,  252,   59,
  108,    0,  253,   59,    0,  637,   59,  172,  254,  111,
    0,   59,   59,    0,    0,   59,  116,    0,   59,    0,
    0,  118,    0,    0,    0,  121,    0,    0,    0,    0,
   59,    0,   59,    0,    0,   59,    0,  123,    0,  124,
   59,    0,    0,  126,   59,    0,    0,    0,    0,  172,
   59,  133,  134,   59,    0,  137,    0,    0,  255,    0,
   59,    0,    0,  256,    0,   59,    0,    0,    0,   59,
   97,   59,   99,   59,    0,  100,    0,    0,   59,    0,
  104,   59,    0,   59,  108,    0,    0,   59,    0,    0,
   59,    0,    0,  111,   59,   59,   59,    0,    0,   59,
  116,    0,   59,    0,    0,  118,    0,    0,    0,  121,
   97,  582,   99,    0,    0,  100,    0, 1157,  583,    0,
  104,  123,    0,  124,  108,    0,    0,  126,    0,    0,
  584,    0,    0,  111,   89,  133,  134,    0,    0,  137,
  116,    0,  585,    0,    0,  118,    0, 1158,    0,  121,
   97,    0,   99,    0,    0,  100,    0,    0,    0,    0,
  104,  123,    0,  124,  108,    0,    0,  126, 1159,    0,
    0,    0,    0,  111,    0,  133,  134,    0,   59,  137,
  116,    0,  269,    0,    0,  118,    0,    0,    0,  121,
    0,    0,    0,    0,   97,    0,   99,    0,    0,  100,
    0,  123,    0,  124,  104,    0,    0,  126,  108,    0,
    0,    0,    0,    0,    0,  133,  134,  111,  586,  137,
    0,    0,  269,    0,  116,    0,    0,    0,    0,  118,
    0,    0,    0,  121,   97,    0,   99,    0,    0,  100,
    0,    0,    0,    0,  104,  123,    0,  124,  108,    0,
    0,  126,    0,    0,    0,  894,    0,  111,   89,  133,
  134,    0,    0,  137,  116,    0,  269,    0,    0,  118,
    0,    0,   97,  121,   99,    0,    0,  100,    0,    0,
    0,    0,  104,    0,    0,  123,  108,  124,    0,    0,
    0,  126,    0,    0,    0,  111,    0,    0,   89,  133,
  134,    0,  116,  137,    0,    0,  269,  118,    0,    0,
    0,  121,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   97,  123,   99,  124,    0,  100,    0,  126,
    0,    0,  104,    0,    0,    0,  108,  133,  134,    0,
    0,  137,  359,    0,  255,  111,   97,    0,   99,    0,
    0,  100,  116,    0,    0,    0,  104,  118,    0,    0,
  108,  121,    0,    0,    0,    0,    0,    0,    0,  111,
    0,    0,    0,  123,    0,  124,  116,    0,    0,  126,
    0,  118,   89,    0,    0,  121,    0,  133,  134,    0,
    0,  137,    0,    0,  545,    0,   97,  123,   99,  124,
    0,  100,    0,  126,    0,    0,  104,    0,    0,    0,
  108,  133,  134,    0,    0,  137,    0,    0,  269,  111,
   89,    0,    0,    0,    0,    0,  116,    0,    0,    0,
    0,  118,    0,    0,   97,  121,   99,    0,    0,  100,
    0,    0,    0,    0,  104,    0,    0,  123,  108,  124,
    0,    0,    0,  126,    0,    0,    0,  111,    0,    0,
    0,  133,  134,    0,  116,  137,    0,    0,  269,  118,
   89,    0,    0,  121,  494,    0,  494,    0,    0,  494,
    0,    0,    0,    0,  494,  123,    0,  124,  494,    0,
    0,  126,    0,    0,  666,    0,    0,  494,    0,  133,
  134,    0,    0,  137,  494,    0,  585,    0,    0,  494,
    0,    0,  189,  494,  189,    0,    0,  189,    0,    0,
    0,    0,  189,    0,    0,  494,  189,  494,    0,    0,
    0,  494,    0,    0,    0,  189,    0,    0,    0,  494,
  494,    0,  189,  494,  668,    0,  494,  189,    0,    0,
    0,  189,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  199,  189,  199,  189,    0,  199,    0,  189,
    0,    0,  199,    0,    0,    0,  199,  189,  189,    0,
    0,  189,   89,    0,  189,  199,  190,    0,  190,    0,
    0,  190,  199,    0,    0,    0,  190,  199,    0,    0,
  190,  199,    0,    0,    0,    0,    0,    0,    0,  190,
    0,    0,    0,  199,    0,  199,  190,    0,   59,  199,
   59,  190,  494,    0,    0,  190,    0,  199,  199,    0,
    0,  199,    0,    0,  199,    0,    0,  190,    0,  190,
    0,   59,    0,  190,    0,    0,    0,    0,    0,    0,
    0,  190,  190,   59,   59,  190,    0,    0,  190,   59,
  189,    0,    0,    0,   59,    0,   59,   59,   59,   59,
    0,    0,   59,    0,   59,    0,   59,    0,   59,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   59,
   59,   59,    0,   59,   59,   59,    0,    0,    0,   59,
    0,   59,   59,   59,   59,    0,    0,    0,    0,   59,
  199,    0,    0,   59,   59,    0,    0,    0,    0,    0,
    0,    0,    0,  301,    0,   59,   59,   59,   59,    0,
   59,    0,   59,    0,  190,    0,    0,   59,    0,   59,
   59,   59,   59,    0,    0,    0,    0,   59,    0,   59,
    0,   59,    0,    0,   59,   59,    0,    0,  207,    0,
    0,    0,   59,   59,    0,    0,   59,   59,   59,    0,
    0,    0,   59,    0,   59,   59,   59,   59,    0,   59,
   59,   59,   59,    0,    0,    0,   59,    0,    0,    0,
    0,    0,   59,   59,    0,    0,  209,    0,   59,    0,
    0,   59,   59,   59,    0,    0,    0,    0,    0,    0,
    0,   59,    0,    0,    0,   59,    0,    0,    0,    0,
   59,    0,    0,    0,    0,   59,    0,   59,   59,   59,
   59,  298,    0,    0,   59,   59,    0,    0,    0,   59,
    0,    0,    0,    0,    0,    0,   61,   59, 1339,    0,
    0,   59,   59,    0,   59,    0,   59,   59,    0,   59,
   59,   59,   59,    0,    0,    0,    0,   59,    0,   62,
    0,   59,    0,    0,    0,    0,    0,    0,   61,    0,
 1362,    0,   63,   59,  299,    0,   59,   65,   59,    0,
    0,    0,   66,    0,   67,   68,   69,   70,    0,    0,
 1340,   62,   71,    0,    0,    0,   72,    0,   61,    0,
    0,    0,   59,   59,   63,    0,    0,    0,   73,   65,
    0,   74,    0,   75,   66,    0,   67,   68,   69,   70,
    0,   62, 1363,    0,   71,    0,    0,    0,   72,    0,
   61,    0,    0,    0,   63,    0,    0,    0,   64,   65,
   73,    0,    0,   74,   66,   75,   67,   68,   69,   70,
    0,    0,    0,   62,   71,    0,    0,    0,   72,    0,
   61,    0, 1339,    0,    0,    0,   63,    0,    0,    0,
   73,   65,    0,   74,    0,   75,   66,    0,   67,   68,
   69,   70,    0,   62, 1340,    0,   71,    0,    0,    0,
   72,    0,   61,    0,    0,    0,   63,    0,    0,    0,
    0,   65,   73,    0,    0,   74,   66,   75,   67,   68,
   69,   70,    0,    0,    0,   62,   71,    0,    0,    0,
   72,    0,   61,    0, 1362,    0,    0,    0,   63,    0,
    0,    0,   73,   65,    0,   74,    0,   75,   66,    0,
   67,   68,   69,   70,    0,   62, 1363,    0,   71,    0,
    0,    0,   72,    0,   61,    0,    0,    0,   63,    0,
    0,    0,    0,   65,   73,    0,    0,   74,   66,   75,
   67,   68,   69,   70,    0,    0,    0,   62,   71,    0,
    0,    0,   72,    0,    0,    0,    0,    0,    0,    0,
   63,    0,    0,    0,   73,   65,    0,   74,    0,   75,
   66,    0,   67,   68,   69,   70,    0,    0,    0,    0,
   71,    0,    0,    0,   72,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   73,    0,    0,   74,
    0,   75,
  };
  protected static  short [] yyCheck = {            52,
    0,   77,    7,   90,   76,   52,   52,   52,  401,    9,
  242,  259,   52,  361,  335,  326,  473,   29,  102,  226,
  569,    2,  129,    4,  356,  280,  336,  484,  283,  257,
  398,  253,  581,   80,    0,  263,  333,  867,    0,    9,
  734,  588,  855,  856,  952, 1164,  119,    0,  256,    9,
   55,  325,  256,   53,  101,  256,    9,  102,  256,   76,
  256, 1180,  107,  256,  165,   46,   81,   52,  256,  122,
  294,  102,  766,   87,  282,  256,  129,  256,  294,  400,
  835,  294,  268,   53,  131,   52,  256,  256,  135,  257,
  737,  144,  165,  268,  366,  256,  325,  256,   52,  256,
   53,   82,  716,   52, 1018,   52,  314,  257,  367,   52,
   91,   52,   52,   52,  187,  146,  147,  148,  149,  150,
  151,  152,  153,  256,  413,  384,  141,  142,  359,  256,
  335,  268,  421,  946,  256,  359,  391,   52,  257,  276,
  395,  155,  157,  956,  105,   52,  359,  294,  379,  110,
  422,  112,  113,  257,  115,  208,  117, 1071,  389,  306,
  359,  208,  208,  208,  125,  389,  127,  335,  208,  365,
  343,  367,  305,  369,  135,  901,  389,  138,  256,  140,
  252,  256,  254,  305,  413,  335,  359,  256,  943,  262,
  358,  366,  257,  887,  256,  365,  297,  413,  367,  367,
  373,  358,  256,  164,  374,  413,  367,  854,  358,  413,
  904,  905,  413,  372, 1333,  413,  389,  367, 1048,  415,
  413,  569,  421,  208,  297,  413,  187,  280,  256,  256,
  283,  417,  413,  581,  413,  252,  289,  254,  695,  366,
  293,  208,  417,  243,  891,  372,  468,  366,  421,  333,
  418,  419,  420,  325,  208,  869,  359,  871,  256,  208,
  274,  208, 1092, 1093,  337,  208,  413,  208,  208,  208,
  343, 1179,  998,  243, 1000,  328,  413,  366,  331,  332,
  294,  326,  367,  243,  558, 1193,  301, 1195,  982,  367,
  243,  257,  367,  208,  988,  257,  371,  350,  367,  352,
  256,  208,  333,  356,  351,  367,  378,  352,  366,  371,
  383,  262,  327,  416,  368,  361,  361,    2,  372,    4,
  373,  361,  266,  870,  413,  339, 1156,  256,  371,  344,
  291,  349,  350,  665,  366,  296,  294,  390,  391,  366,
  368,  662,  395,  413,  372,  372,  399,  298,  401,  369,
  403,  404,  405,  406,  407,  408,  409,  410,  411,  412,
  413,   46,  359,  294,  422,  396,  380,  365,  359,  367,
  314,  369,  370,  366,  372,  370,  374,  359,  349,  350,
  349,  350,  435,  414,  415,  416,  256,  348,  419,  420,
  422,   76,  389,  725,  264,  415,   81,   82, 1145,  343,
 1147,  359,  417,  418,  422, 1099,   91,  389,  484,  365,
  365,  367,  367,  369,  370,  359,  372,  415,  374,  730,
  413,  413, 1169, 1033, 1034,  376,  377,  422,  359,  373,
  421,  389,  359,  371,  449,  450,  365, 1131,  367,  421,
  808,  366,  739,  366, 1191,  389,  366, 1194,  256,  343,
  379,  422,  707,  422,  709,  325,  141,  142,  389,  415,
 1273,  367,  389,  359,  478,  359,  513,  689,  370,  691,
  372,  693,  157,  379, 1147,  413,  491,  421, 1225,  373,
 1090,  495,  370,  379,  372,  379,  558,  501,  370,  416,
  543,  396,  506,  389,  372,  389,  374,  422,  551,  422,
 1313,  343,  422, 1316, 1317, 1115,  816,  374,  555, 1322,
 1120,  564,  256,  566,  419,  420,  588,  359, 1191,  533,
  422, 1194,  374,  569,  569,  421,  370,  421,  357,  569,
  758,  339,  341,  580,  422,  581,  581,  379,  367,  370,
  422,  581, 1147,  798,   52,  576,  867,  389,  601,  602,
  882,  604, 1225,  514,  661,  422,  272,  365,  367,  367,
  343,  369,  593,  616,  372,  373,  374,  252,   76,  254,
  422,  379,  374,   81,  259, 1147,  359,  558,  422,  421,
  296,  256,  596,  339,  598, 1134, 1191,  357,  344, 1194,
  346,  422,  413,  554,  102,  413,  352,  353, 1194,  107,
  421,  367,  923,  617,  811,  371,  389,  323,  661,  662,
  341,  339,  665,  372,  384, 1145,  301, 1147,  671, 1191,
 1225,  365, 1194,  367,  272,  369,  272,  371,  372, 1225,
  374,  339,  339,  141,  142,  379,  367,  365,  421, 1169,
  325,  365,  327, 1335, 1336,  369,  374,  413,  296,  157,
  296,  336,  705, 1225,  707,  739,  709,  365,  365,  344,
  747, 1191,  365,  306, 1194,  371,  422,  682,  374,  339,
  313,  374,  725,  256,  344,  323,  346,  323,  731,  349,
  350, 1373,  352,  353,  737,  360,  269,  701,  702,  734,
  365,  415,  367,  378,  369, 1225,  371,  372,  399,  374,
  208,  367,  372,  286,  379,  717,  373,  754,  739,  339,
  411,  783,  326,  367,  344,  768,  346,  770,  384,  349,
  350,  766,  352,  353,  335, 1145,  779, 1147,  368,    9,
  384,   11,  417,  418, 1045,  750,  367, 1147,  352,  370,
  793,  357,  372, 1147,  252,  798,  254,  358,  367, 1169,
  803,  367,  422,  384,  367, 1103,  367,  366,  413,  812,
  379,  814,  339,  372,  449,  450,  379,  344,  384,  346,
  379, 1191,  349,  350, 1194,  352,  353,   57,  831,  832,
   60, 1191, 1014, 1147, 1194,  361, 1134, 1191,  473,  357,
 1194,  844,  422,  301, 1251,  269,  372,  339,  870,  484,
  359,  854,  344,  371,  346, 1225,  491,  349,  350,  862,
  352,  353,  286,  294,  867, 1225,  306,  325,  326,  327,
  361, 1225,  370,  313,  372,  306,  879, 1191,  336,  882,
 1194,  372,  885,  369,  256,  325,  344,  357,  891,  839,
  380,  381,  887,  357,  352,  422,  372,  367,  374,  896,
  370,  371,  372,  361,  394,  395, 1239,  371,  873,  904,
  905, 1225,  339,  365,  384,  392,  393,  344, 1251,  346,
  378,  374,  374,  558,  888,  352,  353,  930,  339,  932,
  422,  934,  374,  344,  357,  346,  365,  901,  349,  350,
  374,  352,  353,  413,  367,  374, 1244,  370,  371,  306,
  339,  308,  803,  588,  368,  344,  313,  346,  372,  417,
  418,  384,  813,  352,  353,  368,  369,  339,  325,  372,
  371,  369,  344,  374,  346,  347,  348,  349,  350,  351,
  352,  353,  354,  355,  356,  368,  365,  982,  365,  372,
  945,  449,  450,  988,  366,  422,  368,  374,  370,  367,
  372,  373,  374, 1006,  365, 1008, 1003, 1010,  357, 1012,
  377,  422,  365,  374,  367,  369,  388,  371,  367,  372,
  365,  374,  371,  365,  368,  413,  379,  372,  372,  374,
  396,  397,  374,  491,  998,  384,  390,  391, 1381, 1382,
 1077, 1239,  370,  382,  372, 1048,  374,  682,  366,  367,
  422,  369,  371,  371,  372,  387,  410,  379,  383,  413,
  695,  415, 1017, 1066,  413,  398,  368,  369, 1018,  371,
  372,  373,  390,  391,  388, 1025, 1026,  374,  400,  401,
  402,  403,  404,  405,  406,  407,  408,  409,  374, 1092,
 1093,  370,  410,  372,  368,  374,  370,  415,  372,  371,
  558,  368,  368, 1106, 1099,  372,  372, 1103, 1103,  256,
  369,  569,  371, 1103,  261,  750,  368,  370,  370,  372,
  372, 1071,  413,  581,  370,  370, 1324,  372,  374,  413,
  588,  390,  391, 1136, 1137,  337, 1131,  284, 1134, 1134,
  384,  372,  391,  374, 1134, 1343,  395, 1345,  783,  357,
  297,  410,  372, 1156,  374,  302,  415,  384,  385,  386,
  307,    0,  309,  310,  311,  312,  413,  370, 1118,  372,
  317,  372,  368,  374,  321,  423,  424,  425,  426, 1144,
 1202,  816,  372,  368,  374,  370,  333,  367, 1210,  336,
  368,  338,  370, 1196,  368, 1145,  370, 1147,  370,  368,
  372,  370,  368,  413,  370,  340,  256,  366,  367,  374,
  369,  374,  371,  372,  374,  366,  367,  365,  369, 1169,
  371,  372,  367,  370,  682,  374, 1229,  370,  371,  359,
  360,  390,  391,  354,  355,  870, 1201,  413,  873,  390,
  391, 1191,  354,  355, 1194,  362,  363,  374, 1244, 1244,
  370,  410,  349,  350, 1244,  413,  415,  370,  371,  410,
  362,  363,  958,  959,  415, 1262,  413, 1232, 1233,  421,
  422,  427,  428,  413,  372, 1225,  734,  146,  147,  148,
  149,  150,  151,  152,  153,  413,  365,  413, 1253,  339,
 1255,  373,  750,  256,  344,  413,  346,  347,  348,  349,
  350,  351,  352,  353,  354,  355,  356,  256,  766,  369,
  413,  370,  413,  379,  372, 1341,  366,  370,  368,  413,
  370, 1318,  372,  373,  374,  783,  374,  372,  374,  370,
  380,  381,  382,  383,  370,  366,  370,  387,  388, 1365,
 1366,  384,  392,  393,  394,  395,  396,  397,  398,  399,
  366,  367,  372,  369,  294,  371,  372,  370,  816,  370,
  370,  411, 1359,  370, 1361, 1315,  294,  372,  374,  413,
 1320,  370,  422,  369,  390,  391, 1326, 1327, 1381, 1382,
  372, 1378, 1379,    0,  422, 1335, 1336,  370,  373,  413,
  413,  379,  356,  374,  410, 1030,  369,  367,  360,  415,
  369,  372,  369,  371,  370,  379,  294,  372,  343,  413,
  370,  372,  870,  372,  370,  873,  413,  371,  257,  413,
  365,  368,  261, 1373,  294,  371,  265,  294,  267,  887,
  372,  270,  365,  272,  413,  413,  275,  371,  277,  256,
  279,  256,  281,  370,  370,  284,  904,  905,  287,  288,
  280,  366,  365,  367,  358,  413,  295,  296,  297,  368,
  413,  300,  301,  302,  370,  304,  373,  370,  307,  413,
  309,  310,  311,  312,  372,  372,  347,  316,  317,  318,
  374,  374,  321,  322,  323,  370, 1121,  370,  351,  366,
  370,  330,  331,  256,  333,  334,  416,  336,  337,  338,
  379,  413,  370,  342,  339,  256,  256,  366,  368, 1144,
  347,  372,  413,  413,    0,  372,  372,  368,  370,  373,
  366,  365,  365,  373,  982,  365,  348,  396,  348,  398,
  988,  379,  374,  369,  372,  366,  370,  366,  366,  305,
  356,  413,  369,  367,  369,  414,  415,  416,  413,  370,
  419,  420,  421,  422,  423,  424,  425,  426,  427,  428,
  429,  430,  431,  432,  433,  434, 1201, 1202,  366,  369,
  369,  365, 1030,  369,  413, 1210,  339,  370,  368,  370,
  365,  344,  370,  346,  347,  348,  349,  350,  351,  352,
  353,  354,  355,  356,  373,  370,  256, 1232, 1233,  256,
  369,  366,  366,  366, 1239,  368,  366,  370,  369,  372,
  373,  374,  370,  370,    0,  374, 1251,  365, 1253,  368,
 1255,  368,  374,  365,  413,  366,  370,  370,  374,  365,
  413,  413,  366,  365,  374,  374,  371,  370,  368,  366,
  257, 1099,  366,  374,  261, 1103,  366,  370,  265,  370,
  267,  413,  366,  270,  365,  272,  366,  370,  275,  422,
  277,  370,  279, 1121,  281,  366,  374,  284,  365,  365,
  287,  288,   53, 1131,  945,   46, 1134,    0,  295,  296,
  297,   91,  707,  300,  301,  302, 1144,  304,  707, 1169,
  307, 1225,  309,  310,  311,  312, 1250,  816,  713,  316,
  317,  318, 1251,  845,  321,  322,  323,  576,  695,  664,
 1318,  875,  869,  330,  331,  443,  333,  334,  335,  336,
  337,  338,  875, 1191,  593,  342, 1327, 1379, 1118,  875,
  702, 1326, 1239, 1025, 1121,  144,  808,  793,  622,  923,
  616,  358,  604, 1201, 1202,  429,  798,  602,  739,  366,
  367,  430, 1210,  431,  434,  432,  783,  709,  433, 1086,
 1003, 1244, 1201, 1103,  208,  102, 1051, 1045,  457,  556,
  256,  257, 1053,  881, 1232, 1233, 1249, 1137,  264,  265,
  266,  267,  268,   -1,  270,  271, 1244,  273,  274,  275,
  276,  277,  278,  279,  280, 1253,  413, 1255,   -1,  285,
   -1,  287,  288,  289,  290,  291,  292,   -1,   -1,  295,
   -1,   -1,   -1,  299,  300,   -1,  302,  303,  304,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  314,   -1,
  316,   -1,  318,  319,   -1,   -1,  322,   -1,  324,  325,
  326,  327,  328,  329,  330,  331,  332,  333,  334,  335,
    0,  337,   -1,   -1,  340,   -1,   -1,   -1,  344,  345,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  365,
  366,   -1,   -1,  369,   -1,   -1,   -1,   -1,  374,  375,
  376,  377,  378,   -1,   -1,   -1,  382,   -1,  384,   -1,
   -1,   -1,   -1,   -1,  390,  391,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  412,  413,  414,  415,
   -1,  417,   -1,  256,  257,   -1,  422,   -1,   -1,  808,
   -1,  264,  265,  266,  267,  268,   -1,  270,  271,   -1,
  273,  274,  275,  276,  277,  278,  279,    0,   -1,   -1,
   -1,   -1,  285,   -1,  287,  288,  289,  290,  291,  292,
   -1,   -1,  295,   -1,   -1,   -1,  299,  300,   -1,  302,
  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  314,   -1,  316,   -1,  318,  319,   -1,   -1,  322,
   -1,  324,  325,  326,  327,  328,  329,  330,  331,  332,
  333,  334,  335,   -1,  337,   -1,   -1,  340,   -1,   -1,
   -1,  344,  345,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,    0,   -1,  261,   -1,   -1,
   -1,   -1,  365,  366,   -1,   -1,  369,   -1,   -1,   -1,
   -1,  374,  375,  376,  377,  378,   -1,   -1,   -1,  382,
  284,  384,   -1,   -1,   -1,   -1,   -1,  390,  391,   -1,
   -1,   -1,   -1,  297,   -1,   -1,   -1,   -1,  302,   -1,
   -1,  305,   -1,  307,   -1,  309,  310,  311,  312,  412,
  413,  414,  415,  317,  417,   -1,   -1,  321,   -1,  422,
   -1,  325,   -1,   -1,   -1,   -1,  256,  257,   -1,  333,
   -1,  261,  336,    0,  338,  265,   -1,  267,   -1,   -1,
  270,   -1,  272,  273,   -1,  275,   -1,  277,   -1,  279,
   -1,  281,  282,  283,  284,   -1,   -1,  287,  288,   -1,
   -1,   -1,   -1,  293,   -1,  295,  296,  297,   -1,   -1,
  300,  301,  302,   -1,  304,   -1,   -1,  307,   -1,  309,
  310,  311,  312,   -1,   -1,   -1,  316,  317,  318,   -1,
   -1,  321,  322,  323,   -1,   -1,   -1,   -1,   -1,   -1,
  330,  331,   -1,  333,  334,  335,  336,  337,  338,  413,
   -1,   -1,  342,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  358,   -1,
   -1,   -1,   -1,   -1,  257,   -1,  366,  367,  261,   -1,
   -1,   -1,  265,   -1,  267,  375,   -1,  270,   -1,  272,
   -1,   -1,  275,   -1,  277,   -1,  279,   -1,  281,   -1,
   -1,  284,   -1,   -1,  287,  288,   -1,   -1,   -1,   -1,
   -1,   -1,  295,  296,  297,   -1,   -1,  300,  301,  302,
   -1,  304,   -1,  413,  307,   -1,  309,  310,  311,  312,
   -1,   -1,   -1,  316,  317,  318,   -1,   -1,  321,  322,
  323,   -1,   -1,   -1,   -1,   -1,   -1,  330,  331,   -1,
  333,  334,  257,  336,  337,  338,  261,   -1,   -1,  342,
  265,   -1,  267,   -1,   -1,  270,   -1,  272,   -1,   -1,
  275,   -1,  277,   -1,  279,   -1,  281,   -1,   -1,  284,
   -1,   -1,  287,  288,   -1,   -1,   -1,   -1,   -1,   -1,
  295,  296,  297,   -1,   -1,  300,  301,  302,   -1,  304,
   -1,   -1,  307,   -1,  309,  310,  311,  312,   -1,   -1,
   -1,  316,  317,  318,   -1,   -1,  321,  322,  323,   -1,
   -1,   -1,   -1,   -1,   -1,  330,  331,   -1,  333,  334,
  413,  336,  337,  338,  261,   -1,  285,  342,  265,   -1,
  267,   -1,   -1,  270,   -1,  272,   -1,   -1,  275,   -1,
  277,   -1,  279,   -1,  281,   -1,   -1,  284,   -1,   -1,
  287,  288,   -1,   -1,   -1,   -1,   -1,   -1,  295,  296,
  297,   -1,   -1,  300,  301,  302,   -1,  304,  327,   -1,
  307,   -1,  309,  310,  311,  312,   -1,   -1,   -1,  316,
  317,  318,   -1,   -1,  321,  322,  323,   -1,   -1,   -1,
   -1,   -1,   -1,  330,  331,   -1,  333,  334,  413,  336,
  337,  338,  256,   -1,   -1,  342,   -1,  261,  262,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  375,  376,  377,  378,
   -1,  380,  381,  382,  383,  384,  385,  386,  387,   -1,
  284,  390,  391,  392,  393,  394,  395,  396,  397,   -1,
  294,   -1,   -1,  297,  298,   -1,   -1,   -1,  302,   -1,
   -1,  305,   -1,  307,   -1,  309,  310,  311,  312,   -1,
   -1,   -1,   -1,  317,   -1,   -1,   -1,  321,   -1,   -1,
   -1,  325,   -1,   -1,   -1,   -1,  413,   -1,   -1,  333,
   -1,   -1,  336,   -1,  338,  339,   -1,   -1,   -1,   -1,
  344,   -1,  346,  347,  348,  349,  350,  351,  352,  353,
  354,  355,  356,  357,   -1,   -1,   -1,  361,   -1,   -1,
   -1,  365,  366,   -1,  368,  369,  370,  371,  372,  373,
  374,   -1,  376,  377,   -1,  379,  380,  381,  382,  383,
  384,  385,  386,  387,  388,   -1,  390,  391,  392,  393,
  394,  395,  396,  397,  398,  399,  400,  401,  402,  403,
  404,  405,  406,  407,  408,  409,  410,  411,  256,  413,
   -1,  415,   -1,  261,  262,   -1,   -1,   -1,  422,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  284,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  294,   -1,   -1,  297,
  298,   -1,   -1,   -1,  302,   -1,   -1,  305,   -1,  307,
   -1,  309,  310,  311,  312,   -1,   -1,   -1,   -1,  317,
   -1,   -1,   -1,  321,   -1,   -1,   -1,  325,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  333,   -1,   -1,  336,   -1,
  338,  339,   -1,   -1,   -1,   -1,  344,   -1,  346,  347,
  348,  349,  350,  351,  352,  353,  354,  355,  356,  357,
   -1,   -1,   -1,  361,   -1,   -1,   -1,  365,  366,  367,
  368,  369,  370,  371,  372,  373,  374,   -1,  376,  377,
   -1,   -1,  380,  381,  382,  383,  384,   -1,   -1,  387,
  388,   -1,   -1,   -1,  392,  393,  394,  395,  396,  397,
  398,  399,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  256,   -1,  411,   -1,  413,   -1,  415,   -1,  264,
  265,  266,  267,   -1,  422,  270,  271,   -1,  273,  274,
  275,  276,  277,  278,  279,   -1,   -1,   -1,   -1,   -1,
  285,   -1,  287,  288,  289,  290,  291,  292,   -1,   -1,
  295,   -1,   -1,   -1,  299,  300,   -1,  302,  303,  304,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  314,
   -1,  316,   -1,  318,  319,   -1,   -1,  322,   -1,  324,
  325,  326,  327,  328,  329,  330,  331,  332,  333,  334,
  335,   -1,  337,   -1,   -1,  340,   -1,   -1,   -1,  344,
  345,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  256,   -1,   -1,   -1,   -1,  261,  262,   -1,   -1,   -1,
  365,   -1,   -1,   -1,  369,   -1,   -1,   -1,   -1,  374,
  375,  376,  377,  378,   -1,   -1,   -1,  382,  284,  384,
   -1,   -1,   -1,   -1,   -1,  390,  391,   -1,  294,   -1,
   -1,  297,  298,   -1,   -1,   -1,  302,   -1,   -1,   -1,
   -1,  307,   -1,  309,  310,  311,  312,  412,  413,  414,
  415,  317,   -1,   -1,   -1,  321,   -1,  422,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  333,   -1,   -1,
  336,   -1,  338,  339,   -1,   -1,   -1,   -1,  344,   -1,
  346,  347,  348,  349,  350,  351,  352,  353,  354,  355,
  356,  357,   -1,   -1,   -1,  361,   -1,   -1,   -1,  365,
  366,  367,  368,  369,  370,  371,  372,  373,  374,   -1,
  376,  377,   -1,   -1,  380,  381,  382,  383,  384,   -1,
   -1,  387,  388,   -1,   -1,   -1,  392,  393,  394,  395,
  396,  397,  398,  399,  256,   -1,   -1,   -1,   -1,  261,
  262,   -1,   -1,   -1,   -1,  411,   -1,  413,   -1,  415,
   -1,   -1,   -1,   -1,   -1,   -1,  422,   -1,   -1,   -1,
   -1,   -1,  284,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  294,   -1,   -1,  297,  298,   -1,   -1,   -1,
  302,   -1,   -1,  305,   -1,  307,   -1,  309,  310,  311,
  312,   -1,   -1,   -1,   -1,  317,   -1,   -1,   -1,  321,
   -1,   -1,   -1,  325,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  333,   -1,   -1,  336,  256,  338,  339,   -1,   -1,
   -1,  262,  344,   -1,  346,  347,  348,  349,  350,  351,
  352,  353,  354,  355,  356,   -1,   -1,   -1,   -1,  361,
   -1,   -1,   -1,  365,  366,  367,  368,  369,  370,   -1,
  372,  373,  374,   -1,  376,  377,   -1,  298,  380,  381,
  382,  383,  384,   -1,   -1,  387,  388,   -1,   -1,   -1,
  392,  393,  394,  395,  396,  397,  398,  399,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  411,
   -1,  413,   -1,  415,   -1,  256,   -1,   -1,  339,   -1,
  422,  262,   -1,  344,   -1,  346,  347,  348,  349,  350,
  351,  352,  353,  354,  355,  356,  357,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  366,  367,  368,  369,  370,
  371,  372,  373,  374,   -1,  376,  377,  298,  379,  380,
  381,  382,  383,  384,  385,  386,  387,  388,   -1,  390,
  391,  392,  393,  394,  395,  396,  397,  398,  399,  400,
  401,  402,  403,  404,  405,  406,  407,  408,  409,  410,
  411,   -1,  413,   -1,  415,   -1,   -1,   -1,  339,   -1,
   -1,  422,   -1,  344,   -1,  346,  347,  348,  349,  350,
  351,  352,  353,  354,  355,  356,  357,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  256,  366,  367,  368,  369,  370,
  371,  372,  373,  374,   -1,  376,  377,   -1,  379,  380,
  381,  382,  383,  384,  385,  386,  387,  388,   -1,  390,
  391,  392,  393,  394,  395,  396,  397,  398,  399,  400,
  401,  402,  403,  404,  405,  406,  407,  408,  409,  410,
  411,  256,  413,   -1,  415,   -1,   -1,  262,   -1,   -1,
   -1,  422,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  339,   -1,   -1,
   -1,   -1,  344,  298,  346,  347,  348,  349,  350,  351,
  352,  353,  354,  355,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  366,   -1,  368,   -1,  370,   -1,
  372,  373,  374,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  339,   -1,   -1,   -1,   -1,  344,
   -1,  346,  347,  348,  349,  350,  351,  352,  353,  354,
  355,  356,  357,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  366,  367,  368,  369,  370,  371,  372,  373,  374,
  422,  376,   -1,   -1,  379,  380,  381,  382,  383,  384,
  385,  386,  387,  388,   -1,  390,  391,  392,  393,  394,
  395,  396,  397,  398,  399,  400,  401,  402,  403,  404,
  405,  406,  407,  408,  409,  410,  411,  256,  413,   -1,
  415,   -1,  261,  262,   -1,   -1,   -1,  422,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  284,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  294,   -1,   -1,  297,  298,
   -1,   -1,   -1,  302,   -1,   -1,  305,   -1,  307,   -1,
  309,  310,  311,  312,   -1,   -1,   -1,   -1,  317,   -1,
   -1,   -1,  321,   -1,   -1,   -1,  325,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  333,   -1,   -1,  336,  256,  338,
  339,   -1,   -1,   -1,  262,  344,   -1,  346,  347,  348,
  349,  350,  351,  352,  353,  354,  355,  356,   -1,   -1,
   -1,   -1,  361,   -1,   -1,   -1,  365,  366,   -1,  368,
  369,  370,   -1,  372,  373,  374,   -1,  376,  377,   -1,
  298,  380,  381,  382,  383,   -1,   -1,   -1,  387,  388,
   -1,   -1,   -1,  392,  393,  394,  395,  396,  397,  398,
  399,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  411,   -1,  413,   -1,   -1,   -1,  256,   -1,
   -1,  339,   -1,  422,  262,   -1,  344,   -1,  346,  347,
  348,  349,  350,  351,  352,  353,  354,  355,  356,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  366,  367,
  368,  369,  370,  371,  372,  373,  374,   -1,  376,  377,
  298,  379,  380,  381,  382,  383,  384,  385,  386,  387,
  388,   -1,  390,  391,  392,  393,  394,  395,  396,  397,
  398,  399,  400,  401,  402,  403,  404,  405,  406,  407,
  408,  409,  410,  411,   -1,  256,   -1,  415,   -1,   -1,
   -1,  339,   -1,   -1,  422,   -1,  344,   -1,  346,  347,
  348,  349,  350,  351,  352,  353,  354,  355,  356,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  365,  366,   -1,
  368,  369,  370,  371,  372,  373,  374,   -1,  376,  377,
   -1,  379,  380,  381,  382,  383,  384,  385,  386,  387,
  388,   -1,  390,  391,  392,  393,  394,  395,  396,  397,
  398,  399,  400,  401,  402,  403,  404,  405,  406,  407,
  408,  409,  410,  411,  256,   -1,   -1,  415,  339,   -1,
  262,   -1,   -1,  344,  422,  346,  347,  348,  349,  350,
  351,  352,  353,  354,  355,  356,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  366,   -1,  368,   -1,  370,
   -1,  372,  373,  374,   -1,   -1,  298,   -1,   -1,  380,
  381,  382,  383,   -1,   -1,   -1,  387,  388,   -1,   -1,
   -1,  392,  393,  394,  395,  396,  397,  398,  399,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  411,   -1,   -1,   -1,  256,   -1,   -1,  339,   -1,   -1,
  262,  422,  344,   -1,  346,  347,  348,  349,  350,  351,
  352,  353,  354,  355,  356,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  366,   -1,  368,  369,  370,  371,
  372,  373,  374,   -1,  376,  377,  298,  379,  380,  381,
  382,  383,  384,  385,  386,  387,  388,   -1,  390,  391,
  392,  393,  394,  395,  396,  397,  398,  399,  400,  401,
  402,  403,  404,  405,  406,  407,  408,  409,  410,  411,
   -1,  256,   -1,  415,   -1,   -1,   -1,  339,   -1,   -1,
  422,   -1,  344,   -1,  346,  347,  348,  349,  350,  351,
  352,  353,  354,  355,  356,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  366,   -1,  368,  369,  370,  371,
  372,  373,  374,   -1,  376,  377,   -1,  379,  380,  381,
  382,  383,  384,  385,  386,  387,  388,   -1,  390,  391,
  392,  393,  394,  395,  396,  397,  398,  399,  400,  401,
  402,  403,  404,  405,  406,  407,  408,  409,  410,  411,
  256,   -1,   -1,  415,  339,   -1,  262,   -1,   -1,  344,
  422,  346,  347,  348,  349,  350,  351,  352,  353,  354,
  355,  356,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  366,   -1,  368,   -1,  370,   -1,  372,  373,  374,
   -1,   -1,  298,   -1,   -1,  380,  381,  382,  383,   -1,
   -1,   -1,  387,  388,   -1,   -1,   -1,  392,  393,  394,
  395,  396,  397,  398,  399,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  256,   -1,   -1,  411,   -1,   -1,  262,
   -1,   -1,   -1,  339,   -1,   -1,   -1,  422,  344,   -1,
  346,  347,  348,  349,  350,  351,  352,  353,  354,  355,
  356,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  366,   -1,  368,   -1,  370,  298,  372,  373,  374,   -1,
  376,  377,   -1,  379,  380,  381,  382,  383,  384,  385,
  386,  387,  388,   -1,   -1,   -1,  392,  393,  394,  395,
  396,  397,  398,  399,  400,  401,  402,  403,  404,  405,
  406,  407,  408,  409,  256,  411,   -1,   -1,   -1,   -1,
  262,   -1,   -1,   -1,   -1,   -1,  422,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  366,  367,   -1,  369,   -1,  371,  372,
   -1,   -1,  294,  376,  377,   -1,  298,  380,  381,  382,
  383,  384,  385,  386,  387,  388,   -1,  390,  391,  392,
  393,  394,  395,  396,  397,  398,  399,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  410,  411,   -1,
   -1,   -1,  415,   -1,  256,   -1,   -1,  339,   -1,  422,
  262,   -1,  344,   -1,  346,  347,  348,  349,  350,  351,
  352,  353,  354,  355,  356,   -1,   -1,   -1,   -1,  361,
   -1,   -1,   -1,  365,  366,   -1,  368,  369,  370,   -1,
  372,  373,  374,   -1,  376,  377,  298,   -1,  380,  381,
  382,  383,   -1,   -1,   -1,  387,  388,   -1,   -1,   -1,
  392,  393,  394,  395,  396,  397,  398,  399,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  411,
   -1,  413,   -1,   -1,   -1,  256,   -1,  339,   -1,   -1,
  422,  262,  344,   -1,  346,  347,  348,  349,  350,  351,
  352,  353,  354,  355,  356,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  366,   -1,  368,   -1,  370,   -1,
  372,  373,  374,   -1,  376,  377,   -1,  298,  380,  381,
  382,  383,  384,  385,  386,  387,  388,   -1,   -1,   -1,
  392,  393,  394,  395,  396,  397,  398,  399,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  411,
   -1,   -1,   -1,   -1,   -1,  256,   -1,   -1,  339,   -1,
  422,  262,   -1,  344,   -1,  346,  347,  348,  349,  350,
  351,  352,  353,  354,  355,  356,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  366,   -1,  368,   -1,  370,
   -1,  372,  373,  374,   -1,  376,  377,  298,   -1,  380,
  381,  382,  383,   -1,   -1,   -1,  387,  388,   -1,   -1,
   -1,  392,  393,  394,  395,  396,  397,  398,  399,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  411,   -1,   -1,   -1,   -1,   -1,  256,   -1,  339,   -1,
   -1,  422,  262,  344,   -1,  346,  347,  348,  349,  350,
  351,  352,  353,  354,  355,  356,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  366,   -1,  368,   -1,  370,
   -1,  372,  373,  374,   -1,  376,  377,   -1,  298,  380,
  381,  382,  383,   -1,   -1,   -1,  387,  388,   -1,   -1,
   -1,  392,  393,  394,  395,  396,  397,  398,  399,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  411,   -1,   -1,   -1,   -1,   -1,  256,   -1,   -1,  339,
   -1,  422,  262,   -1,  344,   -1,  346,  347,  348,  349,
  350,  351,  352,  353,  354,  355,  356,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  366,   -1,  368,   -1,
  370,   -1,  372,  373,  374,   -1,  376,  377,  298,   -1,
  380,  381,  382,  383,   -1,   -1,   -1,  387,  388,   -1,
   -1,   -1,  392,  393,  394,  395,  396,  397,  398,  399,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  411,   -1,  256,   -1,   -1,   -1,   -1,   -1,  339,
   -1,   -1,  422,   -1,  344,   -1,  346,  347,  348,  349,
  350,  351,  352,  353,  354,  355,  356,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  366,   -1,  368,   -1,
  370,   -1,  372,  373,  374,   -1,  376,  377,   -1,   -1,
  380,  381,  382,  383,   -1,   -1,   -1,  387,  388,   -1,
   -1,   -1,  392,  393,  394,  395,  396,  397,  398,  399,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  256,  411,   -1,   -1,   -1,   -1,  339,   -1,   -1,   -1,
   -1,  344,  422,  346,  347,  348,  349,  350,  351,  352,
  353,  354,  355,  356,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  366,   -1,  368,   -1,  370,   -1,  372,
  373,  374,   -1,   -1,   -1,   -1,   -1,  380,  381,  382,
  383,   -1,   -1,   -1,  387,  388,   -1,   -1,   -1,   -1,
   -1,  394,  395,  396,  397,  398,  399,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  256,  411,   -1,
   -1,   -1,   -1,  339,   -1,   -1,   -1,   -1,  344,  422,
  346,  347,  348,  349,  350,  351,  352,  353,  354,  355,
  356,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  366,   -1,  368,   -1,  370,   -1,  372,  373,  374,   -1,
   -1,   -1,   -1,   -1,  380,  381,  382,  383,   -1,   -1,
   -1,  387,  388,   -1,   -1,   -1,   -1,   -1,  394,  395,
  396,  397,  398,  399,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  256,  411,   -1,   -1,   -1,   -1,
  339,   -1,   -1,   -1,   -1,  344,  422,  346,  347,  348,
  349,  350,  351,  352,  353,  354,  355,  356,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  366,   -1,  368,
   -1,  370,   -1,  372,  373,  374,   -1,   -1,   -1,   -1,
   -1,  380,  381,  382,  383,   -1,   -1,   -1,  387,  388,
   -1,   -1,   -1,   -1,   -1,  394,  395,  396,  397,  398,
  399,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  256,  411,   -1,   -1,   -1,   -1,  339,   -1,   -1,
   -1,   -1,  344,  422,  346,  347,  348,  349,  350,  351,
  352,  353,  354,  355,  356,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  366,   -1,  368,   -1,  370,   -1,
  372,  373,  374,   -1,   -1,   -1,   -1,   -1,  380,  381,
  382,  383,   -1,   -1,   -1,  387,  388,   -1,   -1,   -1,
   -1,   -1,  394,  395,  396,  397,  398,  399,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  256,  411,
   -1,   -1,   -1,   -1,  339,   -1,   -1,   -1,   -1,  344,
  422,  346,  347,  348,  349,  350,  351,  352,  353,  354,
  355,  356,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  366,   -1,  368,   -1,  370,   -1,  372,  373,  374,
   -1,   -1,   -1,   -1,   -1,  380,  381,  382,  383,   -1,
   -1,   -1,  387,  388,   -1,   -1,   -1,   -1,   -1,  394,
  395,  396,  397,  398,  399,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  256,  411,   -1,   -1,   -1,
   -1,  339,   -1,   -1,   -1,   -1,  344,  422,  346,  347,
  348,  349,  350,  351,  352,  353,  354,  355,  356,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  366,   -1,
  368,   -1,  370,   -1,  372,  373,  374,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  382,  383,   -1,   -1,   -1,  387,
  388,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  396,  397,
  398,  399,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  256,  411,   -1,   -1,   -1,   -1,  339,   -1,
   -1,   -1,   -1,  344,  422,  346,  347,  348,  349,  350,
  351,  352,  353,  354,  355,  356,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  366,   -1,  368,   -1,  370,
   -1,  372,  373,  374,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  382,  383,   -1,   -1,   -1,  387,  388,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  396,  397,  398,  399,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  256,
  411,   -1,   -1,   -1,   -1,  339,   -1,   -1,   -1,   -1,
  344,  422,  346,  347,  348,  349,  350,  351,  352,  353,
  354,  355,  356,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  366,   -1,  368,   -1,  370,   -1,  372,  373,
  374,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  382,  383,
   -1,   -1,   -1,  387,  388,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  396,  397,  398,  399,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  256,  411,   -1,   -1,
   -1,   -1,  339,   -1,   -1,   -1,   -1,  344,  422,  346,
  347,  348,  349,  350,  351,  352,  353,  354,  355,  356,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  366,
   -1,  368,   -1,  370,   -1,  372,  373,  374,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  382,  383,   -1,   -1,   -1,
  387,  388,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  398,  399,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  256,  411,   -1,   -1,   -1,   -1,  339,
   -1,   -1,   -1,   -1,  344,  422,  346,  347,  348,  349,
  350,  351,  352,  353,  354,  355,  356,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  366,   -1,  368,   -1,
  370,   -1,  372,  373,  374,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  382,  383,   -1,   -1,   -1,  387,  388,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  398,  399,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  256,  411,   -1,   -1,   -1,   -1,  339,   -1,   -1,   -1,
   -1,  344,  422,  346,  347,  348,  349,  350,  351,  352,
  353,  354,  355,  356,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  366,   -1,  368,   -1,  370,   -1,  372,
  373,  374,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  383,   -1,   -1,   -1,  387,  388,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  398,  399,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  256,  411,   -1,
   -1,   -1,   -1,  339,   -1,   -1,   -1,   -1,  344,  422,
  346,  347,  348,  349,  350,  351,  352,  353,  354,  355,
  356,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  366,   -1,  368,   -1,  370,   -1,  372,  373,  374,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  383,   -1,   -1,
   -1,  387,  388,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  398,  399,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  256,  411,   -1,   -1,   -1,   -1,
  339,   -1,   -1,   -1,   -1,  344,  422,  346,  347,  348,
  349,  350,  351,  352,  353,  354,  355,  356,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  366,   -1,  368,
   -1,  370,   -1,  372,  373,  374,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  383,   -1,   -1,   -1,   -1,  388,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  398,
  399,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  256,  411,   -1,   -1,   -1,   -1,  339,   -1,   -1,
   -1,   -1,  344,  422,  346,  347,  348,  349,  350,  351,
  352,  353,  354,  355,  356,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  366,   -1,  368,   -1,  370,   -1,
  372,  373,  374,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  383,   -1,   -1,   -1,   -1,  388,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  398,  399,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  256,  411,
   -1,   -1,   -1,   -1,  339,   -1,   -1,   -1,   -1,  344,
  422,  346,  347,  348,  349,  350,  351,  352,  353,  354,
  355,  356,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  366,   -1,  368,   -1,  370,   -1,  372,  373,  374,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  388,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  398,  399,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  256,  411,   -1,   -1,   -1,
   -1,  339,   -1,   -1,   -1,   -1,  344,  422,  346,  347,
  348,  349,  350,  351,  352,  353,  354,  355,  356,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  366,   -1,
  368,   -1,  370,   -1,  372,  373,  374,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  388,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  398,  399,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  256,  411,  261,   -1,   -1,   -1,  339,   -1,
   -1,   -1,   -1,  344,  422,  346,  347,  348,  349,  350,
  351,  352,  353,  354,  355,  356,   -1,  284,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  366,   -1,  368,   -1,  370,
  297,  372,  373,  374,   -1,  302,   -1,   -1,   -1,   -1,
  307,   -1,  309,  310,  311,  312,   -1,  388,   -1,   -1,
  317,   -1,   -1,   -1,  321,   -1,   -1,  262,  399,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  333,   -1,   -1,  336,
  411,  338,   -1,   -1,   -1,  339,   -1,   -1,   -1,   -1,
  344,  422,  346,  347,  348,  349,  350,  351,  352,  353,
  354,  355,  356,  298,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  366,   -1,  368,   -1,  370,   -1,  372,  373,
  374,   -1,   -1,  262,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  388,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  399,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  413,  411,   -1,  298,
   -1,   -1,  357,   -1,   -1,   -1,   -1,   -1,  422,   -1,
   -1,   -1,  367,   -1,  369,   -1,  371,   -1,   -1,  374,
   -1,  376,  377,  262,  379,  380,  381,  382,  383,  384,
  385,  386,  387,  388,   -1,  390,  391,  392,  393,  394,
  395,  396,  397,  398,  399,  400,  401,  402,  403,  404,
  405,  406,  407,  408,  409,  410,  411,   -1,  413,  298,
  415,   -1,   -1,   -1,   -1,   -1,   -1,  422,  367,  368,
  369,  370,  371,  372,   -1,   -1,   -1,  376,  377,   -1,
  379,  380,  381,  382,  383,  384,  385,  386,  387,  388,
   -1,  390,  391,  392,  393,  394,  395,  396,  397,  398,
  399,  400,  401,  402,  403,  404,  405,  406,  407,  408,
  409,  410,  411,   -1,   -1,   -1,  415,   -1,   -1,   -1,
   -1,   -1,   -1,  422,   -1,   -1,   -1,   -1,   -1,   -1,
  369,  370,  371,  372,   -1,  374,   -1,  376,  377,   -1,
  379,  380,  381,  382,  383,   -1,  385,  386,  387,  388,
   -1,  390,  391,  392,  393,  394,  395,  396,  397,  398,
  399,  400,  401,  402,  403,  404,  405,  406,  407,  408,
  409,  410,  411,   -1,  413,   -1,  415,  256,   -1,   -1,
   -1,   -1,   -1,  422,   -1,  264,  265,  266,  267,   -1,
   -1,  270,  271,   -1,  273,  274,  275,  276,  277,  278,
  279,   -1,   -1,   -1,   -1,   -1,  285,   -1,  287,  288,
  289,  290,  291,  292,   -1,   -1,  295,   -1,   -1,   -1,
  299,  300,   -1,  302,  303,  304,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  314,   -1,  316,   -1,  318,
  319,   -1,   -1,  322,   -1,  324,  325,  326,  327,  328,
  329,  330,  331,  332,  333,  334,  335,   -1,  337,   -1,
   -1,  340,   -1,   -1,   -1,  344,  345,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  365,   -1,   -1,   -1,
  369,   -1,   -1,   -1,   -1,  374,  375,  376,  377,  378,
   -1,   -1,   -1,  382,   -1,  384,   -1,   -1,  256,   -1,
   -1,  390,  391,   -1,   -1,   -1,  264,  265,  266,  267,
   -1,   -1,  270,  271,   -1,  273,  274,  275,  276,  277,
  278,  279,   -1,  412,  413,  414,  415,  285,   -1,  287,
  288,  289,  290,  291,  292,   -1,   -1,  295,   -1,   -1,
   -1,  299,  300,   -1,  302,  303,  304,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  314,   -1,  316,   -1,
  318,  319,   -1,   -1,  322,   -1,  324,  325,  326,  327,
  328,  329,  330,  331,  332,  333,  334,  335,   -1,  337,
   -1,   -1,  340,   -1,   -1,   -1,  344,  345,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  365,   -1,   -1,
   -1,  369,   -1,   -1,   -1,   -1,  374,  375,  376,  377,
  378,   -1,   -1,   -1,  382,   -1,  384,   -1,   -1,  256,
   -1,   -1,  390,  391,   -1,   -1,   -1,  264,  265,  266,
  267,   -1,   -1,  270,  271,   -1,  273,  274,  275,  276,
  277,  278,  279,   -1,  412,  413,  414,  415,  285,   -1,
  287,  288,  289,  290,  291,  292,   -1,   -1,  295,   -1,
   -1,   -1,  299,  300,   -1,  302,  303,  304,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  314,   -1,  316,
   -1,  318,  319,   -1,   -1,  322,   -1,  324,  325,  326,
  327,  328,  329,  330,  331,  332,  333,  334,  335,   -1,
  337,   -1,   -1,  340,   -1,   -1,   -1,  344,  345,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  365,   -1,
   -1,   -1,  369,   -1,   -1,   -1,   -1,  374,  375,  376,
  377,  378,   -1,   -1,   -1,  382,   -1,  384,   -1,   -1,
  256,   -1,   -1,  390,  391,   -1,   -1,   -1,  264,  265,
  266,  267,   -1,   -1,  270,  271,   -1,  273,  274,  275,
  276,  277,  278,  279,   -1,  412,  413,  414,  415,  285,
   -1,  287,  288,  289,  290,  291,  292,   -1,   -1,  295,
   -1,   -1,   -1,  299,  300,   -1,  302,  303,  304,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  314,   -1,
  316,   -1,  318,  319,   -1,   -1,  322,   -1,  324,  325,
  326,  327,  328,  329,  330,  331,  332,  333,  334,  335,
   -1,  337,   -1,   -1,  340,   -1,   -1,   -1,  344,  345,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  365,
   -1,   -1,   -1,  369,   -1,   -1,   -1,   -1,  374,  375,
  376,  377,  378,   -1,   -1,   -1,  382,   -1,  384,   -1,
   -1,  256,   -1,   -1,  390,  391,   -1,   -1,   -1,  264,
  265,   -1,  267,   -1,   -1,  270,  271,   -1,   -1,   -1,
  275,  276,  277,   -1,  279,   -1,  412,  413,  414,  415,
  285,   -1,   -1,  288,   -1,   -1,   -1,   -1,   -1,   -1,
  295,   -1,   -1,   -1,   -1,  300,   -1,  302,  303,  304,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  316,   -1,  318,  319,   -1,   -1,  322,   -1,   -1,
  325,   -1,  327,   -1,  329,  330,  331,  332,   -1,  334,
   -1,   -1,  337,   -1,   -1,   -1,   -1,   -1,   -1,  344,
  345,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  368,  369,   -1,   -1,  372,   -1,   -1,
  375,  376,  377,  378,   -1,   -1,   -1,  382,   -1,  384,
   -1,   -1,  256,   -1,   -1,  390,  391,   -1,   -1,   -1,
  264,  265,   -1,  267,   -1,   -1,  270,  271,   -1,   -1,
   -1,  275,  276,  277,   -1,  279,   -1,  412,  413,  414,
  415,  285,   -1,   -1,  288,   -1,   -1,   -1,   -1,   -1,
   -1,  295,   -1,   -1,   -1,   -1,  300,   -1,  302,  303,
  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  316,   -1,  318,  319,   -1,   -1,  322,   -1,
   -1,  325,   -1,  327,   -1,  329,  330,  331,  332,   -1,
  334,   -1,   -1,  337,   -1,   -1,   -1,   -1,   -1,   -1,
  344,  345,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  368,  369,   -1,   -1,  372,   -1,
   -1,  375,  376,  377,  378,   -1,   -1,   -1,  382,   -1,
  384,   -1,   -1,  256,   -1,   -1,  390,  391,   -1,   -1,
   -1,  264,  265,   -1,  267,   -1,   -1,  270,  271,   -1,
   -1,   -1,  275,  276,  277,   -1,  279,   -1,  412,  413,
  414,  415,  285,   -1,   -1,  288,   -1,   -1,   -1,   -1,
   -1,   -1,  295,   -1,   -1,   -1,   -1,  300,   -1,  302,
  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  316,   -1,  318,  319,   -1,   -1,  322,
   -1,   -1,  325,   -1,  327,   -1,  329,  330,  331,  332,
   -1,  334,   -1,   -1,  337,   -1,   -1,   -1,   -1,   -1,
   -1,  344,  345,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  365,  366,   -1,   -1,  369,   -1,   -1,   -1,
   -1,   -1,  375,  376,  377,  378,   -1,   -1,   -1,  382,
   -1,  384,   -1,   -1,  256,   -1,   -1,  390,  391,   -1,
   -1,   -1,  264,  265,   -1,  267,   -1,   -1,  270,  271,
   -1,   -1,   -1,  275,  276,  277,   -1,  279,   -1,  412,
  413,  414,  415,  285,   -1,   -1,  288,   -1,   -1,   -1,
   -1,   -1,   -1,  295,   -1,   -1,   -1,   -1,  300,   -1,
  302,  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  316,   -1,  318,  319,   -1,   -1,
  322,   -1,   -1,  325,   -1,  327,   -1,  329,  330,  331,
  332,   -1,  334,   -1,   -1,  337,   -1,   -1,   -1,   -1,
   -1,   -1,  344,  345,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  369,   -1,   -1,
   -1,   -1,   -1,  375,  376,  377,  378,   -1,   -1,   -1,
  382,   -1,  384,   -1,   -1,  256,   -1,   -1,  390,  391,
   -1,   -1,   -1,  264,  265,   -1,  267,   -1,   -1,  270,
  271,   -1,   -1,   -1,  275,  276,  277,   -1,  279,   -1,
  412,  413,  414,  415,  285,   -1,   -1,  288,   -1,   -1,
   -1,   -1,   -1,   -1,  295,   -1,   -1,   -1,   -1,  300,
   -1,  302,  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  316,   -1,  318,  319,   -1,
   -1,  322,   -1,   -1,  325,   -1,  327,   -1,  329,  330,
  331,  332,   -1,  334,   -1,   -1,  337,   -1,   -1,   -1,
   -1,   -1,   -1,  344,  345,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  369,   -1,
   -1,   -1,   -1,   -1,  375,  376,  377,  378,   -1,   -1,
   -1,  382,   -1,  384,   -1,  264,  265,   -1,  267,  390,
  391,  270,  271,   -1,   -1,   -1,  275,  276,  277,   -1,
  279,   -1,   -1,   -1,   -1,   -1,  285,   -1,   -1,  288,
   -1,  412,  413,  414,  415,   -1,  295,   -1,   -1,   -1,
   -1,  300,   -1,  302,  303,  304,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  316,   -1,  318,
  319,   -1,   -1,  322,   -1,   -1,  325,   -1,  327,   -1,
  329,  330,  331,  332,   -1,  334,   -1,   -1,  337,   -1,
   -1,   -1,   -1,   -1,   -1,  344,  345,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  365,  366,   -1,   -1,
  369,   -1,   -1,   -1,   -1,   -1,  375,  376,  377,  378,
   -1,   -1,   -1,  382,   -1,  384,   -1,  264,  265,   -1,
  267,  390,  391,  270,  271,   -1,   -1,   -1,  275,  276,
  277,   -1,  279,   -1,   -1,   -1,   -1,   -1,  285,   -1,
   -1,  288,   -1,  412,  413,  414,  415,   -1,  295,   -1,
   -1,   -1,  421,  300,   -1,  302,  303,  304,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  316,
   -1,  318,  319,   -1,   -1,  322,   -1,   -1,  325,   -1,
  327,   -1,  329,  330,  331,  332,   -1,  334,   -1,   -1,
  337,   -1,   -1,   -1,   -1,   -1,   -1,  344,  345,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  365,   -1,
   -1,   -1,  369,   -1,   -1,   -1,   -1,   -1,  375,  376,
  377,  378,   -1,   -1,   -1,  382,   -1,  384,   -1,   -1,
  256,   -1,   -1,  390,  391,   -1,   -1,   -1,  264,  265,
   -1,  267,   -1,   -1,  270,  271,   -1,   -1,   -1,  275,
  276,  277,   -1,  279,   -1,  412,  413,  414,  415,  285,
   -1,   -1,  288,   -1,  421,   -1,   -1,   -1,   -1,  295,
   -1,   -1,   -1,   -1,  300,  256,  302,  303,  304,   -1,
   -1,   -1,   -1,   -1,  265,   -1,  267,   -1,   -1,  270,
  316,   -1,  318,  319,  275,   -1,  322,   -1,  279,  325,
   -1,  327,   -1,  329,  330,  331,  332,  288,  334,   -1,
   -1,  337,   -1,   -1,  295,  256,   -1,   -1,   -1,  300,
   -1,   -1,   -1,  304,  265,   -1,  267,   -1,   -1,  270,
   -1,   -1,   -1,   -1,  275,  316,   -1,  318,  279,   -1,
   -1,  322,   -1,  369,   -1,   -1,   -1,  288,   -1,  330,
  331,   -1,   -1,  334,  295,   -1,  337,   -1,   -1,  300,
  256,   -1,   -1,  304,   -1,   -1,   -1,   -1,   -1,  265,
   -1,  267,   -1,   -1,  270,  316,   -1,  318,   -1,  275,
   -1,  322,   -1,  279,   -1,   -1,  412,  413,   -1,  330,
  331,   -1,  288,  334,   -1,   -1,  337,   -1,   -1,  295,
   -1,   -1,   -1,   -1,  300,  256,   -1,   -1,  304,   -1,
   -1,   -1,   -1,   -1,  265,   -1,  267,   -1,   -1,  270,
  316,   -1,  318,   -1,  275,   -1,  322,   -1,  279,   -1,
   -1,   -1,  413,   -1,  330,  331,   -1,  288,  334,   -1,
   -1,  337,   -1,   -1,  295,   -1,   -1,   -1,   -1,  300,
   -1,   -1,   -1,  304,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  316,   -1,  318,   -1,   -1,
   -1,  322,  413,   -1,   -1,   -1,   -1,   -1,   -1,  330,
  331,   -1,   -1,  334,   -1,   -1,  337,   -1,   -1,   -1,
   -1,  257,   -1,   -1,   -1,  261,   -1,   -1,   -1,  265,
   -1,  267,   -1,   -1,  270,   -1,  272,   -1,   -1,  275,
   -1,  277,   -1,  279,   -1,  281,   -1,  413,  284,   -1,
   -1,  287,  288,   -1,   -1,   -1,   -1,   -1,   -1,  295,
  296,  297,   -1,   -1,  300,  301,  302,   -1,  304,   -1,
   -1,  307,   -1,  309,  310,  311,  312,   -1,   -1,   -1,
  316,  317,  318,   -1,   -1,  321,  322,  323,   -1,   -1,
   -1,   -1,  413,   -1,  330,  331,   -1,  333,  334,  335,
  336,  337,  338,   -1,   -1,  257,  342,   -1,   -1,  261,
   -1,   -1,   -1,  265,   -1,  267,   -1,   -1,  270,   -1,
  272,   -1,   -1,  275,   -1,  277,   -1,  279,   -1,  281,
  366,  367,  284,   -1,   -1,  287,  288,   -1,   -1,   -1,
   -1,   -1,   -1,  295,  296,  297,   -1,   -1,  300,  301,
  302,   -1,  304,   -1,   -1,  307,   -1,  309,  310,  311,
  312,   -1,   -1,   -1,  316,  317,  318,   -1,   -1,  321,
  322,  323,   -1,   -1,   -1,   -1,   -1,  413,  330,  331,
   -1,  333,  334,  335,  336,  337,  338,   -1,   -1,  257,
  342,   -1,   -1,  261,   -1,   -1,   -1,  265,   -1,  267,
   -1,   -1,  270,   -1,  272,   -1,   -1,  275,   -1,  277,
   -1,  279,   -1,  281,  366,  367,  284,   -1,   -1,  287,
  288,   -1,   -1,   -1,   -1,   -1,   -1,  295,  296,  297,
   -1,   -1,  300,  301,  302,   -1,  304,   -1,   -1,  307,
   -1,  309,  310,  311,  312,   -1,   -1,   -1,  316,  317,
  318,   -1,   -1,  321,  322,  323,   -1,   -1,   -1,   -1,
   -1,  413,  330,  331,   -1,  333,  334,   -1,  336,  337,
  338,   -1,   -1,  257,  342,   -1,   -1,  261,   -1,   -1,
   -1,  265,   -1,  267,   -1,   -1,  270,   -1,  272,   -1,
   -1,  275,   -1,  277,   -1,  279,   -1,  281,  366,  367,
  284,   -1,   -1,  287,  288,   -1,   -1,   -1,   -1,   -1,
   -1,  295,  296,  297,   -1,   -1,  300,  301,  302,   -1,
  304,   -1,   -1,  307,   -1,  309,  310,  311,  312,   -1,
   -1,   -1,  316,  317,  318,   -1,   -1,  321,  322,  323,
   -1,   -1,   -1,   -1,   -1,  413,  330,  331,   -1,  333,
  334,   -1,  336,  337,  338,   -1,   -1,  257,  342,   -1,
   -1,  261,   -1,   -1,   -1,  265,   -1,  267,   -1,   -1,
  270,   -1,  272,   -1,   -1,  275,   -1,  277,   -1,  279,
   -1,  281,  366,  367,  284,   -1,   -1,  287,  288,   -1,
   -1,   -1,   -1,   -1,   -1,  295,  296,  297,   -1,   -1,
  300,  301,  302,   -1,  304,   -1,   -1,  307,   -1,  309,
  310,  311,  312,   -1,   -1,   -1,  316,  317,  318,   -1,
   -1,  321,  322,  323,   -1,   -1,   -1,   -1,   -1,  413,
  330,  331,   -1,  333,  334,   -1,  336,  337,  338,  262,
   -1,  257,  342,   -1,   -1,  261,   -1,   -1,   -1,  265,
   -1,  267,   -1,   -1,  270,   -1,  272,   -1,   -1,  275,
   -1,  277,   -1,  279,   -1,  281,  366,   -1,  284,   -1,
   -1,  287,  288,   -1,   -1,  298,   -1,   -1,   -1,  295,
  296,  297,   -1,   -1,  300,  301,  302,   -1,  304,   -1,
   -1,  307,   -1,  309,  310,  311,  312,   -1,   -1,   -1,
  316,  317,  318,   -1,   -1,  321,  322,  323,   -1,   -1,
   -1,   -1,   -1,  413,  330,  331,   -1,  333,  334,   -1,
  336,  337,  338,   -1,   -1,   -1,  342,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  367,   -1,  369,  370,  371,  372,
  366,   -1,   -1,  376,  377,   -1,   -1,  380,  381,  382,
  383,  384,  385,  386,  387,  388,   -1,  390,  391,  392,
  393,  394,  395,  396,  397,  398,  399,  400,  401,  402,
  403,  404,  405,  406,  407,  408,  409,  410,  411,  261,
   -1,  263,  415,  265,   -1,  267,   -1,  413,  270,   -1,
  272,  273,   -1,  275,   -1,  277,   -1,  279,   -1,  281,
  282,  283,  284,   -1,   -1,  287,  288,   -1,   -1,   -1,
   -1,  293,  294,  295,  296,  297,   -1,   -1,  300,  301,
  302,   -1,  304,   -1,  306,  307,  308,  309,  310,  311,
  312,  313,   -1,  315,  316,  317,  318,   -1,   -1,  321,
  322,  323,   -1,  325,   -1,   -1,   -1,   -1,  330,  331,
   -1,  333,  334,   -1,  336,  337,  338,   -1,   -1,   -1,
  342,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  261,   -1,
  362,  363,  265,   -1,  267,   -1,   -1,  270,   -1,  272,
  273,   -1,  275,  375,  277,   -1,  279,   -1,  281,  282,
  283,  284,   -1,   -1,  287,  288,   -1,   -1,   -1,   -1,
  293,   -1,  295,  296,  297,   -1,   -1,  300,   -1,  302,
   -1,  304,   -1,   -1,  307,   -1,  309,  310,  311,  312,
   -1,  413,   -1,  316,  317,  318,   -1,   -1,  321,  322,
  323,   -1,   -1,   -1,   -1,   -1,   -1,  330,  331,   -1,
  333,  334,  261,  336,  337,  338,  265,   -1,  267,  342,
   -1,  270,   -1,  272,  273,   -1,  275,   -1,  277,   -1,
  279,   -1,  281,  282,  283,  284,   -1,   -1,  287,  288,
   -1,   -1,   -1,  366,  293,   -1,  295,  296,  297,   -1,
   -1,  300,  375,  302,   -1,  304,   -1,   -1,  307,   -1,
  309,  310,  311,  312,   -1,   -1,   -1,  316,  317,  318,
   -1,   -1,  321,  322,  323,   -1,   -1,   -1,   -1,   -1,
   -1,  330,  331,   -1,  333,  334,   -1,  336,  337,  338,
  413,   -1,   -1,  342,   -1,   -1,   -1,   -1,  261,   -1,
   -1,   -1,  265,   -1,  267,   -1,   -1,  270,   -1,  272,
  273,   -1,  275,   -1,  277,   -1,  279,  366,  281,  282,
  283,  284,   -1,   -1,  287,  288,  375,   -1,   -1,   -1,
  293,   -1,  295,  296,  297,   -1,   -1,  300,   -1,  302,
   -1,  304,   -1,   -1,  307,   -1,  309,  310,  311,  312,
   -1,   -1,   -1,  316,  317,  318,   -1,   -1,  321,  322,
  323,   -1,   -1,   -1,  413,   -1,   -1,  330,  331,   -1,
  333,  334,  261,  336,  337,  338,  265,   -1,  267,  342,
   -1,  270,   -1,  272,  273,   -1,  275,   -1,  277,   -1,
  279,   -1,  281,  282,  283,  284,   -1,   -1,  287,  288,
   -1,   -1,   -1,  366,  293,   -1,  295,  296,  297,   -1,
   -1,  300,  375,  302,   -1,  304,   -1,   -1,  307,   -1,
  309,  310,  311,  312,   -1,   -1,   -1,  316,  317,  318,
   -1,   -1,  321,  322,  323,   -1,   -1,   -1,   -1,   -1,
   -1,  330,  331,   -1,  333,  334,   -1,  336,  337,  338,
  413,   -1,   -1,  342,   -1,   -1,   -1,   -1,  261,   -1,
   -1,   -1,  265,   -1,  267,   -1,   -1,  270,   -1,  272,
  273,   -1,  275,   -1,  277,   -1,  279,  366,  281,  282,
  283,  284,   -1,   -1,  287,  288,  375,   -1,   -1,   -1,
  293,   -1,  295,  296,  297,   -1,   -1,  300,   -1,  302,
   -1,  304,   -1,   -1,  307,   -1,  309,  310,  311,  312,
   -1,   -1,   -1,  316,  317,  318,   -1,   -1,  321,  322,
  323,   -1,   -1,   -1,  413,   -1,   -1,  330,  331,   -1,
  333,  334,  261,  336,  337,  338,  265,   -1,  267,  342,
   -1,  270,   -1,  272,  273,   -1,  275,   -1,  277,   -1,
  279,   -1,  281,  282,  283,  284,   -1,   -1,  287,  288,
   -1,   -1,   -1,  366,  293,   -1,  295,  296,  297,   -1,
   -1,  300,   -1,  302,   -1,  304,   -1,   -1,  307,   -1,
  309,  310,  311,  312,   -1,   -1,   -1,  316,  317,  318,
   -1,   -1,  321,  322,  323,  261,   -1,   -1,   -1,   -1,
   -1,  330,  331,   -1,  333,  334,   -1,  336,  337,  338,
  413,   -1,   -1,  342,   -1,   -1,   -1,   -1,  284,   -1,
   -1,   -1,   -1,   -1,   -1,  261,   -1,   -1,   -1,   -1,
   -1,  297,   -1,   -1,   -1,   -1,  302,  366,   -1,  305,
   -1,  307,   -1,  309,  310,  311,  312,   -1,  284,   -1,
   -1,  317,   -1,   -1,   -1,  321,   -1,   -1,   -1,  325,
   -1,  297,   -1,  261,   -1,   -1,  302,  333,   -1,  305,
  336,  307,  338,  309,  310,  311,  312,   -1,   -1,   -1,
   -1,  317,   -1,   -1,  413,  321,  284,   -1,   -1,  325,
   -1,  357,   -1,   -1,   -1,   -1,   -1,  333,   -1,  297,
  336,  367,  338,  369,  302,  371,   -1,   -1,   -1,  307,
   -1,  309,  310,  311,  312,   -1,   -1,   -1,  384,  317,
   -1,   -1,   -1,  321,   -1,   -1,   -1,  325,   -1,   -1,
  264,  265,   -1,  267,   -1,  333,  270,  271,  336,   -1,
  338,  275,  276,  277,   -1,  279,   -1,  413,  265,   -1,
  267,  285,   -1,  270,  288,   -1,   -1,   -1,  275,   -1,
   -1,  295,  279,   -1,   -1,   -1,  300,   -1,  302,  303,
  304,  288,  306,   -1,   -1,   -1,   -1,  413,  295,  313,
   -1,   -1,  316,  300,  318,  319,   -1,  304,  322,   -1,
   -1,  325,   -1,  327,   -1,  329,  330,  331,  332,  316,
  334,  318,   -1,  337,   -1,  322,   -1,  341,   -1,   -1,
  344,  345,   -1,  330,  331,  413,   -1,  334,   -1,   -1,
  337,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  369,  370,   -1,  372,   -1,
   -1,  375,  376,  377,  378,   -1,   -1,   -1,  382,   -1,
  384,   -1,  264,  265,   -1,  267,  390,  391,  270,  271,
   -1,   -1,   -1,  275,  276,  277,   -1,  279,   -1,   -1,
   -1,   -1,   -1,  285,   -1,   -1,  288,   -1,  412,  413,
  414,  415,   -1,  295,   -1,   -1,   -1,   -1,  300,   -1,
  302,  303,  304,   -1,  306,   -1,  413,   -1,   -1,   -1,
   -1,  313,   -1,   -1,  316,   -1,  318,  319,   -1,   -1,
  322,   -1,   -1,  325,   -1,  327,   -1,  329,  330,  331,
  332,   -1,  334,   -1,   -1,  337,   -1,   -1,   -1,  341,
   -1,   -1,  344,  345,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  369,   -1,   -1,
  372,   -1,   -1,  375,  376,  377,  378,   -1,   -1,   -1,
  382,   -1,  384,   -1,  264,  265,   -1,  267,  390,  391,
  270,  271,   -1,   -1,   -1,  275,  276,  277,   -1,  279,
   -1,   -1,   -1,   -1,   -1,  285,   -1,   -1,  288,   -1,
  412,  413,  414,  415,   -1,  295,   -1,   -1,   -1,   -1,
  300,   -1,  302,  303,  304,   -1,  306,   -1,   -1,   -1,
   -1,   -1,   -1,  313,   -1,   -1,  316,   -1,  318,  319,
   -1,   -1,  322,   -1,   -1,  325,   -1,  327,   -1,  329,
  330,  331,  332,   -1,  334,   -1,   -1,  337,   -1,   -1,
   -1,  341,   -1,   -1,  344,  345,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  369,
   -1,   -1,   -1,   -1,   -1,  375,  376,  377,  378,   -1,
   -1,   -1,  382,   -1,  384,   -1,  264,  265,   -1,  267,
  390,  391,  270,  271,   -1,   -1,   -1,  275,  276,  277,
   -1,  279,   -1,   -1,   -1,   -1,   -1,  285,   -1,   -1,
  288,   -1,  412,  413,  414,  415,   -1,  295,   -1,   -1,
   -1,   -1,  300,   -1,  302,  303,  304,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  316,   -1,
  318,  319,  320,   -1,  322,   -1,   -1,  325,   -1,  327,
   -1,  329,  330,  331,  332,   -1,  334,   -1,   -1,  337,
   -1,   -1,   -1,  341,   -1,   -1,  344,  345,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  365,   -1,   -1,
   -1,  369,   -1,   -1,   -1,   -1,   -1,  375,  376,  377,
  378,   -1,   -1,   -1,  382,   -1,  384,   -1,  264,  265,
   -1,  267,  390,  391,  270,  271,   -1,   -1,   -1,  275,
  276,  277,   -1,  279,   -1,   -1,   -1,   -1,   -1,  285,
   -1,   -1,  288,   -1,  412,  413,  414,  415,   -1,  295,
   -1,   -1,   -1,   -1,  300,   -1,  302,  303,  304,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  316,   -1,  318,  319,   -1,   -1,  322,   -1,   -1,  325,
   -1,  327,   -1,  329,  330,  331,  332,   -1,  334,   -1,
   -1,  337,   -1,   -1,   -1,   -1,   -1,   -1,  344,  345,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  369,   -1,   -1,   -1,   -1,  374,  375,
  376,  377,  378,   -1,   -1,   -1,  382,   -1,  384,   -1,
  264,  265,   -1,  267,  390,  391,  270,  271,   -1,   -1,
   -1,  275,  276,  277,   -1,  279,   -1,   -1,   -1,   -1,
   -1,  285,   -1,   -1,  288,   -1,  412,  413,  414,  415,
   -1,  295,   -1,   -1,   -1,   -1,  300,   -1,  302,  303,
  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  316,   -1,  318,  319,   -1,   -1,  322,   -1,
   -1,  325,   -1,  327,   -1,  329,  330,  331,  332,   -1,
  334,   -1,   -1,  337,   -1,   -1,   -1,   -1,   -1,   -1,
  344,  345,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  366,   -1,   -1,  369,   -1,   -1,   -1,   -1,
   -1,  375,  376,  377,  378,   -1,   -1,   -1,  382,   -1,
  384,   -1,  264,  265,   -1,  267,  390,  391,  270,  271,
   -1,   -1,   -1,  275,  276,  277,   -1,  279,   -1,   -1,
   -1,   -1,   -1,  285,   -1,   -1,  288,   -1,  412,  413,
  414,  415,   -1,  295,   -1,   -1,   -1,   -1,  300,   -1,
  302,  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  316,   -1,  318,  319,   -1,   -1,
  322,   -1,   -1,  325,   -1,  327,   -1,  329,  330,  331,
  332,   -1,  334,   -1,   -1,  337,   -1,   -1,   -1,   -1,
   -1,   -1,  344,  345,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  365,   -1,   -1,   -1,  369,   -1,   -1,
   -1,   -1,   -1,  375,  376,  377,  378,   -1,   -1,   -1,
  382,   -1,  384,   -1,  264,  265,   -1,  267,  390,  391,
  270,  271,   -1,   -1,   -1,  275,  276,  277,   -1,  279,
   -1,   -1,   -1,   -1,   -1,  285,   -1,   -1,  288,   -1,
  412,  413,  414,  415,   -1,  295,   -1,   -1,   -1,   -1,
  300,   -1,  302,  303,  304,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  316,   -1,  318,  319,
   -1,   -1,  322,   -1,   -1,  325,   -1,  327,   -1,  329,
  330,  331,  332,   -1,  334,   -1,   -1,  337,   -1,   -1,
   -1,   -1,   -1,   -1,  344,  345,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  365,   -1,   -1,   -1,  369,
   -1,   -1,   -1,   -1,   -1,  375,  376,  377,  378,   -1,
   -1,   -1,  382,   -1,  384,   -1,  264,  265,   -1,  267,
  390,  391,  270,  271,   -1,   -1,   -1,  275,  276,  277,
   -1,  279,   -1,   -1,   -1,   -1,   -1,  285,   -1,   -1,
  288,   -1,  412,  413,  414,  415,   -1,  295,   -1,   -1,
   -1,   -1,  300,   -1,  302,  303,  304,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  316,   -1,
  318,  319,   -1,   -1,  322,   -1,   -1,  325,   -1,  327,
   -1,  329,  330,  331,  332,   -1,  334,   -1,   -1,  337,
   -1,   -1,   -1,   -1,   -1,   -1,  344,  345,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  368,  369,   -1,   -1,   -1,   -1,   -1,  375,  376,  377,
  378,   -1,   -1,   -1,  382,   -1,  384,   -1,  264,  265,
   -1,  267,  390,  391,  270,  271,   -1,   -1,   -1,  275,
  276,  277,   -1,  279,   -1,   -1,   -1,   -1,   -1,  285,
   -1,   -1,  288,   -1,  412,  413,  414,  415,   -1,  295,
   -1,   -1,   -1,   -1,  300,   -1,  302,  303,  304,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  316,   -1,  318,  319,   -1,   -1,  322,   -1,   -1,  325,
   -1,  327,   -1,  329,  330,  331,  332,   -1,  334,   -1,
   -1,  337,   -1,   -1,   -1,   -1,   -1,   -1,  344,  345,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  369,   -1,   -1,   -1,   -1,   -1,  375,
  376,  377,  378,   -1,   -1,   -1,  382,   -1,  384,   -1,
  264,  265,   -1,  267,  390,  391,  270,  271,   -1,   -1,
   -1,  275,  276,  277,   -1,  279,   -1,   -1,   -1,   -1,
   -1,  285,   -1,   -1,  288,   -1,  412,  413,  414,  415,
   -1,  295,   -1,   -1,   -1,   -1,  300,   -1,  302,  303,
  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  316,   -1,  318,  319,   -1,   -1,  322,   -1,
   -1,  325,   -1,  327,   -1,  329,  330,  331,  332,   -1,
  334,   -1,   -1,  337,   -1,   -1,   -1,   -1,   -1,   -1,
  344,  345,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  369,   -1,   -1,   -1,   -1,
   -1,  375,  376,  377,  378,   -1,   -1,   -1,  382,   -1,
  384,   -1,  264,  265,   -1,  267,  390,  391,  270,  271,
   -1,   -1,   -1,  275,  276,  277,   -1,  279,   -1,   -1,
   -1,   -1,   -1,  285,   -1,   -1,  288,   -1,  412,  413,
  414,  415,   -1,  295,   -1,   -1,   -1,   -1,  300,   -1,
  302,  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  316,   -1,  318,  319,   -1,   -1,
  322,   -1,   -1,  325,   -1,  327,   -1,  329,  330,  331,
  332,   -1,  334,   -1,   -1,  337,   -1,   -1,   -1,   -1,
   -1,   -1,  344,  345,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  369,   -1,   -1,
   -1,   -1,   -1,  375,  376,  377,  378,   -1,   -1,   -1,
  382,   -1,  384,   -1,  264,  265,   -1,  267,  390,  391,
  270,  271,   -1,   -1,   -1,  275,  276,  277,   -1,  279,
   -1,   -1,   -1,   -1,   -1,  285,   -1,   -1,  288,   -1,
  412,  413,  414,  415,   -1,  295,   -1,   -1,   -1,   -1,
  300,   -1,  302,  303,  304,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  316,   -1,  318,  319,
   -1,   -1,  322,   -1,   -1,  325,   -1,  327,   -1,  329,
  330,  331,  332,   -1,  334,   -1,   -1,  337,   -1,   -1,
   -1,   -1,   -1,   -1,  344,  345,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  369,
   -1,   -1,   -1,   -1,   -1,  375,  376,  377,  378,   -1,
   -1,   -1,  382,   -1,  384,   -1,  264,  265,   -1,  267,
  390,  391,  270,  271,   -1,   -1,   -1,  275,  276,  277,
   -1,  279,   -1,   -1,   -1,   -1,   -1,  285,   -1,   -1,
  288,   -1,  412,  413,  414,  415,   -1,  295,   -1,   -1,
   -1,   -1,  300,   -1,  302,  303,  304,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  316,   -1,
  318,  319,   -1,   -1,  322,   -1,   -1,  325,   -1,  327,
   -1,  329,  330,  331,  332,   -1,  334,   -1,   -1,  337,
   -1,   -1,   -1,   -1,   -1,   -1,  344,  345,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  369,   -1,   -1,   -1,   -1,   -1,  375,  376,  377,
  378,   -1,   -1,   -1,  382,   -1,  384,   -1,  264,  265,
   -1,  267,  390,  391,  270,  271,   -1,   -1,   -1,  275,
  276,  277,   -1,  279,   -1,   -1,   -1,   -1,   -1,  285,
   -1,   -1,  288,   -1,  412,  413,  414,  415,   -1,  295,
   -1,   -1,   -1,   -1,  300,   -1,  302,  303,  304,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  316,   -1,  318,  319,   -1,   -1,  322,   -1,   -1,  325,
   -1,  327,   -1,  329,  330,  331,  332,   -1,  334,   -1,
   -1,  337,   -1,   -1,   -1,   -1,   -1,   -1,  344,  345,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  369,   -1,   -1,   -1,   -1,   -1,  375,
  376,  377,  378,   -1,   -1,   -1,  382,   -1,  384,   -1,
  264,  265,   -1,  267,  390,  391,  270,  271,   -1,   -1,
   -1,  275,  276,  277,   -1,  279,   -1,   -1,   -1,   -1,
   -1,  285,   -1,   -1,  288,   -1,  412,  413,  414,  415,
   -1,  295,   -1,   -1,   -1,   -1,  300,   -1,  302,  303,
  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  316,   -1,  318,  319,   -1,   -1,  322,   -1,
   -1,  325,   -1,  327,   -1,  329,  330,  331,  332,   -1,
  334,   -1,   -1,  337,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  369,   -1,   -1,   -1,   -1,
   -1,  375,  376,  377,  378,   -1,   -1,   -1,  382,   -1,
  384,   -1,  264,  265,   -1,  267,  390,  391,  270,  271,
   -1,   -1,   -1,  275,  276,  277,   -1,  279,   -1,   -1,
   -1,   -1,   -1,  285,   -1,   -1,  288,   -1,  412,  413,
   -1,  415,   -1,  295,   -1,   -1,   -1,   -1,  300,   -1,
  302,  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  316,   -1,  318,  319,   -1,   -1,
  322,   -1,   -1,  325,   -1,  327,   -1,  329,  330,  331,
  332,  265,  334,  267,   -1,  337,  270,   -1,  272,  273,
   -1,  275,   -1,  277,   -1,  279,   -1,  281,  282,  283,
   -1,   -1,   -1,  287,  288,   -1,   -1,   -1,   -1,  293,
   -1,  295,  296,   -1,   -1,   -1,  300,  369,   -1,   -1,
  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  316,   -1,  318,   -1,   -1,   -1,  322,  323,
   -1,   -1,   -1,   -1,   -1,   -1,  330,  331,   -1,   -1,
  334,   -1,   -1,  337,   -1,   -1,   -1,   -1,  342,   -1,
  412,  413,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  362,  363,
  265,   -1,  267,   -1,   -1,  270,   -1,  272,  273,   -1,
  275,  375,  277,   -1,  279,   -1,  281,  282,  283,   -1,
   -1,   -1,  287,  288,   -1,   -1,   -1,   -1,  293,   -1,
  295,  296,   -1,   -1,   -1,  300,   -1,   -1,   -1,  304,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  413,
   -1,  316,   -1,  318,   -1,   -1,   -1,  322,  323,   -1,
   -1,   -1,   -1,   -1,   -1,  330,  331,   -1,  265,  334,
  267,   -1,  337,  270,   -1,  272,  273,  342,  275,   -1,
  277,   -1,  279,   -1,  281,  282,  283,   -1,   -1,   -1,
  287,  288,   -1,   -1,   -1,   -1,  293,   -1,  295,  296,
   -1,   -1,   -1,  300,   -1,   -1,   -1,  304,   -1,   -1,
  375,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  316,
   -1,  318,   -1,   -1,   -1,  322,  323,   -1,   -1,   -1,
   -1,   -1,   -1,  330,  331,   -1,   -1,  334,   -1,   -1,
  337,  265,   -1,  267,   -1,  342,  270,   -1,  413,  273,
   -1,  275,   -1,  277,   -1,  279,   -1,  281,  282,  283,
   -1,   -1,   -1,  287,  288,   -1,   -1,   -1,   -1,  293,
   -1,  295,   -1,  265,   -1,  267,  300,   -1,  270,   -1,
  304,  273,   -1,  275,   -1,  277,   -1,  279,   -1,  281,
  282,  283,  316,   -1,  318,  287,  288,   -1,  322,   -1,
   -1,  293,   -1,  295,   -1,   -1,  330,  331,  300,   -1,
  334,   -1,  304,  337,   -1,   -1,  413,   -1,  342,   -1,
   -1,   -1,   -1,   -1,  316,   -1,  318,   -1,   -1,   -1,
  322,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  330,  331,
   -1,   -1,  334,   -1,   -1,  337,   -1,  265,   -1,  267,
  342,  375,  270,   -1,  272,   -1,   -1,  275,   -1,  277,
   -1,  279,   -1,  281,   -1,   -1,   -1,   -1,   -1,  287,
  288,   -1,   -1,   -1,   -1,   -1,   -1,  295,  296,   -1,
   -1,   -1,  300,   -1,   -1,   -1,  304,   -1,   -1,  413,
   -1,   -1,  265,   -1,  267,   -1,   -1,  270,  316,   -1,
  318,   -1,  275,   -1,  322,  323,  279,   -1,   -1,   -1,
   -1,   -1,  330,  331,   -1,  288,  334,   -1,   -1,  337,
   -1,  413,  295,   -1,  342,   -1,   -1,  300,   -1,   -1,
   -1,  304,   -1,  306,   -1,  308,  265,   -1,  267,   -1,
  313,  270,   -1,  316,   -1,  318,  275,   -1,   -1,  322,
  279,   -1,  325,   -1,   -1,   -1,   -1,  330,  331,  288,
   -1,  334,   -1,   -1,  337,   -1,  295,   -1,   -1,   -1,
   -1,  300,   -1,   -1,   -1,  304,  265,  306,  267,  308,
   -1,  270,   -1,   -1,  313,   -1,  275,  316,  277,  318,
  279,   -1,  281,  322,   -1,  413,  325,  370,  287,  288,
   -1,  330,  331,   -1,   -1,  334,  295,   -1,  337,   -1,
   -1,  300,   -1,   -1,   -1,  304,   -1,   -1,   -1,   -1,
  265,   -1,  267,   -1,   -1,  270,   -1,  316,   -1,  318,
  275,   -1,   -1,  322,  279,   -1,   -1,   -1,   -1,  368,
  413,  330,  331,  288,   -1,  334,   -1,   -1,  337,   -1,
  295,   -1,   -1,  342,   -1,  300,   -1,   -1,   -1,  304,
  265,  306,  267,  308,   -1,  270,   -1,   -1,  313,   -1,
  275,  316,   -1,  318,  279,   -1,   -1,  322,   -1,   -1,
  325,   -1,   -1,  288,  413,  330,  331,   -1,   -1,  334,
  295,   -1,  337,   -1,   -1,  300,   -1,   -1,   -1,  304,
  265,  306,  267,   -1,   -1,  270,   -1,  272,  313,   -1,
  275,  316,   -1,  318,  279,   -1,   -1,  322,   -1,   -1,
  325,   -1,   -1,  288,  413,  330,  331,   -1,   -1,  334,
  295,   -1,  337,   -1,   -1,  300,   -1,  302,   -1,  304,
  265,   -1,  267,   -1,   -1,  270,   -1,   -1,   -1,   -1,
  275,  316,   -1,  318,  279,   -1,   -1,  322,  323,   -1,
   -1,   -1,   -1,  288,   -1,  330,  331,   -1,  413,  334,
  295,   -1,  337,   -1,   -1,  300,   -1,   -1,   -1,  304,
   -1,   -1,   -1,   -1,  265,   -1,  267,   -1,   -1,  270,
   -1,  316,   -1,  318,  275,   -1,   -1,  322,  279,   -1,
   -1,   -1,   -1,   -1,   -1,  330,  331,  288,  413,  334,
   -1,   -1,  337,   -1,  295,   -1,   -1,   -1,   -1,  300,
   -1,   -1,   -1,  304,  265,   -1,  267,   -1,   -1,  270,
   -1,   -1,   -1,   -1,  275,  316,   -1,  318,  279,   -1,
   -1,  322,   -1,   -1,   -1,  370,   -1,  288,  413,  330,
  331,   -1,   -1,  334,  295,   -1,  337,   -1,   -1,  300,
   -1,   -1,  265,  304,  267,   -1,   -1,  270,   -1,   -1,
   -1,   -1,  275,   -1,   -1,  316,  279,  318,   -1,   -1,
   -1,  322,   -1,   -1,   -1,  288,   -1,   -1,  413,  330,
  331,   -1,  295,  334,   -1,   -1,  337,  300,   -1,   -1,
   -1,  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  265,  316,  267,  318,   -1,  270,   -1,  322,
   -1,   -1,  275,   -1,   -1,   -1,  279,  330,  331,   -1,
   -1,  334,  413,   -1,  337,  288,  265,   -1,  267,   -1,
   -1,  270,  295,   -1,   -1,   -1,  275,  300,   -1,   -1,
  279,  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  288,
   -1,   -1,   -1,  316,   -1,  318,  295,   -1,   -1,  322,
   -1,  300,  413,   -1,   -1,  304,   -1,  330,  331,   -1,
   -1,  334,   -1,   -1,  337,   -1,  265,  316,  267,  318,
   -1,  270,   -1,  322,   -1,   -1,  275,   -1,   -1,   -1,
  279,  330,  331,   -1,   -1,  334,   -1,   -1,  337,  288,
  413,   -1,   -1,   -1,   -1,   -1,  295,   -1,   -1,   -1,
   -1,  300,   -1,   -1,  265,  304,  267,   -1,   -1,  270,
   -1,   -1,   -1,   -1,  275,   -1,   -1,  316,  279,  318,
   -1,   -1,   -1,  322,   -1,   -1,   -1,  288,   -1,   -1,
   -1,  330,  331,   -1,  295,  334,   -1,   -1,  337,  300,
  413,   -1,   -1,  304,  265,   -1,  267,   -1,   -1,  270,
   -1,   -1,   -1,   -1,  275,  316,   -1,  318,  279,   -1,
   -1,  322,   -1,   -1,  413,   -1,   -1,  288,   -1,  330,
  331,   -1,   -1,  334,  295,   -1,  337,   -1,   -1,  300,
   -1,   -1,  265,  304,  267,   -1,   -1,  270,   -1,   -1,
   -1,   -1,  275,   -1,   -1,  316,  279,  318,   -1,   -1,
   -1,  322,   -1,   -1,   -1,  288,   -1,   -1,   -1,  330,
  331,   -1,  295,  334,  413,   -1,  337,  300,   -1,   -1,
   -1,  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  265,  316,  267,  318,   -1,  270,   -1,  322,
   -1,   -1,  275,   -1,   -1,   -1,  279,  330,  331,   -1,
   -1,  334,  413,   -1,  337,  288,  265,   -1,  267,   -1,
   -1,  270,  295,   -1,   -1,   -1,  275,  300,   -1,   -1,
  279,  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  288,
   -1,   -1,   -1,  316,   -1,  318,  295,   -1,  261,  322,
  263,  300,  413,   -1,   -1,  304,   -1,  330,  331,   -1,
   -1,  334,   -1,   -1,  337,   -1,   -1,  316,   -1,  318,
   -1,  284,   -1,  322,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  330,  331,  261,  297,  334,   -1,   -1,  337,  302,
  413,   -1,   -1,   -1,  307,   -1,  309,  310,  311,  312,
   -1,   -1,  315,   -1,  317,   -1,  284,   -1,  321,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  297,
  333,  261,   -1,  336,  302,  338,   -1,   -1,   -1,  307,
   -1,  309,  310,  311,  312,   -1,   -1,   -1,   -1,  317,
  413,   -1,   -1,  321,  284,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  366,   -1,  333,  261,  297,  336,   -1,
  338,   -1,  302,   -1,  413,   -1,   -1,  307,   -1,  309,
  310,  311,  312,   -1,   -1,   -1,   -1,  317,   -1,  284,
   -1,  321,   -1,   -1,  362,  363,   -1,   -1,  366,   -1,
   -1,   -1,  297,  333,   -1,   -1,  336,  302,  338,   -1,
   -1,   -1,  307,   -1,  309,  310,  311,  312,   -1,  261,
  315,  263,  317,   -1,   -1,   -1,  321,   -1,   -1,   -1,
   -1,   -1,  362,  363,   -1,   -1,  366,   -1,  333,   -1,
   -1,  336,  284,  338,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  261,   -1,   -1,   -1,  297,   -1,   -1,   -1,   -1,
  302,   -1,   -1,   -1,   -1,  307,   -1,  309,  310,  311,
  312,  366,   -1,   -1,  284,  317,   -1,   -1,   -1,  321,
   -1,   -1,   -1,   -1,   -1,   -1,  261,  297,  263,   -1,
   -1,  333,  302,   -1,  336,   -1,  338,  307,   -1,  309,
  310,  311,  312,   -1,   -1,   -1,   -1,  317,   -1,  284,
   -1,  321,   -1,   -1,   -1,   -1,   -1,   -1,  261,   -1,
  263,   -1,  297,  333,  366,   -1,  336,  302,  338,   -1,
   -1,   -1,  307,   -1,  309,  310,  311,  312,   -1,   -1,
  315,  284,  317,   -1,   -1,   -1,  321,   -1,  261,   -1,
   -1,   -1,  362,  363,  297,   -1,   -1,   -1,  333,  302,
   -1,  336,   -1,  338,  307,   -1,  309,  310,  311,  312,
   -1,  284,  315,   -1,  317,   -1,   -1,   -1,  321,   -1,
  261,   -1,   -1,   -1,  297,   -1,   -1,   -1,  301,  302,
  333,   -1,   -1,  336,  307,  338,  309,  310,  311,  312,
   -1,   -1,   -1,  284,  317,   -1,   -1,   -1,  321,   -1,
  261,   -1,  263,   -1,   -1,   -1,  297,   -1,   -1,   -1,
  333,  302,   -1,  336,   -1,  338,  307,   -1,  309,  310,
  311,  312,   -1,  284,  315,   -1,  317,   -1,   -1,   -1,
  321,   -1,  261,   -1,   -1,   -1,  297,   -1,   -1,   -1,
   -1,  302,  333,   -1,   -1,  336,  307,  338,  309,  310,
  311,  312,   -1,   -1,   -1,  284,  317,   -1,   -1,   -1,
  321,   -1,  261,   -1,  263,   -1,   -1,   -1,  297,   -1,
   -1,   -1,  333,  302,   -1,  336,   -1,  338,  307,   -1,
  309,  310,  311,  312,   -1,  284,  315,   -1,  317,   -1,
   -1,   -1,  321,   -1,  261,   -1,   -1,   -1,  297,   -1,
   -1,   -1,   -1,  302,  333,   -1,   -1,  336,  307,  338,
  309,  310,  311,  312,   -1,   -1,   -1,  284,  317,   -1,
   -1,   -1,  321,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  297,   -1,   -1,   -1,  333,  302,   -1,  336,   -1,  338,
  307,   -1,  309,  310,  311,  312,   -1,   -1,   -1,   -1,
  317,   -1,   -1,   -1,  321,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  333,   -1,   -1,  336,
   -1,  338,
  };

#line 5920 "cs-parser.jay"

// <summary>
//   A class used to pass around variable declarations and constants
// </summary>
class VariableDeclaration {
	public string identifier;
	Expression initializer;
	public Location Location;
	public Attributes OptAttributes;
	public string DocComment;

	public VariableDeclaration (Tokenizer.LocatedToken lt, Expression initializer, Attributes opt_attrs)
	{
		this.identifier = lt.Value;
		this.initializer = initializer;
		this.Location = lt.Location;
		this.OptAttributes = opt_attrs;
	}

	public VariableDeclaration (Tokenizer.LocatedToken lt, Expression initializer)
		: this (lt, initializer, null)
	{
	}

	public Expression GetInitializer (FullNamedExpression type)
	{
		if (initializer is ArrayInitializer)
			return new ArrayCreation (type, "", (ArrayInitializer)initializer, Location);

		return initializer;
	}

	public bool HasInitializer {
		get { return initializer != null; }
	}
}

class VariableMemberDeclaration
{
	public readonly MemberName MemberName;
	Expression initializer;
	
	public VariableMemberDeclaration (MemberName mn, Expression initializer)
	{
		MemberName = mn;
		this.initializer = initializer;
	}

	public Expression GetInitializer (FullNamedExpression type)
	{
		if (initializer is ArrayInitializer)
			return new ArrayCreation (type, "", (ArrayInitializer)initializer, MemberName.Location);

		return initializer;
	}
}


// <summary>
//  A class used to hold info about an operator declarator
// </summary>
struct OperatorDeclaration {
	public readonly Operator.OpType optype;
	public readonly FullNamedExpression ret_type;
	public readonly Location location;

	public OperatorDeclaration (Operator.OpType op, FullNamedExpression ret_type, Location location)
	{
		optype = op;
		this.ret_type = ret_type;
		this.location = location;
	}
}

void Error_ExpectingTypeName (Expression expr)
{
	if (expr is Invocation){
		Report.Error (1002, expr.Location, "Expecting `;'");
	} else {
		Expression.Error_InvalidExpressionStatement (Report, expr.Location);
	}
}

void Error_ParameterModifierNotValid (string modifier, Location loc)
{
	Report.Error (631, loc, "The parameter modifier `{0}' is not valid in this context",
			              modifier);
}

void Error_DuplicateParameterModifier (Location loc, Parameter.Modifier mod)
{
	Report.Error (1107, loc, "Duplicate parameter modifier `{0}'",
  		Parameter.GetModifierSignature (mod));
}

void Error_TypeExpected (Location loc)
{
	Report.Error (1031, loc, "Type expected");
}

void Error_NamedArgumentExpected (NamedArgument a)
{
	Report.Error (1738, a.Location, "Named arguments must appear after the positional arguments");
}

void push_current_class (TypeContainer tc, object partial_token)
{
	if (RootContext.EvalMode){
		tc.ModFlags = (tc.ModFlags & ~(Modifiers.PRIVATE|Modifiers.INTERNAL)) | Modifiers.PUBLIC;
		undo.AddTypeContainer (current_container, tc);
	}

	if (partial_token != null)
		current_container = current_container.AddPartial (tc);
	else
		current_container = current_container.AddTypeContainer (tc);

	++lexer.parsing_declaration;
	current_class = tc;
}

DeclSpace pop_current_class ()
{
	DeclSpace retval = current_class;

	current_class = current_class.Parent;
	current_container = current_class.PartialContainer;

	return retval;
}

// <summary>
//   Given the @class_name name, it creates a fully qualified name
//   based on the containing declaration space
// </summary>
MemberName
MakeName (MemberName class_name)
{
	Namespace ns = current_namespace.NS;

	if (current_container == RootContext.ToplevelTypes) {
		if (ns.Name.Length != 0)
			return new MemberName (ns.MemberName, class_name);
		else
			return class_name;
	} else {
		return new MemberName (current_container.MemberName, class_name);
	}
}

Block declare_local_variables (FullNamedExpression type, List<object> variable_declarators, Location loc)
{
	Block implicit_block;

	//
	// If we are doing interactive editing, we want variable declarations
	// that are in the top block to be added instead to the class as 
	// static variables
	//
	if (RootContext.StatementMode){
		bool hoist = true;

		for (Block b = current_block; b != null; b = b.Parent){
			if (b is ExplicitBlock && !(b is ToplevelBlock)){
				// There has been an explicit block, we cant add to the class
				hoist = false;
				break;
			}
		}		
		if (hoist){
			//
			// We can use "current_block" since we know there are no explicit blocks
			//
			foreach (VariableDeclaration decl in variable_declarators){
				// We can not use the super-handy f.Initializer, because
				// multiple lines would force code to be executed out of sync
				var init = decl.GetInitializer (type);
				if (init != null){
				        string id = "$" + decl.identifier;
					LocalInfo vi = current_block.AddVariable (type, id, decl.Location);					

					// Avoid warning about this variable not being used.
					vi.Used = true;

					LocalVariableReference var;
					var = new LocalVariableReferenceWithClassSideEffect (current_container, decl.identifier, current_block, id, vi, decl.Location);
					Assign assign = new SimpleAssign (var, init, decl.Location);
					current_block.AddStatement (new StatementExpression (assign));
					assign = new SimpleAssign (new SimpleName (decl.identifier, decl.Location), var);
					current_block.AddStatement (new StatementExpression (assign));
				} else {
					Field f = new Field (current_container, (FullNamedExpression) type, Modifiers.PUBLIC | Modifiers.STATIC,
						new MemberName (decl.identifier, loc), null);
					current_container.AddField (f);

					// Register the field to be visible later as a global variable
					Evaluator.QueueField (f);
				}
			}

			return current_block;
		}
	}

	//
	// We use the `Used' property to check whether statements
	// have been added to the current block.  If so, we need
	// to create another block to contain the new declaration
	// otherwise, as an optimization, we use the same block to
	// add the declaration.
	//
	// FIXME: A further optimization is to check if the statements
	// that were added were added as part of the initialization
	// below.  In which case, no other statements have been executed
	// and we might be able to reduce the number of blocks for
	// situations like this:
	//
	// int j = 1;  int k = j + 1;
	//
	if (current_block.Used)
		implicit_block = new Block (current_block, loc, lexer.Location);
	else
		implicit_block = current_block;

	foreach (VariableDeclaration decl in variable_declarators){

		if (implicit_block.AddVariable (type, decl.identifier, decl.Location) != null) {
			if (decl.HasInitializer){
				Assign assign;
				
				var lvr = new LocalVariableReference (implicit_block, decl.identifier, loc);

				assign = new SimpleAssign (lvr, decl.GetInitializer (type), decl.Location);

				implicit_block.AddStatement (new StatementExpression (assign));
			}
		}
	}
	
	return implicit_block;
}

Block declare_local_constants (FullNamedExpression type, List<object> declarators)
{
	Block implicit_block;

	if (current_block.Used)
		implicit_block = new Block (current_block);
	else
		implicit_block = current_block;

	foreach (VariableDeclaration decl in declarators){
		implicit_block.AddConstant (type, decl.identifier, decl.GetInitializer (type), decl.Location);
	}
	
	return implicit_block;
}

string CheckAttributeTarget (string a, Location l)
{
	switch (a) {
	case "assembly" : case "module" : case "field" : case "method" : case "param" : case "property" : case "type" :
			return a;
	}

	Report.Warning (658, 1, l,
		 "`{0}' is invalid attribute target. All attributes in this attribute section will be ignored", a);
	return string.Empty;
}

static bool IsUnaryOperator (Operator.OpType op)
{
	switch (op) {
		
	case Operator.OpType.LogicalNot: 
	case Operator.OpType.OnesComplement: 
	case Operator.OpType.Increment:
	case Operator.OpType.Decrement:
	case Operator.OpType.True: 
	case Operator.OpType.False: 
	case Operator.OpType.UnaryPlus: 
	case Operator.OpType.UnaryNegation:
		return true;
	}
	return false;
}

void syntax_error (Location l, string msg)
{
	Report.Error (1003, l, "Syntax error, " + msg);
}

Tokenizer lexer;

public Tokenizer Lexer {
	get {
		return lexer;
	}
}		   

static CSharpParser ()
{
	oob_stack = new Stack<object> ();
}

public CSharpParser (SeekableStreamReader reader, CompilationUnit file, CompilerContext ctx)
{
	if (RootContext.EvalMode)
		undo = new Undo ();

	this.file = file;
	this.compiler = ctx;
	current_namespace = new NamespaceEntry (null, file, null);
	current_class = current_namespace.SlaveDeclSpace;
	current_container = current_class.PartialContainer; // == RootContest.ToplevelTypes
	oob_stack.Clear ();
	lexer = new Tokenizer (reader, file, ctx);
	
	use_global_stacks = true;
}

public void parse ()
{
	eof_token = Token.EOF;
	Tokenizer.LocatedToken.Initialize ();
	
	try {
		if (yacc_verbose_flag > 1)
			yyparse (lexer, new yydebug.yyDebugSimple ());
		else
			yyparse (lexer);
			
		Tokenizer tokenizer = lexer as Tokenizer;
		tokenizer.cleanup ();		
	} catch (Exception e){
	  	if (e is yyParser.yyUnexpectedEof)
			UnexpectedEOF = true;

		if (e is yyParser.yyException)
			Report.Error (-25, lexer.Location, "Parsing error");
		else if (yacc_verbose_flag > 0)
			throw;	// Used by compiler-tester to test internal errors
		else 
			Report.Error (589, lexer.Location, "Internal compiler error during parsing");
	}

	if (RootContext.ToplevelTypes.NamespaceEntry != null)
		throw new InternalErrorException ("who set it?");
}

void CheckToken (int error, int yyToken, string msg, Location loc)
{
	if (yyToken >= Token.FIRST_KEYWORD && yyToken <= Token.LAST_KEYWORD)
		Report.Error (error, loc, "{0}: `{1}' is a keyword", msg, GetTokenName (yyToken));
	else
		Report.Error (error, loc, msg);
}

void CheckIdentifierToken (int yyToken, Location loc)
{
	CheckToken (1041, yyToken, "Identifier expected", loc);
}

string ConsumeStoredComment ()
{
	string s = tmpComment;
	tmpComment = null;
	Lexer.doc_state = XmlCommentState.Allowed;
	return s;
}

Location GetLocation (object obj)
{
	if (obj is Tokenizer.LocatedToken)
		return ((Tokenizer.LocatedToken) obj).Location;
	if (obj is MemberName)
		return ((MemberName) obj).Location;

//	if (obj is Expression)
//		return ((Expression) obj).Location;		

	return lexer.Location;
}

Report Report {
	get { return compiler.Report; }
}

void start_block (Location loc)
{
	if (current_block == null || parsing_anonymous_method) {
		current_block = new ToplevelBlock (compiler, current_block, current_local_parameters, current_generic_method, loc);
		parsing_anonymous_method = false;
	} else {
		current_block = new ExplicitBlock (current_block, loc, Location.Null);
	}
}

Block
end_block (Location loc)
{
	Block retval = current_block.Explicit;
	retval.SetEndLocation (loc);
	current_block = retval.Parent;
	return retval;
}

void
start_anonymous (bool lambda, ParametersCompiled parameters, Location loc)
{
	if (RootContext.Version == LanguageVersion.ISO_1){
		Report.FeatureIsNotAvailable (loc, "anonymous methods");
	}

	oob_stack.Push (current_anonymous_method);
	oob_stack.Push (current_local_parameters);

	current_local_parameters = parameters;

	current_anonymous_method = lambda 
		? new LambdaExpression (loc) 
		: new AnonymousMethodExpression (loc);

	// Force the next block to be created as a ToplevelBlock
	parsing_anonymous_method = true;
}

/*
 * Completes the anonymous method processing, if lambda_expr is null, this
 * means that we have a Statement instead of an Expression embedded 
 */
AnonymousMethodExpression end_anonymous (ToplevelBlock anon_block)
{
	AnonymousMethodExpression retval;

	current_anonymous_method.Block = anon_block;
	retval = current_anonymous_method;

	current_local_parameters = (ParametersCompiled) oob_stack.Pop ();
	current_anonymous_method = (AnonymousMethodExpression) oob_stack.Pop ();

	return retval;
}

public NamespaceEntry CurrentNamespace {
       get { 
       	   return current_namespace;
       }
}


void Error_SyntaxError (int token)
{
	Error_SyntaxError (0, token, "Unexpected symbol");
}

void Error_SyntaxError (int error_code, int token, string msg)
{
	string symbol = GetSymbolName (token);
	string expecting = GetExpecting ();
	
	if (error_code == 0) {
		if (expecting == "`)'")
			error_code = 1026;
		else
			error_code = 1525;
	}
	
	if (expecting != null)
		Report.Error (error_code, lexer.Location, "{2} `{0}', expecting {1}", 
			symbol, expecting, msg);	  
	else
		Report.Error (error_code, lexer.Location, "{1} `{0}'", symbol, msg);
}

string GetExpecting ()
{
	int [] tokens = yyExpectingTokens (yyExpectingState);
	var names = new List<string> (tokens.Length);
	bool has_type = false;
	bool has_identifier = false;
	for (int i = 0; i < tokens.Length; i++){
		int token = tokens [i];
		has_identifier |= token == Token.IDENTIFIER;
		
		string name = GetTokenName (token);
		if (name == "<internal>")
			continue;
			
		has_type |= name == "type";
		if (names.Contains (name))
			continue;
		
		names.Add (name);
	}

	//
	// Too many tokens to enumerate
	//
	if (names.Count > 8)
		return null;

	if (has_type && has_identifier)
		names.Remove ("identifier");

	if (names.Count == 1)
		return "`" + GetTokenName (tokens [0]) + "'";
	
	StringBuilder sb = new StringBuilder ();
	names.Sort ();
	int count = names.Count;
	for (int i = 0; i < count; i++){
		bool last = i + 1 == count;
		if (last)
			sb.Append ("or ");
		sb.Append ('`');
		sb.Append (names [i]);
		sb.Append (last ? "'" : count < 3 ? "' " : "', ");
	}
	return sb.ToString ();
}


string GetSymbolName (int token)
{
	switch (token){
	case Token.LITERAL:
		return ((Constant)lexer.Value).GetValue ().ToString ();
	case Token.IDENTIFIER:
		return ((Tokenizer.LocatedToken)lexer.Value).Value;

	case Token.BOOL:
		return "bool";
	case Token.BYTE:
		return "byte";
	case Token.CHAR:
		return "char";
	case Token.VOID:
		return "void";
	case Token.DECIMAL:
		return "decimal";
	case Token.DOUBLE:
		return "double";
	case Token.FLOAT:
		return "float";
	case Token.INT:
		return "int";
	case Token.LONG:
		return "long";
	case Token.SBYTE:
		return "sbyte";
	case Token.SHORT:
		return "short";
	case Token.STRING:
		return "string";
	case Token.UINT:
		return "uint";
	case Token.ULONG:
		return "ulong";
	case Token.USHORT:
		return "ushort";
	case Token.OBJECT:
		return "object";
		
	case Token.PLUS:
		return "+";
	case Token.UMINUS:
	case Token.MINUS:
		return "-";
	case Token.BANG:
		return "!";
	case Token.BITWISE_AND:
		return "&";
	case Token.BITWISE_OR:
		return "|";
	case Token.STAR:
		return "*";
	case Token.PERCENT:
		return "%";
	case Token.DIV:
		return "/";
	case Token.CARRET:
		return "^";
	case Token.OP_INC:
		return "++";
	case Token.OP_DEC:
		return "--";
	case Token.OP_SHIFT_LEFT:
		return "<<";
	case Token.OP_SHIFT_RIGHT:
		return ">>";
	case Token.OP_LT:
		return "<";
	case Token.OP_GT:
		return ">";
	case Token.OP_LE:
		return "<=";
	case Token.OP_GE:
		return ">=";
	case Token.OP_EQ:
		return "==";
	case Token.OP_NE:
		return "!=";
	case Token.OP_AND:
		return "&&";
	case Token.OP_OR:
		return "||";
	case Token.OP_PTR:
		return "->";
	case Token.OP_COALESCING:	
		return "??";
	case Token.OP_MULT_ASSIGN:
		return "*=";
	case Token.OP_DIV_ASSIGN:
		return "/=";
	case Token.OP_MOD_ASSIGN:
		return "%=";
	case Token.OP_ADD_ASSIGN:
		return "+=";
	case Token.OP_SUB_ASSIGN:
		return "-=";
	case Token.OP_SHIFT_LEFT_ASSIGN:
		return "<<=";
	case Token.OP_SHIFT_RIGHT_ASSIGN:
		return ">>=";
	case Token.OP_AND_ASSIGN:
		return "&=";
	case Token.OP_XOR_ASSIGN:
		return "^=";
	case Token.OP_OR_ASSIGN:
		return "|=";
	}

	return GetTokenName (token);
}

static string GetTokenName (int token)
{
	switch (token){
	case Token.ABSTRACT:
		return "abstract";
	case Token.AS:
		return "as";
	case Token.ADD:
		return "add";
	case Token.BASE:
		return "base";
	case Token.BREAK:
		return "break";
	case Token.CASE:
		return "case";
	case Token.CATCH:
		return "catch";
	case Token.CHECKED:
		return "checked";
	case Token.CLASS:
		return "class";
	case Token.CONST:
		return "const";
	case Token.CONTINUE:
		return "continue";
	case Token.DEFAULT:
		return "default";
	case Token.DELEGATE:
		return "delegate";
	case Token.DO:
		return "do";
	case Token.ELSE:
		return "else";
	case Token.ENUM:
		return "enum";
	case Token.EVENT:
		return "event";
	case Token.EXPLICIT:
		return "explicit";
	case Token.EXTERN:
		return "extern";
	case Token.FALSE:
		return "false";
	case Token.FINALLY:
		return "finally";
	case Token.FIXED:
		return "fixed";
	case Token.FOR:
		return "for";
	case Token.FOREACH:
		return "foreach";
	case Token.GOTO:
		return "goto";
	case Token.IF:
		return "if";
	case Token.IMPLICIT:
		return "implicit";
	case Token.IN:
		return "in";
	case Token.INTERFACE:
		return "interface";
	case Token.INTERNAL:
		return "internal";
	case Token.IS:
		return "is";
	case Token.LOCK:
		return "lock";
	case Token.NAMESPACE:
		return "namespace";
	case Token.NEW:
		return "new";
	case Token.NULL:
		return "null";
	case Token.OPERATOR:
		return "operator";
	case Token.OUT:
		return "out";
	case Token.OVERRIDE:
		return "override";
	case Token.PARAMS:
		return "params";
	case Token.PRIVATE:
		return "private";
	case Token.PROTECTED:
		return "protected";
	case Token.PUBLIC:
		return "public";
	case Token.READONLY:
		return "readonly";
	case Token.REF:
		return "ref";
	case Token.RETURN:
		return "return";
	case Token.REMOVE:
		return "remove";
	case Token.SEALED:
		return "sealed";
	case Token.SIZEOF:
		return "sizeof";
	case Token.STACKALLOC:
		return "stackalloc";
	case Token.STATIC:
		return "static";
	case Token.STRUCT:
		return "struct";
	case Token.SWITCH:
		return "switch";
	case Token.THIS:
		return "this";
	case Token.THROW:
		return "throw";
	case Token.TRUE:
		return "true";
	case Token.TRY:
		return "try";
	case Token.TYPEOF:
		return "typeof";
	case Token.UNCHECKED:
		return "unchecked";
	case Token.UNSAFE:
		return "unsafe";
	case Token.USING:
		return "using";
	case Token.VIRTUAL:
		return "virtual";
	case Token.VOLATILE:
		return "volatile";
	case Token.WHERE:
		return "where";
	case Token.WHILE:
		return "while";
	case Token.ARGLIST:
		return "__arglist";
	case Token.PARTIAL:
		return "partial";
	case Token.ARROW:
		return "=>";
	case Token.FROM:
	case Token.FROM_FIRST:
		return "from";
	case Token.JOIN:
		return "join";
	case Token.ON:
		return "on";
	case Token.EQUALS:
		return "equals";
	case Token.SELECT:
		return "select";
	case Token.GROUP:
		return "group";
	case Token.BY:
		return "by";
	case Token.LET:
		return "let";
	case Token.ORDERBY:
		return "orderby";
	case Token.ASCENDING:
		return "ascending";
	case Token.DESCENDING:
		return "descending";
	case Token.INTO:
		return "into";
	case Token.GET:
		return "get";
	case Token.SET:
		return "set";
	case Token.OPEN_BRACE:
		return "{";
	case Token.CLOSE_BRACE:
		return "}";
	case Token.OPEN_BRACKET:
		return "[";
	case Token.CLOSE_BRACKET:
		return "]";
	case Token.OPEN_PARENS_CAST:
	case Token.OPEN_PARENS_LAMBDA:
	case Token.OPEN_PARENS:
		return "(";
	case Token.CLOSE_PARENS:
		return ")";
	case Token.DOT:
		return ".";
	case Token.COMMA:
		return ",";
	case Token.DEFAULT_COLON:
		return "default:";
	case Token.COLON:
		return ":";
	case Token.SEMICOLON:
		return ";";
	case Token.TILDE:
		return "~";
		
	case Token.PLUS:
	case Token.UMINUS:
	case Token.MINUS:
	case Token.BANG:
	case Token.OP_LT:
	case Token.OP_GT:
	case Token.BITWISE_AND:
	case Token.BITWISE_OR:
	case Token.STAR:
	case Token.PERCENT:
	case Token.DIV:
	case Token.CARRET:
	case Token.OP_INC:
	case Token.OP_DEC:
	case Token.OP_SHIFT_LEFT:
	case Token.OP_SHIFT_RIGHT:
	case Token.OP_LE:
	case Token.OP_GE:
	case Token.OP_EQ:
	case Token.OP_NE:
	case Token.OP_AND:
	case Token.OP_OR:
	case Token.OP_PTR:
	case Token.OP_COALESCING:	
	case Token.OP_MULT_ASSIGN:
	case Token.OP_DIV_ASSIGN:
	case Token.OP_MOD_ASSIGN:
	case Token.OP_ADD_ASSIGN:
	case Token.OP_SUB_ASSIGN:
	case Token.OP_SHIFT_LEFT_ASSIGN:
	case Token.OP_SHIFT_RIGHT_ASSIGN:
	case Token.OP_AND_ASSIGN:
	case Token.OP_XOR_ASSIGN:
	case Token.OP_OR_ASSIGN:
		return "<operator>";

	case Token.BOOL:
	case Token.BYTE:
	case Token.CHAR:
	case Token.VOID:
	case Token.DECIMAL:
	case Token.DOUBLE:
	case Token.FLOAT:
	case Token.INT:
	case Token.LONG:
	case Token.SBYTE:
	case Token.SHORT:
	case Token.STRING:
	case Token.UINT:
	case Token.ULONG:
	case Token.USHORT:
	case Token.OBJECT:
		return "type";
	
	case Token.ASSIGN:
		return "=";
	case Token.OP_GENERICS_LT:
	case Token.GENERIC_DIMENSION:
		return "<";
	case Token.OP_GENERICS_GT:
		return ">";
	case Token.INTERR:
	case Token.INTERR_NULLABLE:
		return "?";
	case Token.DOUBLE_COLON:
		return "::";
	case Token.LITERAL:
		return "value";
	case Token.IDENTIFIER:
		return "identifier";

		// All of these are internal.
	case Token.NONE:
	case Token.ERROR:
	case Token.FIRST_KEYWORD:
	case Token.EOF:
	case Token.EVAL_COMPILATION_UNIT_PARSER:
	case Token.EVAL_USING_DECLARATIONS_UNIT_PARSER:
	case Token.EVAL_STATEMENT_PARSER:
	case Token.LAST_KEYWORD:
	case Token.GENERATE_COMPLETION:
	case Token.COMPLETE_COMPLETION:
		return "<internal>";

		// A bit more robust.
	default:
		return yyNames [token];
        }
}

/* end end end */
}
#line default
namespace yydebug {
        using System;
	 internal interface yyDebug {
		 void push (int state, Object value);
		 void lex (int state, int token, string name, Object value);
		 void shift (int from, int to, int errorFlag);
		 void pop (int state);
		 void discard (int state, int token, string name, Object value);
		 void reduce (int from, int to, int rule, string text, int len);
		 void shift (int from, int to);
		 void accept (Object value);
		 void error (string message);
		 void reject ();
	 }
	 
	 class yyDebugSimple : yyDebug {
		 void println (string s){
			 Console.Error.WriteLine (s);
		 }
		 
		 public void push (int state, Object value) {
			 println ("push\tstate "+state+"\tvalue "+value);
		 }
		 
		 public void lex (int state, int token, string name, Object value) {
			 println("lex\tstate "+state+"\treading "+name+"\tvalue "+value);
		 }
		 
		 public void shift (int from, int to, int errorFlag) {
			 switch (errorFlag) {
			 default:				// normally
				 println("shift\tfrom state "+from+" to "+to);
				 break;
			 case 0: case 1: case 2:		// in error recovery
				 println("shift\tfrom state "+from+" to "+to
					     +"\t"+errorFlag+" left to recover");
				 break;
			 case 3:				// normally
				 println("shift\tfrom state "+from+" to "+to+"\ton error");
				 break;
			 }
		 }
		 
		 public void pop (int state) {
			 println("pop\tstate "+state+"\ton error");
		 }
		 
		 public void discard (int state, int token, string name, Object value) {
			 println("discard\tstate "+state+"\ttoken "+name+"\tvalue "+value);
		 }
		 
		 public void reduce (int from, int to, int rule, string text, int len) {
			 println("reduce\tstate "+from+"\tuncover "+to
				     +"\trule ("+rule+") "+text);
		 }
		 
		 public void shift (int from, int to) {
			 println("goto\tfrom state "+from+" to "+to);
		 }
		 
		 public void accept (Object value) {
			 println("accept\tvalue "+value);
		 }
		 
		 public void error (string message) {
			 println("error\t"+message);
		 }
		 
		 public void reject () {
			 println("reject");
		 }
		 
	 }
}
// %token constants
 class Token {
  public const int EOF = 257;
  public const int NONE = 258;
  public const int ERROR = 259;
  public const int FIRST_KEYWORD = 260;
  public const int ABSTRACT = 261;
  public const int AS = 262;
  public const int ADD = 263;
  public const int BASE = 264;
  public const int BOOL = 265;
  public const int BREAK = 266;
  public const int BYTE = 267;
  public const int CASE = 268;
  public const int CATCH = 269;
  public const int CHAR = 270;
  public const int CHECKED = 271;
  public const int CLASS = 272;
  public const int CONST = 273;
  public const int CONTINUE = 274;
  public const int DECIMAL = 275;
  public const int DEFAULT = 276;
  public const int DELEGATE = 277;
  public const int DO = 278;
  public const int DOUBLE = 279;
  public const int ELSE = 280;
  public const int ENUM = 281;
  public const int EVENT = 282;
  public const int EXPLICIT = 283;
  public const int EXTERN = 284;
  public const int FALSE = 285;
  public const int FINALLY = 286;
  public const int FIXED = 287;
  public const int FLOAT = 288;
  public const int FOR = 289;
  public const int FOREACH = 290;
  public const int GOTO = 291;
  public const int IF = 292;
  public const int IMPLICIT = 293;
  public const int IN = 294;
  public const int INT = 295;
  public const int INTERFACE = 296;
  public const int INTERNAL = 297;
  public const int IS = 298;
  public const int LOCK = 299;
  public const int LONG = 300;
  public const int NAMESPACE = 301;
  public const int NEW = 302;
  public const int NULL = 303;
  public const int OBJECT = 304;
  public const int OPERATOR = 305;
  public const int OUT = 306;
  public const int OVERRIDE = 307;
  public const int PARAMS = 308;
  public const int PRIVATE = 309;
  public const int PROTECTED = 310;
  public const int PUBLIC = 311;
  public const int READONLY = 312;
  public const int REF = 313;
  public const int RETURN = 314;
  public const int REMOVE = 315;
  public const int SBYTE = 316;
  public const int SEALED = 317;
  public const int SHORT = 318;
  public const int SIZEOF = 319;
  public const int STACKALLOC = 320;
  public const int STATIC = 321;
  public const int STRING = 322;
  public const int STRUCT = 323;
  public const int SWITCH = 324;
  public const int THIS = 325;
  public const int THROW = 326;
  public const int TRUE = 327;
  public const int TRY = 328;
  public const int TYPEOF = 329;
  public const int UINT = 330;
  public const int ULONG = 331;
  public const int UNCHECKED = 332;
  public const int UNSAFE = 333;
  public const int USHORT = 334;
  public const int USING = 335;
  public const int VIRTUAL = 336;
  public const int VOID = 337;
  public const int VOLATILE = 338;
  public const int WHERE = 339;
  public const int WHILE = 340;
  public const int ARGLIST = 341;
  public const int PARTIAL = 342;
  public const int ARROW = 343;
  public const int FROM = 344;
  public const int FROM_FIRST = 345;
  public const int JOIN = 346;
  public const int ON = 347;
  public const int EQUALS = 348;
  public const int SELECT = 349;
  public const int GROUP = 350;
  public const int BY = 351;
  public const int LET = 352;
  public const int ORDERBY = 353;
  public const int ASCENDING = 354;
  public const int DESCENDING = 355;
  public const int INTO = 356;
  public const int INTERR_NULLABLE = 357;
  public const int EXTERN_ALIAS = 358;
  public const int OP_GENERICS_LT = 359;
  public const int OP_GENERICS_LT_DECL = 360;
  public const int OP_GENERICS_GT = 361;
  public const int GET = 362;
  public const int SET = 363;
  public const int LAST_KEYWORD = 364;
  public const int OPEN_BRACE = 365;
  public const int CLOSE_BRACE = 366;
  public const int OPEN_BRACKET = 367;
  public const int CLOSE_BRACKET = 368;
  public const int OPEN_PARENS = 369;
  public const int CLOSE_PARENS = 370;
  public const int DOT = 371;
  public const int COMMA = 372;
  public const int COLON = 373;
  public const int SEMICOLON = 374;
  public const int TILDE = 375;
  public const int PLUS = 376;
  public const int MINUS = 377;
  public const int BANG = 378;
  public const int ASSIGN = 379;
  public const int OP_LT = 380;
  public const int OP_GT = 381;
  public const int BITWISE_AND = 382;
  public const int BITWISE_OR = 383;
  public const int STAR = 384;
  public const int PERCENT = 385;
  public const int DIV = 386;
  public const int CARRET = 387;
  public const int INTERR = 388;
  public const int DOUBLE_COLON = 389;
  public const int OP_INC = 390;
  public const int OP_DEC = 391;
  public const int OP_SHIFT_LEFT = 392;
  public const int OP_SHIFT_RIGHT = 393;
  public const int OP_LE = 394;
  public const int OP_GE = 395;
  public const int OP_EQ = 396;
  public const int OP_NE = 397;
  public const int OP_AND = 398;
  public const int OP_OR = 399;
  public const int OP_MULT_ASSIGN = 400;
  public const int OP_DIV_ASSIGN = 401;
  public const int OP_MOD_ASSIGN = 402;
  public const int OP_ADD_ASSIGN = 403;
  public const int OP_SUB_ASSIGN = 404;
  public const int OP_SHIFT_LEFT_ASSIGN = 405;
  public const int OP_SHIFT_RIGHT_ASSIGN = 406;
  public const int OP_AND_ASSIGN = 407;
  public const int OP_XOR_ASSIGN = 408;
  public const int OP_OR_ASSIGN = 409;
  public const int OP_PTR = 410;
  public const int OP_COALESCING = 411;
  public const int LITERAL = 412;
  public const int IDENTIFIER = 413;
  public const int OPEN_PARENS_LAMBDA = 414;
  public const int OPEN_PARENS_CAST = 415;
  public const int GENERIC_DIMENSION = 416;
  public const int DEFAULT_COLON = 417;
  public const int EVAL_STATEMENT_PARSER = 418;
  public const int EVAL_COMPILATION_UNIT_PARSER = 419;
  public const int EVAL_USING_DECLARATIONS_UNIT_PARSER = 420;
  public const int GENERATE_COMPLETION = 421;
  public const int COMPLETE_COMPLETION = 422;
  public const int UMINUS = 423;
  public const int yyErrorCode = 256;
 }
 namespace yyParser {
  using System;
  /** thrown for irrecoverable syntax errors and stack overflow.
    */
  internal class yyException : System.Exception {
    public yyException (string message) : base (message) {
    }
  }
  internal class yyUnexpectedEof : yyException {
    public yyUnexpectedEof (string message) : base (message) {
    }
    public yyUnexpectedEof () : base ("") {
    }
  }

  /** must be implemented by a scanner object to supply input to the parser.
    */
  internal interface yyInput {
    /** move on to next token.
        @return false if positioned beyond tokens.
        @throws IOException on input error.
      */
    bool advance (); // throws java.io.IOException;
    /** classifies current token.
        Should not be called if advance() returned false.
        @return current %token or single character.
      */
    int token ();
    /** associated with current token.
        Should not be called if advance() returned false.
        @return value for token().
      */
    Object value ();
  }
 }
} // close outermost namespace, that MUST HAVE BEEN opened in the prolog
